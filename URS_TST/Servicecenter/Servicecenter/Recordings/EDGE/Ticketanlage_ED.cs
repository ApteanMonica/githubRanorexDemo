///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Servicecenter.Recordings.EDGE
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Ticketanlage_ED recording.
    /// </summary>
    [TestModule("c4557211-0475-47d3-b8ba-b56f3ddd8bf7", ModuleType.Recording, 1)]
    public partial class Ticketanlage_ED : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Servicecenter.ServicecenterRepository repository.
        /// </summary>
        public static global::Servicecenter.ServicecenterRepository repo = global::Servicecenter.ServicecenterRepository.Instance;

        static Ticketanlage_ED instance = new Ticketanlage_ED();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Ticketanlage_ED()
        {
            Bereich = "CRM";
            Version = "4.9.1 Servicepack 10";
            Programm = "C_CRM";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Ticketanlage_ED Instance
        {
            get { return instance; }
        }

#region Variables

        string _Bereich;

        /// <summary>
        /// Gets or sets the value of variable Bereich.
        /// </summary>
        [TestVariable("481a90fc-97b1-4c4c-b308-618d97c16d0f")]
        public string Bereich
        {
            get { return _Bereich; }
            set { _Bereich = value; }
        }

        string _Version;

        /// <summary>
        /// Gets or sets the value of variable Version.
        /// </summary>
        [TestVariable("1a67304e-5f9e-4119-af75-96967fcac391")]
        public string Version
        {
            get { return _Version; }
            set { _Version = value; }
        }

        string _Programm;

        /// <summary>
        /// Gets or sets the value of variable Programm.
        /// </summary>
        [TestVariable("0b0284c9-c921-43ae-b846-1f4436a0ca75")]
        public string Programm
        {
            get { return _Programm; }
            set { _Programm = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Windows.Fehler_Edge.T_Bereich_ED' at Center.", repo.Windows.Fehler_Edge.T_Bereich_EDInfo, new RecordItemIndex(0));
            repo.Windows.Fehler_Edge.T_Bereich_ED.Click();
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(1));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Bereich'.", new RecordItemIndex(2));
            Keyboard.Press(Bereich);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(3));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(4));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Bereich) on item 'Windows.Fehler_Edge.CRM_Ticketanlage'.", repo.Windows.Fehler_Edge.CRM_TicketanlageInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.Windows.Fehler_Edge.CRM_TicketanlageInfo, "Text", Bereich);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Windows.Fehler_Edge.Version_ED' at Center.", repo.Windows.Fehler_Edge.Version_EDInfo, new RecordItemIndex(6));
            repo.Windows.Fehler_Edge.Version_ED.Click();
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(7));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Version'.", new RecordItemIndex(8));
            Keyboard.Press(Version);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(9));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(10));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Version) on item 'Windows.Fehler_Edge.N491_SP_10_ED'.", repo.Windows.Fehler_Edge.N491_SP_10_EDInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.Windows.Fehler_Edge.N491_SP_10_EDInfo, "Text", Version);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Windows.Fehler_Edge.Programm_auswaehlen' at Center.", repo.Windows.Fehler_Edge.Programm_auswaehlenInfo, new RecordItemIndex(12));
            repo.Windows.Fehler_Edge.Programm_auswaehlen.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Programm' with focus on 'Windows.Fehler_Edge.Programm_auswaehlen'.", repo.Windows.Fehler_Edge.Programm_auswaehlenInfo, new RecordItemIndex(13));
            repo.Windows.Fehler_Edge.Programm_auswaehlen.PressKeys(Programm);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Programm) on item 'Windows.Fehler_Edge.Programm_C_CRM'.", repo.Windows.Fehler_Edge.Programm_C_CRMInfo, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.Windows.Fehler_Edge.Programm_C_CRMInfo, "Text", Programm);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
