///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Servicecenter.Recordings.EDGE
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Anmeldun_ED recording.
    /// </summary>
    [TestModule("a46e5bed-9230-4e21-a2d3-25e8b12eca52", ModuleType.Recording, 1)]
    public partial class Anmeldun_ED : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Servicecenter.ServicecenterRepository repository.
        /// </summary>
        public static global::Servicecenter.ServicecenterRepository repo = global::Servicecenter.ServicecenterRepository.Instance;

        static Anmeldun_ED instance = new Anmeldun_ED();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Anmeldun_ED()
        {
            Benutzer = "kundenbereich@rs-soft.com";
            Passwort = "1234";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Anmeldun_ED Instance
        {
            get { return instance; }
        }

#region Variables

        string _Benutzer;

        /// <summary>
        /// Gets or sets the value of variable Benutzer.
        /// </summary>
        [TestVariable("8ec1c9ca-8aba-4903-a4b1-4a157b0b8215")]
        public string Benutzer
        {
            get { return _Benutzer; }
            set { _Benutzer = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Passwort.
        /// </summary>
        [TestVariable("04c76f31-2fcf-465b-8f07-8a504adc4389")]
        public string Passwort
        {
            get { return repo.Passwort; }
            set { repo.Passwort = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 15s.", new RecordItemIndex(0));
            Delay.Duration(15000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Windows.BenutzernameEMail1' at Center.", repo.Windows.BenutzernameEMail1Info, new RecordItemIndex(1));
            repo.Windows.BenutzernameEMail1.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Benutzer' with focus on 'Windows.BenutzernameEMail1'.", repo.Windows.BenutzernameEMail1Info, new RecordItemIndex(2));
            repo.Windows.BenutzernameEMail1.PressKeys(Benutzer);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Benutzer) on item 'Windows.BenutzernameEMail1'.", repo.Windows.BenutzernameEMail1Info, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.Windows.BenutzernameEMail1Info, "Text", Benutzer);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Windows.Kennwort1' at Center.", repo.Windows.Kennwort1Info, new RecordItemIndex(4));
            repo.Windows.Kennwort1.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Passwort' with focus on 'Windows.Kennwort1'.", repo.Windows.Kennwort1Info, new RecordItemIndex(5));
            repo.Windows.Kennwort1.PressKeys(Passwort);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Windows.Anmelden' at Center.", repo.Windows.AnmeldenInfo, new RecordItemIndex(6));
            repo.Windows.Anmelden.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'Windows.TicketErstellen'.", repo.Windows.TicketErstellenInfo, new RecordItemIndex(7));
            Validate.Exists(repo.Windows.TicketErstellenInfo);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
