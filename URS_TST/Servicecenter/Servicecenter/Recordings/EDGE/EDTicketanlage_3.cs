///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Servicecenter.Recordings.EDGE
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The EDTicketanlage_3 recording.
    /// </summary>
    [TestModule("e0c50f8e-37c0-4ee9-9f9a-1ab29e8144e0", ModuleType.Recording, 1)]
    public partial class EDTicketanlage_3 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Servicecenter.ServicecenterRepository repository.
        /// </summary>
        public static global::Servicecenter.ServicecenterRepository repo = global::Servicecenter.ServicecenterRepository.Instance;

        static EDTicketanlage_3 instance = new EDTicketanlage_3();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public EDTicketanlage_3()
        {
            Dateipfad = "";
            Datei = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static EDTicketanlage_3 Instance
        {
            get { return instance; }
        }

#region Variables

        string _Dateipfad;

        /// <summary>
        /// Gets or sets the value of variable Dateipfad.
        /// </summary>
        [TestVariable("b45ebc03-6ced-489b-865a-097e48f17cd4")]
        public string Dateipfad
        {
            get { return _Dateipfad; }
            set { _Dateipfad = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Datei.
        /// </summary>
        [TestVariable("9da8a52c-9b60-4bbc-b12b-a46184006521")]
        public string Datei
        {
            get { return repo.Datei; }
            set { repo.Datei = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.T_Dateiauswaehlen' at Center.", repo.Servicecenter.Ticket_Lizenz.T_DateiauswaehlenInfo, new RecordItemIndex(0));
            repo.Servicecenter.Ticket_Lizenz.T_Dateiauswaehlen.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Windows.ToolBar1001' at CenterRight.", repo.Windows.ToolBar1001Info, new RecordItemIndex(1));
            repo.Windows.ToolBar1001.Click(Location.CenterRight);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Dateipfad'.", new RecordItemIndex(2));
            Keyboard.Press(Dateipfad);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(3));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(4));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'Windows.SystemItemNameDisplay1' at Center.", repo.Windows.SystemItemNameDisplay1Info, new RecordItemIndex(5));
            repo.Windows.SystemItemNameDisplay1.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Datei) on item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_WerbungPng'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_WerbungPngInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_WerbungPngInfo, "InnerText", Datei);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Ticket_erstellen' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Ticket_erstellenInfo, new RecordItemIndex(7));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Ticket_erstellen.Click();
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Abbrechen' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_AbbrechenInfo, new RecordItemIndex(8));
            //repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Abbrechen.Click();
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(9));
            //Delay.Duration(500, false);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.ButtonTagJa' at Center.", repo.Servicecenter.ButtonTagJaInfo, new RecordItemIndex(10));
            //repo.Servicecenter.ButtonTagJa.Click();
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(11));
            Delay.Duration(10000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
