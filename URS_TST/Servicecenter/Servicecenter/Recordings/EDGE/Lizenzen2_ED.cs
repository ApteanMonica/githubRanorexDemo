///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Servicecenter.Recordings.EDGE
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Lizenzen2_ED recording.
    /// </summary>
    [TestModule("2f42b727-5bf0-40cf-b5e4-0de3bb45532e", ModuleType.Recording, 1)]
    public partial class Lizenzen2_ED : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Servicecenter.ServicecenterRepository repository.
        /// </summary>
        public static global::Servicecenter.ServicecenterRepository repo = global::Servicecenter.ServicecenterRepository.Instance;

        static Lizenzen2_ED instance = new Lizenzen2_ED();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Lizenzen2_ED()
        {
            Email = "";
            Anmerkung = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Lizenzen2_ED Instance
        {
            get { return instance; }
        }

#region Variables

        string _Email;

        /// <summary>
        /// Gets or sets the value of variable Email.
        /// </summary>
        [TestVariable("cf76dce7-0f6c-45e1-9883-bb8a50e725c4")]
        public string Email
        {
            get { return _Email; }
            set { _Email = value; }
        }

        string _Anmerkung;

        /// <summary>
        /// Gets or sets the value of variable Anmerkung.
        /// </summary>
        [TestVariable("9dd5e374-227e-49b3-ae8b-6308a062e8ab")]
        public string Anmerkung
        {
            get { return _Anmerkung; }
            set { _Anmerkung = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.L_Preiserh_' at Center.", repo.Servicecenter.L_Preiserh_Info, new RecordItemIndex(0));
            repo.Servicecenter.L_Preiserh_.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(1));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.L_Preiserh_' at Center.", repo.Servicecenter.L_Preiserh_Info, new RecordItemIndex(2));
            repo.Servicecenter.L_Preiserh_.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 100ms.", new RecordItemIndex(3));
            Delay.Duration(100, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Checkbox' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_CheckboxInfo, new RecordItemIndex(4));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Checkbox.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse scroll Vertical by 1000 units.", new RecordItemIndex(5));
            Mouse.ScrollWheel(1000);
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Email' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_EmailInfo, new RecordItemIndex(6));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Email.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Email' with focus on 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Email'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_EmailInfo, new RecordItemIndex(7));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Email.PressKeys(Email);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$Email) on item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Email'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_EmailInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_EmailInfo, "Value", Email);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Emailtext' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_EmailtextInfo, new RecordItemIndex(9));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Emailtext.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Anmerkung' with focus on 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Emailtext'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_EmailtextInfo, new RecordItemIndex(10));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Emailtext.PressKeys(Anmerkung);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$Anmerkung) on item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Emailtext'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_EmailtextInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_EmailtextInfo, "Value", Anmerkung);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Featureskaufen' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_FeatureskaufenInfo, new RecordItemIndex(12));
            //repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Featureskaufen.Click();
            //Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
