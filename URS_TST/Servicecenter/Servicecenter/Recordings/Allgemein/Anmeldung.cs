///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Servicecenter.Recordings.Allgemein
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The FFAnmeldung recording.
    /// </summary>
    [TestModule("d48ae4b1-7924-4d58-b549-2ef706108a4b", ModuleType.Recording, 1)]
    public partial class Anmeldung : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Servicecenter.ServicecenterRepository repository.
        /// </summary>
        public static global::Servicecenter.ServicecenterRepository repo = global::Servicecenter.ServicecenterRepository.Instance;

        static Anmeldung instance = new Anmeldung();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Anmeldung()
        {
            Benutzer = "";
            Passwort = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Anmeldung Instance
        {
            get { return instance; }
        }

#region Variables

        string _Benutzer;

        /// <summary>
        /// Gets or sets the value of variable Benutzer.
        /// </summary>
        [TestVariable("94505136-50c9-4b95-92ac-50915d557cbe")]
        public string Benutzer
        {
            get { return _Benutzer; }
            set { _Benutzer = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Passwort.
        /// </summary>
        [TestVariable("505c8afa-55bd-4c2d-9307-2e1d357d0c2f")]
        public string Passwort
        {
            get { return repo.Passwort; }
            set { repo.Passwort = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 15s.", new RecordItemIndex(0));
            Delay.Duration(15000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Download_TicketUebersicht.Downloads.Benutzer' at Center.", repo.Servicecenter.Download_TicketUebersicht.Downloads.BenutzerInfo, new RecordItemIndex(1));
            repo.Servicecenter.Download_TicketUebersicht.Downloads.Benutzer.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Benutzer' with focus on 'Servicecenter.Download_TicketUebersicht.Downloads.Benutzer'.", repo.Servicecenter.Download_TicketUebersicht.Downloads.BenutzerInfo, new RecordItemIndex(2));
            repo.Servicecenter.Download_TicketUebersicht.Downloads.Benutzer.PressKeys(Benutzer);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$Benutzer) on item 'Servicecenter.Download_TicketUebersicht.Downloads.Benutzer'.", repo.Servicecenter.Download_TicketUebersicht.Downloads.BenutzerInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.Servicecenter.Download_TicketUebersicht.Downloads.BenutzerInfo, "Value", Benutzer);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Download_TicketUebersicht.Downloads.Passwort' at Center.", repo.Servicecenter.Download_TicketUebersicht.Downloads.PasswortInfo, new RecordItemIndex(4));
            repo.Servicecenter.Download_TicketUebersicht.Downloads.Passwort.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Passwort' with focus on 'Servicecenter.Download_TicketUebersicht.Downloads.Passwort'.", repo.Servicecenter.Download_TicketUebersicht.Downloads.PasswortInfo, new RecordItemIndex(5));
            repo.Servicecenter.Download_TicketUebersicht.Downloads.Passwort.PressKeys(Passwort);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$Passwort) on item 'Servicecenter.Download_TicketUebersicht.Downloads.Passwort'.", repo.Servicecenter.Download_TicketUebersicht.Downloads.PasswortInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.Servicecenter.Download_TicketUebersicht.Downloads.PasswortInfo, "Value", Passwort);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Download_TicketUebersicht.Downloads.Anmelden' at Center.", repo.Servicecenter.Download_TicketUebersicht.Downloads.AnmeldenInfo, new RecordItemIndex(7));
            repo.Servicecenter.Download_TicketUebersicht.Downloads.Anmelden.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'Servicecenter.Ticket_Lizenz.T_TicketErstellen'.", repo.Servicecenter.Ticket_Lizenz.T_TicketErstellenInfo, new RecordItemIndex(8));
            Validate.Exists(repo.Servicecenter.Ticket_Lizenz.T_TicketErstellenInfo);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
