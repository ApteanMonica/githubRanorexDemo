///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Servicecenter.Recordings.Allgemein
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Ticketanlage_2 recording.
    /// </summary>
    [TestModule("d3b316f3-0ea1-4b73-9386-368d524287cc", ModuleType.Recording, 1)]
    public partial class Ticketanlage_2 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Servicecenter.ServicecenterRepository repository.
        /// </summary>
        public static global::Servicecenter.ServicecenterRepository repo = global::Servicecenter.ServicecenterRepository.Instance;

        static Ticketanlage_2 instance = new Ticketanlage_2();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Ticketanlage_2()
        {
            Titel = "";
            Text = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Ticketanlage_2 Instance
        {
            get { return instance; }
        }

#region Variables

        string _Titel;

        /// <summary>
        /// Gets or sets the value of variable Titel.
        /// </summary>
        [TestVariable("08f3862c-7173-4ffe-9dee-2105eed7d9eb")]
        public string Titel
        {
            get { return _Titel; }
            set { _Titel = value; }
        }

        string _Text;

        /// <summary>
        /// Gets or sets the value of variable Text.
        /// </summary>
        [TestVariable("79d530b8-2d6c-4cb1-ac63-a198efb7e82f")]
        public string Text
        {
            get { return _Text; }
            set { _Text = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Titel' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_TitelInfo, new RecordItemIndex(0));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Titel.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Titel' with focus on 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Titel'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_TitelInfo, new RecordItemIndex(1));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Titel.PressKeys(Titel);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$Titel) on item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Titel'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_TitelInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_TitelInfo, "Value", Titel);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Textfeld' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_TextfeldInfo, new RecordItemIndex(3));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Textfeld.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Text' with focus on 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Textfeld'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_TextfeldInfo, new RecordItemIndex(4));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Textfeld.PressKeys(Text);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Text) on item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Textfeld'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_TextfeldInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_TextfeldInfo, "TagValue", Text);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
