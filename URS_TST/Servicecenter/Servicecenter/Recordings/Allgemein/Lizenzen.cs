///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Servicecenter.Recordings.Allgemein
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Lizenzen recording.
    /// </summary>
    [TestModule("bb764758-714c-4a5b-80f3-8da45ed5a67b", ModuleType.Recording, 1)]
    public partial class Lizenzen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Servicecenter.ServicecenterRepository repository.
        /// </summary>
        public static global::Servicecenter.ServicecenterRepository repo = global::Servicecenter.ServicecenterRepository.Instance;

        static Lizenzen instance = new Lizenzen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Lizenzen()
        {
            Email = "";
            Anmerkung = "";
            Lizenz = "";
            Datenbank = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Lizenzen Instance
        {
            get { return instance; }
        }

#region Variables

        string _Email;

        /// <summary>
        /// Gets or sets the value of variable Email.
        /// </summary>
        [TestVariable("604dbee4-79ab-437b-b67f-f7374bc0bf43")]
        public string Email
        {
            get { return _Email; }
            set { _Email = value; }
        }

        string _Anmerkung;

        /// <summary>
        /// Gets or sets the value of variable Anmerkung.
        /// </summary>
        [TestVariable("7367025d-04de-4f8c-a753-135558a2116e")]
        public string Anmerkung
        {
            get { return _Anmerkung; }
            set { _Anmerkung = value; }
        }

        string _Lizenz;

        /// <summary>
        /// Gets or sets the value of variable Lizenz.
        /// </summary>
        [TestVariable("76ce6320-ab09-41d7-8d05-3dbe9185b3ae")]
        public string Lizenz
        {
            get { return _Lizenz; }
            set { _Lizenz = value; }
        }

        string _Datenbank;

        /// <summary>
        /// Gets or sets the value of variable Datenbank.
        /// </summary>
        [TestVariable("83af184e-4189-4dcf-9f0c-f8ea2054d712")]
        public string Datenbank
        {
            get { return _Datenbank; }
            set { _Datenbank = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Bereiche.Bereich_Lizenzen' at Center.", repo.Servicecenter.Bereiche.Bereich_LizenzenInfo, new RecordItemIndex(0));
            repo.Servicecenter.Bereiche.Bereich_Lizenzen.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Service Center: Lizenzen') on item 'Servicecenter.Ticket_Lizenz.L_ServiceCenterLizenzen'.", repo.Servicecenter.Ticket_Lizenz.L_ServiceCenterLizenzenInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.Servicecenter.Ticket_Lizenz.L_ServiceCenterLizenzenInfo, "InnerText", "Service Center: Lizenzen");
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(2));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Lizenz' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_LizenzInfo, new RecordItemIndex(3));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Lizenz.Click();
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(4));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.L_TSTTestlizenz' at Center.", repo.Servicecenter.Ticket_Lizenz.L_TSTTestlizenzInfo, new RecordItemIndex(5));
            repo.Servicecenter.Ticket_Lizenz.L_TSTTestlizenz.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Lizenz) on item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_TSTTestlizenz'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_TSTTestlizenzInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_TSTTestlizenzInfo, "InnerText", Lizenz);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Datenbank' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_DatenbankInfo, new RecordItemIndex(7));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Datenbank.Click();
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(8));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.L_BEINTEST' at Center.", repo.Servicecenter.Ticket_Lizenz.L_BEINTESTInfo, new RecordItemIndex(9));
            repo.Servicecenter.Ticket_Lizenz.L_BEINTEST.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Datenbank) on item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_BEINTEST'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_BEINTESTInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_BEINTESTInfo, "InnerText", Datenbank);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_Checkbox'", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_CheckboxInfo, new ActionTimeout(10000), new RecordItemIndex(11));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.L_CheckboxInfo.WaitForExists(10000);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
