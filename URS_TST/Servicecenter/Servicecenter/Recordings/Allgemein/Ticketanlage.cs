///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Servicecenter.Recordings.Allgemein
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Ticketanlage recording.
    /// </summary>
    [TestModule("00ea7d2d-f9e5-4f54-9997-f700fa0758e6", ModuleType.Recording, 1)]
    public partial class Ticketanlage : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Servicecenter.ServicecenterRepository repository.
        /// </summary>
        public static global::Servicecenter.ServicecenterRepository repo = global::Servicecenter.ServicecenterRepository.Instance;

        static Ticketanlage instance = new Ticketanlage();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Ticketanlage()
        {
            Version = "";
            Bereich = "";
            Programm = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Ticketanlage Instance
        {
            get { return instance; }
        }

#region Variables

        string _Version;

        /// <summary>
        /// Gets or sets the value of variable Version.
        /// </summary>
        [TestVariable("d7a0420e-400e-4156-a445-980ac6cec998")]
        public string Version
        {
            get { return _Version; }
            set { _Version = value; }
        }

        string _Bereich;

        /// <summary>
        /// Gets or sets the value of variable Bereich.
        /// </summary>
        [TestVariable("ad94a143-49e6-49a6-96bf-779ed6873a0a")]
        public string Bereich
        {
            get { return _Bereich; }
            set { _Bereich = value; }
        }

        string _Programm;

        /// <summary>
        /// Gets or sets the value of variable Programm.
        /// </summary>
        [TestVariable("208bc98b-f8a5-4bbe-a3bd-5472023a7e02")]
        public string Programm
        {
            get { return _Programm; }
            set { _Programm = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Dropdown_Bereich' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Dropdown_BereichInfo, new RecordItemIndex(0));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Dropdown_Bereich.Click();
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(1));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Bereich' with focus on 'Servicecenter.Ticket_Lizenz.T_Bereich'.", repo.Servicecenter.Ticket_Lizenz.T_BereichInfo, new RecordItemIndex(2));
            repo.Servicecenter.Ticket_Lizenz.T_Bereich.PressKeys(Bereich);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(3));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press with focus on 'Servicecenter.Ticket_Lizenz.T_Bereich'.", repo.Servicecenter.Ticket_Lizenz.T_BereichInfo, new RecordItemIndex(4));
            Keyboard.PrepareFocus(repo.Servicecenter.Ticket_Lizenz.T_Bereich);
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Bereich) on item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_CRM'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_CRMInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_CRMInfo, "InnerText", Bereich);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Dropdown_Version' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Dropdown_VersionInfo, new RecordItemIndex(6));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Dropdown_Version.Click();
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(7));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Version' with focus on 'Servicecenter.Ticket_Lizenz.T_Version'.", repo.Servicecenter.Ticket_Lizenz.T_VersionInfo, new RecordItemIndex(8));
            repo.Servicecenter.Ticket_Lizenz.T_Version.PressKeys(Version);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(9));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press with focus on 'Servicecenter.Ticket_Lizenz.T_Version'.", repo.Servicecenter.Ticket_Lizenz.T_VersionInfo, new RecordItemIndex(10));
            Keyboard.PrepareFocus(repo.Servicecenter.Ticket_Lizenz.T_Version);
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.T_Version' at Center.", repo.Servicecenter.Ticket_Lizenz.T_VersionInfo, new RecordItemIndex(11));
            repo.Servicecenter.Ticket_Lizenz.T_Version.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Version) on item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_491Servicepack10'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_491Servicepack10Info, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_491Servicepack10Info, "InnerText", Version);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Programm' at Center.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_ProgrammInfo, new RecordItemIndex(13));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Programm.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Programm' with focus on 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Programm'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_ProgrammInfo, new RecordItemIndex(14));
            repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Programm.PressKeys(Programm);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Programm) on item 'Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_Programm'.", repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_ProgrammInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.Servicecenter.Ticket_Lizenz.Ticket_Lizenz.T_ProgrammInfo, "TagValue", Programm);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
