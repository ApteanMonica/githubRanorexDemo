///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Hotfixtest_490.Recordings.S_ADR
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The S_ADR recording.
    /// </summary>
    [TestModule("43935f04-54ed-4a8f-abfc-b93064e04ff0", ModuleType.Recording, 1)]
    public partial class S_ADR : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Hotfixtest_490.Hotfixtest_490Repository repository.
        /// </summary>
        public static global::Hotfixtest_490.Hotfixtest_490Repository repo = global::Hotfixtest_490.Hotfixtest_490Repository.Instance;

        static S_ADR instance = new S_ADR();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public S_ADR()
        {
            Kunde = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static S_ADR Instance
        {
            get { return instance; }
        }

#region Variables

        string _Kunde;

        /// <summary>
        /// Gets or sets the value of variable Kunde.
        /// </summary>
        [TestVariable("069502f8-1459-4680-9eb6-096e4cf4d703")]
        public string Kunde
        {
            get { return _Kunde; }
            set { _Kunde = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAdr.PbNeuNr' at Center.", repo.FrmAdr.PbNeuNrInfo, new RecordItemIndex(0));
            repo.FrmAdr.PbNeuNr.Click();
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'FrmAdr.Nummer' and assigning its value to variable 'Kunde'.", repo.FrmAdr.NummerInfo, new RecordItemIndex(1));
            Kunde = repo.FrmAdr.Nummer.Element.GetAttributeValueText("Text");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Kunde) on item 'FrmAdr.Nummer'.", repo.FrmAdr.NummerInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.FrmAdr.NummerInfo, "Text", Kunde);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAdr.Kurzname' at Center.", repo.FrmAdr.KurznameInfo, new RecordItemIndex(3));
            repo.FrmAdr.Kurzname.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'TEST' with focus on 'FrmAdr.Kurzname'.", repo.FrmAdr.KurznameInfo, new RecordItemIndex(4));
            repo.FrmAdr.Kurzname.PressKeys("TEST");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAdr.Text' at Center.", repo.FrmAdr.TextInfo, new RecordItemIndex(5));
            repo.FrmAdr.Text.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'TEST' with focus on 'FrmAdr.Text'.", repo.FrmAdr.TextInfo, new RecordItemIndex(6));
            repo.FrmAdr.Text.PressKeys("TEST");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAdr.Text1' at Center.", repo.FrmAdr.Text1Info, new RecordItemIndex(7));
            repo.FrmAdr.Text1.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '5020{Tab}' with focus on 'FrmAdr.Text1'.", repo.FrmAdr.Text1Info, new RecordItemIndex(8));
            repo.FrmAdr.Text1.PressKeys("5020{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Salzburg') on item 'FrmAdr.Text2'.", repo.FrmAdr.Text2Info, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.FrmAdr.Text2Info, "Text", "Salzburg");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAdr.PbSpeichern' at Center.", repo.FrmAdr.PbSpeichernInfo, new RecordItemIndex(10));
            repo.FrmAdr.PbSpeichern.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAdr.Nummer' at Center.", repo.FrmAdr.NummerInfo, new RecordItemIndex(11));
            repo.FrmAdr.Nummer.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Kunde' with focus on 'FrmAdr.Nummer'.", repo.FrmAdr.NummerInfo, new RecordItemIndex(12));
            repo.FrmAdr.Nummer.PressKeys(Kunde);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(13));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Kunde) on item 'FrmAdr.Nummer'.", repo.FrmAdr.NummerInfo, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.FrmAdr.NummerInfo, "Text", Kunde);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='TEST') on item 'FrmAdr.Kurzname'.", repo.FrmAdr.KurznameInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.FrmAdr.KurznameInfo, "Text", "TEST");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
