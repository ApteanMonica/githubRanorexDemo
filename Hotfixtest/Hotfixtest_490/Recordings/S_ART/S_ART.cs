///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Hotfixtest_490.Recordings.S_ART
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The S_ART recording.
    /// </summary>
    [TestModule("e1275d39-f7a6-4342-878a-e9a7bd8f8f59", ModuleType.Recording, 1)]
    public partial class S_ART : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Hotfixtest_490.Hotfixtest_490Repository repository.
        /// </summary>
        public static global::Hotfixtest_490.Hotfixtest_490Repository repo = global::Hotfixtest_490.Hotfixtest_490Repository.Instance;

        static S_ART instance = new S_ART();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public S_ART()
        {
            Artikel = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static S_ART Instance
        {
            get { return instance; }
        }

#region Variables

        string _Artikel;

        /// <summary>
        /// Gets or sets the value of variable Artikel.
        /// </summary>
        [TestVariable("1193f1d7-ea9b-4deb-8484-fe52203f5e54")]
        public string Artikel
        {
            get { return _Artikel; }
            set { _Artikel = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'S_ART.DfArtNr' at Center.", repo.S_ART.DfArtNrInfo, new RecordItemIndex(0));
            repo.S_ART.DfArtNr.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Artikel' with focus on 'S_ART.DfArtNr'.", repo.S_ART.DfArtNrInfo, new RecordItemIndex(1));
            repo.S_ART.DfArtNr.PressKeys(Artikel);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'S_ART.Bezeichnung1' at Center.", repo.S_ART.Bezeichnung1Info, new RecordItemIndex(2));
            repo.S_ART.Bezeichnung1.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'TEST' with focus on 'S_ART.Bezeichnung1'.", repo.S_ART.Bezeichnung1Info, new RecordItemIndex(3));
            repo.S_ART.Bezeichnung1.PressKeys("TEST");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'S_ART.Kurzbez' at Center.", repo.S_ART.KurzbezInfo, new RecordItemIndex(4));
            repo.S_ART.Kurzbez.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'TEST' with focus on 'S_ART.Kurzbez'.", repo.S_ART.KurzbezInfo, new RecordItemIndex(5));
            repo.S_ART.Kurzbez.PressKeys("TEST");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'S_ART.PbSpeichern' at Center.", repo.S_ART.PbSpeichernInfo, new RecordItemIndex(6));
            repo.S_ART.PbSpeichern.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'S_ART.DfArtNr' at Center.", repo.S_ART.DfArtNrInfo, new RecordItemIndex(7));
            repo.S_ART.DfArtNr.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Artikel' with focus on 'S_ART.DfArtNr'.", repo.S_ART.DfArtNrInfo, new RecordItemIndex(8));
            repo.S_ART.DfArtNr.PressKeys(Artikel);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press with focus on 'S_ART.DfArtNr'.", repo.S_ART.DfArtNrInfo, new RecordItemIndex(9));
            Keyboard.PrepareFocus(repo.S_ART.DfArtNr);
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Artikel) on item 'S_ART.DfArtNr'.", repo.S_ART.DfArtNrInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.S_ART.DfArtNrInfo, "Text", Artikel);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
