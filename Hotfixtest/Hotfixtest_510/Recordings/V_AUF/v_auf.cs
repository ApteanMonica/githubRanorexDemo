///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Hotfixtest_510.Recordings.V_AUF
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The V_AUF recording.
    /// </summary>
    [TestModule("10d5f5e7-d832-47c1-81a0-846052b438e5", ModuleType.Recording, 1)]
    public partial class V_AUF : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Hotfixtest_510.Hotfixtest_510Repository repository.
        /// </summary>
        public static global::Hotfixtest_510.Hotfixtest_510Repository repo = global::Hotfixtest_510.Hotfixtest_510Repository.Instance;

        static V_AUF instance = new V_AUF();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public V_AUF()
        {
            Auftrag = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static V_AUF Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable Auftrag.
        /// </summary>
        [TestVariable("8e6a256a-2301-4d05-a213-f251106c362c")]
        public string Auftrag
        {
            get { return repo.Auftrag; }
            set { repo.Auftrag = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'V_AUF.PbNew' at Center.", repo.V_AUF.PbNewInfo, new RecordItemIndex(0));
            repo.V_AUF.PbNew.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'V_AUF.TpKopf.Kunde' at Center.", repo.V_AUF.TpKopf.KundeInfo, new RecordItemIndex(1));
            repo.V_AUF.TpKopf.Kunde.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '200002{Tab}' with focus on 'V_AUF.TpKopf.Kunde'.", repo.V_AUF.TpKopf.KundeInfo, new RecordItemIndex(2));
            repo.V_AUF.TpKopf.Kunde.PressKeys("200002{Tab}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'V_AUF.TpKopf.Lieferbed' at Center.", repo.V_AUF.TpKopf.LieferbedInfo, new RecordItemIndex(3));
            repo.V_AUF.TpKopf.Lieferbed.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'CFR' with focus on 'V_AUF.TpKopf.Lieferbed'.", repo.V_AUF.TpKopf.LieferbedInfo, new RecordItemIndex(4));
            repo.V_AUF.TpKopf.Lieferbed.PressKeys("CFR");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'V_AUF.TpKopf.Versandart' at Center.", repo.V_AUF.TpKopf.VersandartInfo, new RecordItemIndex(5));
            repo.V_AUF.TpKopf.Versandart.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'ABH{Tab}' with focus on 'V_AUF.TpKopf.Versandart'.", repo.V_AUF.TpKopf.VersandartInfo, new RecordItemIndex(6));
            repo.V_AUF.TpKopf.Versandart.PressKeys("ABH{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'') on item 'V_AUF.TpKopf.Aufk_nr'.", repo.V_AUF.TpKopf.Aufk_nrInfo, new RecordItemIndex(7));
            Validate.AttributeContains(repo.V_AUF.TpKopf.Aufk_nrInfo, "Text", "");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'V_AUF.TabPagePositionen' at Center.", repo.V_AUF.TabPagePositionenInfo, new RecordItemIndex(8));
            repo.V_AUF.TabPagePositionen.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'V_AUF.Kopf' at Center.", repo.V_AUF.KopfInfo, new RecordItemIndex(9));
            repo.V_AUF.Kopf.Click();
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'V_AUF.TpKopf.Aufk_nr' and assigning its value to variable 'Auftrag'.", repo.V_AUF.TpKopf.Aufk_nrInfo, new RecordItemIndex(10));
            Auftrag = repo.V_AUF.TpKopf.Aufk_nr.Element.GetAttributeValueText("Text");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'V_AUF.PbNavigationBack' at Center.", repo.V_AUF.PbNavigationBackInfo, new RecordItemIndex(11));
            repo.V_AUF.PbNavigationBack.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'V_AUF.Text' at Center.", repo.V_AUF.TextInfo, new RecordItemIndex(12));
            repo.V_AUF.Text.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Auftrag' with focus on 'V_AUF.Text'.", repo.V_AUF.TextInfo, new RecordItemIndex(13));
            repo.V_AUF.Text.PressKeys(Auftrag);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$Auftrag) on item 'V_AUF.CellTmpColS1Row1'.", repo.V_AUF.CellTmpColS1Row1Info, new RecordItemIndex(14));
            Validate.AttributeContains(repo.V_AUF.CellTmpColS1Row1Info, "Text", Auftrag);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
