///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace N_ANLA_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Anlage_zusammenfuehren_Teil_3 recording.
    /// </summary>
    [TestModule("2a971e46-78e5-4ebc-b7a5-a703b65bdca4", ModuleType.Recording, 1)]
    public partial class Anlage_zusammenfuehren_Teil_3 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::N_ANLA_001.N_ANLA_001Repository repository.
        /// </summary>
        public static global::N_ANLA_001.N_ANLA_001Repository repo = global::N_ANLA_001.N_ANLA_001Repository.Instance;

        static Anlage_zusammenfuehren_Teil_3 instance = new Anlage_zusammenfuehren_Teil_3();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Anlage_zusammenfuehren_Teil_3()
        {
            Anlage_A = "N_ANLA_001_01";
            Anlage_B = "N_ANLA_001_02";
            Anlage_C = "N_ANLA_001_03";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Anlage_zusammenfuehren_Teil_3 Instance
        {
            get { return instance; }
        }

#region Variables

        string _Anlage_A;

        /// <summary>
        /// Gets or sets the value of variable Anlage_A.
        /// </summary>
        [TestVariable("2c9b5269-a97d-41f5-a9e3-7164b0cb1351")]
        public string Anlage_A
        {
            get { return _Anlage_A; }
            set { _Anlage_A = value; }
        }

        string _Anlage_C;

        /// <summary>
        /// Gets or sets the value of variable Anlage_C.
        /// </summary>
        [TestVariable("a5fa3b35-506b-4b65-9c08-0c79a7a267ad")]
        public string Anlage_C
        {
            get { return _Anlage_C; }
            set { _Anlage_C = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Anlage_B.
        /// </summary>
        [TestVariable("086cb525-af3e-4c79-960d-61f1c6083004")]
        public string Anlage_B
        {
            get { return repo.Anlage_B; }
            set { repo.Anlage_B = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+Shift+Z' Press.", new RecordItemIndex(0));
            Keyboard.Press(System.Windows.Forms.Keys.Z | System.Windows.Forms.Keys.Shift | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='2022') on item 'FrmZuauf.DfGjhrBez'.", repo.FrmZuauf.DfGjhrBezInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.FrmZuauf.DfGjhrBezInfo, "Text", "2022");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '31.12.2022{Tab}' with focus on 'FrmZuauf.DfAnbuDtbuchung'.", repo.FrmZuauf.DfAnbuDtbuchungInfo, new RecordItemIndex(2));
            repo.FrmZuauf.DfAnbuDtbuchung.PressKeys("31.12.2022{Tab}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Anlage_A' with focus on 'FrmZuauf.ColAnlaNrRow1'.", repo.FrmZuauf.ColAnlaNrRow1Info, new RecordItemIndex(3));
            repo.FrmZuauf.ColAnlaNrRow1.PressKeys(Anlage_A);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(4));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='1.500,00') on item 'FrmZuauf.ColAnweAhkbetragRow1'.", repo.FrmZuauf.ColAnweAhkbetragRow1Info, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.FrmZuauf.ColAnweAhkbetragRow1Info, "Text", "1.500,00");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Insert' Press with focus on 'TabPageTp1'.", repo.TabPageTp1Info, new RecordItemIndex(6));
            Keyboard.PrepareFocus(repo.TabPageTp1);
            Keyboard.Press(System.Windows.Forms.Keys.Insert, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Right Click item 'TabPageTp1' at Center.", repo.TabPageTp1Info, new RecordItemIndex(7));
            repo.TabPageTp1.Click(System.Windows.Forms.MouseButtons.Right);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Down' Press.", new RecordItemIndex(8));
            Keyboard.Press(System.Windows.Forms.Keys.Down, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(9));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Anlage_B' with focus on 'FrmZuauf.ColAnlaNrRow2'.", repo.FrmZuauf.ColAnlaNrRow2Info, new RecordItemIndex(10));
            repo.FrmZuauf.ColAnlaNrRow2.PressKeys(Anlage_B);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(11));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'DlgMessageBox.AVZAnlagen'", repo.DlgMessageBox.AVZAnlagenInfo, new ActionTimeout(120000), new RecordItemIndex(12));
            repo.DlgMessageBox.AVZAnlagenInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Anlage N_ANLA_001_02 0 hat in Variante 1 nicht die gleiche Nutzungsdauer (ND Aktuell oder ND Rest) wie Originalanlage .\r\n\r\nFortfahren?') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Anlage N_ANLA_001_02 0 hat in Variante 1 nicht die gleiche Nutzungsdauer (ND Aktuell oder ND Rest) wie Originalanlage .\r\n\r\nFortfahren?");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(14));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Insert' Press with focus on 'TabPageTp1'.", repo.TabPageTp1Info, new RecordItemIndex(15));
            Keyboard.PrepareFocus(repo.TabPageTp1);
            Keyboard.Press(System.Windows.Forms.Keys.Insert, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Right Click item 'TabPageTp1' at Center.", repo.TabPageTp1Info, new RecordItemIndex(16));
            repo.TabPageTp1.Click(System.Windows.Forms.MouseButtons.Right);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Down' Press.", new RecordItemIndex(17));
            Keyboard.Press(System.Windows.Forms.Keys.Down, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(18));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Anlage_C' with focus on 'FrmZuauf.ColAnlaNrRow3'.", repo.FrmZuauf.ColAnlaNrRow3Info, new RecordItemIndex(19));
            repo.FrmZuauf.ColAnlaNrRow3.PressKeys(Anlage_C);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(20));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
