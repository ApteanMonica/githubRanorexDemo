///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace V_AUF_002.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Auftrag_kopieren recording.
    /// </summary>
    [TestModule("500d8c4c-9fdb-4442-ace2-4406f8879508", ModuleType.Recording, 1)]
    public partial class Auftrag_kopieren : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::V_AUF_002.V_AUF_002Repository repository.
        /// </summary>
        public static global::V_AUF_002.V_AUF_002Repository repo = global::V_AUF_002.V_AUF_002Repository.Instance;

        static Auftrag_kopieren instance = new Auftrag_kopieren();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Auftrag_kopieren()
        {
            Auftragsart = "N";
            Nettowert = "224,00";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Auftrag_kopieren Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable Auftragsart.
        /// </summary>
        [TestVariable("88aea6b6-f042-431e-951a-02f3b091dcc6")]
        public string Auftragsart
        {
            get { return repo.Auftragsart; }
            set { repo.Auftragsart = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Nettowert.
        /// </summary>
        [TestVariable("2407b6b7-1fc3-45cd-9210-e3b50672974b")]
        public string Nettowert
        {
            get { return repo.Nettowert; }
            set { repo.Nettowert = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.Kopf' at Center.", repo.FrmAufk.KopfInfo, new RecordItemIndex(0));
            repo.FrmAufk.Kopf.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.PbCommon2Kopieren' at Center.", repo.FrmAufk.PbCommon2KopierenInfo, new RecordItemIndex(1));
            repo.FrmAufk.PbCommon2Kopieren.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmAufk.Auftragsart' at Center.", repo.FrmAufk.AuftragsartInfo, new RecordItemIndex(2));
            repo.FrmAufk.Auftragsart.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'N' with focus on 'FrmAufk.Auftragsart'.", repo.FrmAufk.AuftragsartInfo, new RecordItemIndex(3));
            repo.FrmAufk.Auftragsart.EnsureVisible();
            Keyboard.Press("N");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmAufk.Auftragsart'.", repo.FrmAufk.AuftragsartInfo, new RecordItemIndex(4));
            repo.FrmAufk.Auftragsart.PressKeys("{Tab}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.LabelMeldungstext' at Center.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(5));
            repo.DlgMessageBox.LabelMeldungstext.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Auftrag kopieren:') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(6));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Auftrag kopieren:");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(7));
            repo.DlgMessageBox.Button0.Click();
            
            // Ticket VC503, wenn ERL wieder aktivieren
            //Report.Log(ReportLevel.Info, "Mouse", "Ticket VC503, wenn ERL wieder aktivieren\r\nMouse Left Click item 'DlgMessageBox.LabelMeldungstext' at Center.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(8));
            //repo.DlgMessageBox.LabelMeldungstext.Click();
            
            //Report.Log(ReportLevel.Info, "Wait", "Waiting 1m to exist. Associated repository item: 'DlgMessageBox.LabelMeldungstext'", repo.DlgMessageBox.LabelMeldungstextInfo, new ActionTimeout(60000), new RecordItemIndex(9));
            //repo.DlgMessageBox.LabelMeldungstextInfo.WaitForExists(60000);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Buchungskennzeichen für die Bereichskontierung') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(10));
            //Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Buchungskennzeichen für die Bereichskontierung");
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(11));
            //repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.TabPagePositionen' at Center.", repo.FrmAufk.TabPagePositionenInfo, new RecordItemIndex(12));
            repo.FrmAufk.TabPagePositionen.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.LabelMeldungstext' at Center.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(13));
            repo.DlgMessageBox.LabelMeldungstext.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Status 'Angebot angenommen'') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(14));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Status 'Angebot angenommen'");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(15));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgAufpCopy.TitleBar100AuftragKopieren' at Center.", repo.DlgAufpCopy.TitleBar100AuftragKopierenInfo, new RecordItemIndex(16));
            repo.DlgAufpCopy.TitleBar100AuftragKopieren.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeRegex (Text~'Auftrag kopieren') on item 'DlgAufpCopy.TitleBar100AuftragKopieren'.", repo.DlgAufpCopy.TitleBar100AuftragKopierenInfo, new RecordItemIndex(17));
            Validate.AttributeRegex(repo.DlgAufpCopy.TitleBar100AuftragKopierenInfo, "Text", new Regex("Auftrag kopieren"));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgAufpCopy.PbOk' at Center.", repo.DlgAufpCopy.PbOkInfo, new RecordItemIndex(18));
            repo.DlgAufpCopy.PbOk.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Keine weiteren Positionen zum Kopieren') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(19));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Keine weiteren Positionen zum Kopieren");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(20));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.Kopf' at Center.", repo.FrmAufk.KopfInfo, new RecordItemIndex(21));
            repo.FrmAufk.Kopf.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Nettowert) on item 'FrmAufk.Nettowert'.", repo.FrmAufk.NettowertInfo, new RecordItemIndex(22));
            Validate.AttributeEqual(repo.FrmAufk.NettowertInfo, "Text", Nettowert);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
