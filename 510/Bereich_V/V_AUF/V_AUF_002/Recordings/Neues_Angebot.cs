///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace V_AUF_002.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Neues_Angebot recording.
    /// </summary>
    [TestModule("ff38d093-bc67-4b1e-bb50-adf188fe8d58", ModuleType.Recording, 1)]
    public partial class Neues_Angebot : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::V_AUF_002.V_AUF_002Repository repository.
        /// </summary>
        public static global::V_AUF_002.V_AUF_002Repository repo = global::V_AUF_002.V_AUF_002Repository.Instance;

        static Neues_Angebot instance = new Neues_Angebot();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Neues_Angebot()
        {
            Kunde = "200002";
            Preisliste = "STD";
            Rechnungsart = "E";
            Zahlungsbedingung = "001";
            Zahlungsart = "S";
            Lager = "100";
            Auftragnr = "";
            Auftragsart = "A";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Neues_Angebot Instance
        {
            get { return instance; }
        }

#region Variables

        string _Kunde;

        /// <summary>
        /// Gets or sets the value of variable Kunde.
        /// </summary>
        [TestVariable("56f25ae4-05a3-4a2e-8012-a4f2574c83ff")]
        public string Kunde
        {
            get { return _Kunde; }
            set { _Kunde = value; }
        }

        string _Preisliste;

        /// <summary>
        /// Gets or sets the value of variable Preisliste.
        /// </summary>
        [TestVariable("066a72f6-557c-4190-b1dd-45df2aca2d72")]
        public string Preisliste
        {
            get { return _Preisliste; }
            set { _Preisliste = value; }
        }

        string _Rechnungsart;

        /// <summary>
        /// Gets or sets the value of variable Rechnungsart.
        /// </summary>
        [TestVariable("cc4c1bf9-e67f-420d-bd96-b4e0bc0c911a")]
        public string Rechnungsart
        {
            get { return _Rechnungsart; }
            set { _Rechnungsart = value; }
        }

        string _Zahlungsbedingung;

        /// <summary>
        /// Gets or sets the value of variable Zahlungsbedingung.
        /// </summary>
        [TestVariable("1265d24a-ba7f-4619-8af4-6d2c94995158")]
        public string Zahlungsbedingung
        {
            get { return _Zahlungsbedingung; }
            set { _Zahlungsbedingung = value; }
        }

        string _Zahlungsart;

        /// <summary>
        /// Gets or sets the value of variable Zahlungsart.
        /// </summary>
        [TestVariable("503414ee-b03a-4446-80f1-aced77e56e08")]
        public string Zahlungsart
        {
            get { return _Zahlungsart; }
            set { _Zahlungsart = value; }
        }

        string _Lager;

        /// <summary>
        /// Gets or sets the value of variable Lager.
        /// </summary>
        [TestVariable("635af988-ad6a-4a06-b634-9d90f4c64ef4")]
        public string Lager
        {
            get { return _Lager; }
            set { _Lager = value; }
        }

        string _Auftragnr;

        /// <summary>
        /// Gets or sets the value of variable Auftragnr.
        /// </summary>
        [TestVariable("4564e1fc-4448-40ee-badd-70b6209fe891")]
        public string Auftragnr
        {
            get { return _Auftragnr; }
            set { _Auftragnr = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Auftragsart.
        /// </summary>
        [TestVariable("a994d232-675f-4cdc-b231-3114be4a6a6b")]
        public string Auftragsart
        {
            get { return repo.Auftragsart; }
            set { repo.Auftragsart = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.PbNew' at Center.", repo.FrmAufk.PbNewInfo, new RecordItemIndex(0));
            repo.FrmAufk.PbNew.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmAufk.Auftragsart' at Center.", repo.FrmAufk.AuftragsartInfo, new RecordItemIndex(1));
            repo.FrmAufk.Auftragsart.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'A' with focus on 'FrmAufk.Auftragsart'.", repo.FrmAufk.AuftragsartInfo, new RecordItemIndex(2));
            repo.FrmAufk.Auftragsart.PressKeys("A");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmAufk.Auftragsart'.", repo.FrmAufk.AuftragsartInfo, new RecordItemIndex(3));
            repo.FrmAufk.Auftragsart.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Kunde' with focus on 'FrmAufk.Kunde'.", repo.FrmAufk.KundeInfo, new RecordItemIndex(4));
            repo.FrmAufk.Kunde.PressKeys(Kunde);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmAufk.Kunde'.", repo.FrmAufk.KundeInfo, new RecordItemIndex(5));
            repo.FrmAufk.Kunde.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Kunde) on item 'FrmAufk.Kunde'.", repo.FrmAufk.KundeInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.FrmAufk.KundeInfo, "Text", Kunde);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Preisliste) on item 'FrmAufk.Preisliste'.", repo.FrmAufk.PreislisteInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.FrmAufk.PreislisteInfo, "Text", Preisliste);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Rechnungsart) on item 'FrmAufk.Rechart'.", repo.FrmAufk.RechartInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.FrmAufk.RechartInfo, "Text", Rechnungsart);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Zahlungsbedingung) on item 'FrmAufk.Zahlungsbed'.", repo.FrmAufk.ZahlungsbedInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.FrmAufk.ZahlungsbedInfo, "Text", Zahlungsbedingung);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Zahlungsart) on item 'FrmAufk.Zahlungsart'.", repo.FrmAufk.ZahlungsartInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.FrmAufk.ZahlungsartInfo, "Text", Zahlungsart);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Lager) on item 'FrmAufk.LagerNr'.", repo.FrmAufk.LagerNrInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.FrmAufk.LagerNrInfo, "Text", Lager);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.TabPagePositionen' at Center.", repo.FrmAufk.TabPagePositionenInfo, new RecordItemIndex(12));
            repo.FrmAufk.TabPagePositionen.Click();
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'FrmAufk.DfAufkNr' and assigning its value to variable 'Auftragnr'.", repo.FrmAufk.DfAufkNrInfo, new RecordItemIndex(13));
            Auftragnr = repo.FrmAufk.DfAufkNr.Element.GetAttributeValueText("Text");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
