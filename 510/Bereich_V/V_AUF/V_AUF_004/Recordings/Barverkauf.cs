///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace V_AUF_004.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Barverkauf recording.
    /// </summary>
    [TestModule("3e7816ce-ce5c-4a2d-8522-13ebc482c0a7", ModuleType.Recording, 1)]
    public partial class Barverkauf : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::V_AUF_004.V_AUF_004Repository repository.
        /// </summary>
        public static global::V_AUF_004.V_AUF_004Repository repo = global::V_AUF_004.V_AUF_004Repository.Instance;

        static Barverkauf instance = new Barverkauf();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Barverkauf()
        {
            Kunde_Rahmenauftrag = "200002";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Barverkauf Instance
        {
            get { return instance; }
        }

#region Variables

        string _Kunde_Rahmenauftrag;

        /// <summary>
        /// Gets or sets the value of variable Kunde_Rahmenauftrag.
        /// </summary>
        [TestVariable("e73c96e0-683d-409e-be76-344579296b5d")]
        public string Kunde_Rahmenauftrag
        {
            get { return _Kunde_Rahmenauftrag; }
            set { _Kunde_Rahmenauftrag = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Keyboard", "Key 'F11' Press with focus on 'FrmAufk.TpKopf.Auftragsart'.", repo.FrmAufk.TpKopf.AuftragsartInfo, new RecordItemIndex(0));
            Keyboard.PrepareFocus(repo.FrmAufk.TpKopf.Auftragsart);
            Keyboard.Press(System.Windows.Forms.Keys.F11, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.PbNew' at Center.", repo.FrmAufk.PbNewInfo, new RecordItemIndex(1));
            //repo.FrmAufk.PbNew.Click();
            
            //Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'FrmAufk.TpKopf.Auftragsart'", repo.FrmAufk.TpKopf.AuftragsartInfo, new ActionTimeout(30000), new RecordItemIndex(2));
            //repo.FrmAufk.TpKopf.AuftragsartInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmAufk.TpKopf.Auftragsart' at Center.", repo.FrmAufk.TpKopf.AuftragsartInfo, new RecordItemIndex(3));
            repo.FrmAufk.TpKopf.Auftragsart.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'FrmAufk.TpKopf.Auftragsart'.", repo.FrmAufk.TpKopf.AuftragsartInfo, new RecordItemIndex(4));
            Keyboard.PrepareFocus(repo.FrmAufk.TpKopf.Auftragsart);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'BV' with focus on 'FrmAufk.TpKopf.Auftragsart'.", repo.FrmAufk.TpKopf.AuftragsartInfo, new RecordItemIndex(5));
            repo.FrmAufk.TpKopf.Auftragsart.PressKeys("BV");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.TpKopf.Auftragsart' at Center.", repo.FrmAufk.TpKopf.AuftragsartInfo, new RecordItemIndex(6));
            repo.FrmAufk.TpKopf.Auftragsart.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='BV') on item 'FrmAufk.TpKopf.Auftragsart'.", repo.FrmAufk.TpKopf.AuftragsartInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.FrmAufk.TpKopf.AuftragsartInfo, "Text", "BV");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Kunde_Rahmenauftrag' with focus on 'FrmAufk.TpKopf.Kunde'.", repo.FrmAufk.TpKopf.KundeInfo, new RecordItemIndex(8));
            repo.FrmAufk.TpKopf.Kunde.PressKeys(Kunde_Rahmenauftrag);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Kunde_Rahmenauftrag) on item 'FrmAufk.TpKopf.Kunde'.", repo.FrmAufk.TpKopf.KundeInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.FrmAufk.TpKopf.KundeInfo, "Text", Kunde_Rahmenauftrag);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100Auftragserfassung.Gesperrt_fuer' at Center.", repo.Form100Auftragserfassung.Gesperrt_fuerInfo, new RecordItemIndex(10));
            repo.Form100Auftragserfassung.Gesperrt_fuer.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad9 down}' with focus on 'Form100Auftragserfassung.Gesperrt_fuer'.", repo.Form100Auftragserfassung.Gesperrt_fuerInfo, new RecordItemIndex(11));
            repo.Form100Auftragserfassung.Gesperrt_fuer.EnsureVisible();
            Keyboard.Press("{NumPad9 down}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'Form100Auftragserfassung.Gesperrt_fuer'.", repo.Form100Auftragserfassung.Gesperrt_fuerInfo, new RecordItemIndex(12));
            repo.Form100Auftragserfassung.Gesperrt_fuer.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='9') on item 'Form100Auftragserfassung.Gesperrt_fuer'.", repo.Form100Auftragserfassung.Gesperrt_fuerInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.Form100Auftragserfassung.Gesperrt_fuerInfo, "Text", "9");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.TpKopf.Zahlungsbed' at Center.", repo.FrmAufk.TpKopf.ZahlungsbedInfo, new RecordItemIndex(14));
            repo.FrmAufk.TpKopf.Zahlungsbed.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'FrmAufk.TpKopf.Zahlungsbed'.", repo.FrmAufk.TpKopf.ZahlungsbedInfo, new RecordItemIndex(15));
            Keyboard.PrepareFocus(repo.FrmAufk.TpKopf.Zahlungsbed);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Delete}' with focus on 'FrmAufk.TpKopf.Zahlungsbed'.", repo.FrmAufk.TpKopf.ZahlungsbedInfo, new RecordItemIndex(16));
            repo.FrmAufk.TpKopf.Zahlungsbed.PressKeys("{Delete}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '030' with focus on 'FrmAufk.TpKopf.Zahlungsbed'.", repo.FrmAufk.TpKopf.ZahlungsbedInfo, new RecordItemIndex(17));
            repo.FrmAufk.TpKopf.Zahlungsbed.PressKeys("030");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='030') on item 'FrmAufk.TpKopf.Zahlungsbed'.", repo.FrmAufk.TpKopf.ZahlungsbedInfo, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.FrmAufk.TpKopf.ZahlungsbedInfo, "Text", "030");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.TpKopf.Lieferbed' at Center.", repo.FrmAufk.TpKopf.LieferbedInfo, new RecordItemIndex(19));
            repo.FrmAufk.TpKopf.Lieferbed.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'FrmAufk.TpKopf.Lieferbed'.", repo.FrmAufk.TpKopf.LieferbedInfo, new RecordItemIndex(20));
            Keyboard.PrepareFocus(repo.FrmAufk.TpKopf.Lieferbed);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, 30, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Delete}' with focus on 'FrmAufk.TpKopf.Lieferbed'.", repo.FrmAufk.TpKopf.LieferbedInfo, new RecordItemIndex(21));
            repo.FrmAufk.TpKopf.Lieferbed.PressKeys("{Delete}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'FOB' with focus on 'FrmAufk.TpKopf.Lieferbed'.", repo.FrmAufk.TpKopf.LieferbedInfo, new RecordItemIndex(22));
            repo.FrmAufk.TpKopf.Lieferbed.PressKeys("FOB");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmAufk.TpKopf.Lieferbed'.", repo.FrmAufk.TpKopf.LieferbedInfo, new RecordItemIndex(23));
            repo.FrmAufk.TpKopf.Lieferbed.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Free On Board / Frei an Bord (Schiffahrt)') on item 'Form100Auftragserfassung.DfLfbdBez'.", repo.Form100Auftragserfassung.DfLfbdBezInfo, new RecordItemIndex(24));
            Validate.AttributeEqual(repo.Form100Auftragserfassung.DfLfbdBezInfo, "Text", "Free On Board / Frei an Bord (Schiffahrt)");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100Auftragserfassung.PbSpec1Notizen' at Center.", repo.Form100Auftragserfassung.PbSpec1NotizenInfo, new RecordItemIndex(25));
            repo.Form100Auftragserfassung.PbSpec1Notizen.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'VAUF' at UpperCenter.", repo.VAUF.SelfInfo, new RecordItemIndex(26));
            repo.VAUF.Self.Click(Location.UpperCenter);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100NotizAuftrag.Text' at Center.", repo.Form100NotizAuftrag.TextInfo, new RecordItemIndex(27));
            repo.Form100NotizAuftrag.Text.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'Stammkunde 10%Rabatt' with focus on 'Form100NotizAuftrag.Text'.", repo.Form100NotizAuftrag.TextInfo, new RecordItemIndex(28));
            repo.Form100NotizAuftrag.Text.PressKeys("Stammkunde 10%Rabatt");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Stammkunde 10%Rabatt') on item 'Form100NotizAuftrag.Text'.", repo.Form100NotizAuftrag.TextInfo, new RecordItemIndex(29));
            Validate.AttributeEqual(repo.Form100NotizAuftrag.TextInfo, "Text", "Stammkunde 10%Rabatt");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100NotizAuftrag.PbOk' at Center.", repo.Form100NotizAuftrag.PbOkInfo, new RecordItemIndex(30));
            repo.Form100NotizAuftrag.PbOk.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.PbCommonSave' at Center.", repo.FrmAufk.PbCommonSaveInfo, new RecordItemIndex(31));
            repo.FrmAufk.PbCommonSave.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100Auftragserfassung.PbCommmon1NewLoad' at Center.", repo.Form100Auftragserfassung.PbCommmon1NewLoadInfo, new RecordItemIndex(32));
            repo.Form100Auftragserfassung.PbCommmon1NewLoad.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Stammkunde 10%Rabatt') on item 'Form100NotizAuftrag.Text'.", repo.Form100NotizAuftrag.TextInfo, new RecordItemIndex(33));
            Validate.AttributeEqual(repo.Form100NotizAuftrag.TextInfo, "Text", "Stammkunde 10%Rabatt");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100NotizAuftrag.PbOk' at Center.", repo.Form100NotizAuftrag.PbOkInfo, new RecordItemIndex(34));
            repo.Form100NotizAuftrag.PbOk.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
