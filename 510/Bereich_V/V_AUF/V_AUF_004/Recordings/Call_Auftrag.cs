///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace V_AUF_004.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Call_Auftrag recording.
    /// </summary>
    [TestModule("4fb385b0-6ab1-44ef-9c71-a24553682388", ModuleType.Recording, 1)]
    public partial class Call_Auftrag : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::V_AUF_004.V_AUF_004Repository repository.
        /// </summary>
        public static global::V_AUF_004.V_AUF_004Repository repo = global::V_AUF_004.V_AUF_004Repository.Instance;

        static Call_Auftrag instance = new Call_Auftrag();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Call_Auftrag()
        {
            Kunde_Rahmenauftrag = "200002";
            Art_Nr_RA_Diverser_Artikel = "100002";
            Besteller = "Musterfrau";
            BestellerMail = "support@rs-soft.com";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Call_Auftrag Instance
        {
            get { return instance; }
        }

#region Variables

        string _Kunde_Rahmenauftrag;

        /// <summary>
        /// Gets or sets the value of variable Kunde_Rahmenauftrag.
        /// </summary>
        [TestVariable("d4508555-90c3-4555-ad4a-fc2ba116f9ee")]
        public string Kunde_Rahmenauftrag
        {
            get { return _Kunde_Rahmenauftrag; }
            set { _Kunde_Rahmenauftrag = value; }
        }

        string _Art_Nr_RA_Diverser_Artikel;

        /// <summary>
        /// Gets or sets the value of variable Art_Nr_RA_Diverser_Artikel.
        /// </summary>
        [TestVariable("1554e9fb-877a-417d-aef6-cd959a1d91f4")]
        public string Art_Nr_RA_Diverser_Artikel
        {
            get { return _Art_Nr_RA_Diverser_Artikel; }
            set { _Art_Nr_RA_Diverser_Artikel = value; }
        }

        string _Besteller;

        /// <summary>
        /// Gets or sets the value of variable Besteller.
        /// </summary>
        [TestVariable("9e8b10e6-c9ad-433e-9f27-c506ab90e993")]
        public string Besteller
        {
            get { return _Besteller; }
            set { _Besteller = value; }
        }

        string _BestellerMail;

        /// <summary>
        /// Gets or sets the value of variable BestellerMail.
        /// </summary>
        [TestVariable("7fe83a27-5d62-4513-9d73-461f5cd5fc80")]
        public string BestellerMail
        {
            get { return _BestellerMail; }
            set { _BestellerMail = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.PbNew' at Center.", repo.FrmAufk.PbNewInfo, new RecordItemIndex(0));
            repo.FrmAufk.PbNew.Click();
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmAufk.TpKopf.Auftragsart' at Center.", repo.FrmAufk.TpKopf.AuftragsartInfo, new RecordItemIndex(1));
            //repo.FrmAufk.TpKopf.Auftragsart.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'C{Tab}' with focus on 'FrmAufk.TpKopf.Auftragsart'.", repo.FrmAufk.TpKopf.AuftragsartInfo, new RecordItemIndex(2));
            repo.FrmAufk.TpKopf.Auftragsart.PressKeys("C{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='C') on item 'FrmAufk.TpKopf.Auftragsart'.", repo.FrmAufk.TpKopf.AuftragsartInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.FrmAufk.TpKopf.AuftragsartInfo, "Text", "C");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.TpKopf.Kunde' at Center.", repo.FrmAufk.TpKopf.KundeInfo, new RecordItemIndex(4));
            repo.FrmAufk.TpKopf.Kunde.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Kunde_Rahmenauftrag' with focus on 'FrmAufk.TpKopf.Kunde'.", repo.FrmAufk.TpKopf.KundeInfo, new RecordItemIndex(5));
            repo.FrmAufk.TpKopf.Kunde.PressKeys(Kunde_Rahmenauftrag);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Kunde_Rahmenauftrag) on item 'FrmAufk.TpKopf.Kunde'.", repo.FrmAufk.TpKopf.KundeInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.FrmAufk.TpKopf.KundeInfo, "Text", Kunde_Rahmenauftrag);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100Auftragserfassung.TpAllgemein.DfAufkKdbesteller' at Center.", repo.Form100Auftragserfassung.TpAllgemein.DfAufkKdbestellerInfo, new RecordItemIndex(7));
            repo.Form100Auftragserfassung.TpAllgemein.DfAufkKdbesteller.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Besteller' with focus on 'Form100Auftragserfassung.TpAllgemein.DfAufkKdbesteller'.", repo.Form100Auftragserfassung.TpAllgemein.DfAufkKdbestellerInfo, new RecordItemIndex(8));
            repo.Form100Auftragserfassung.TpAllgemein.DfAufkKdbesteller.PressKeys(Besteller);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Besteller) on item 'Form100Auftragserfassung.TpAllgemein.DfAufkKdbesteller'.", repo.Form100Auftragserfassung.TpAllgemein.DfAufkKdbestellerInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.Form100Auftragserfassung.TpAllgemein.DfAufkKdbestellerInfo, "Text", Besteller);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100Auftragserfassung.TpAllgemein.DfAufkKdbestemail' at Center.", repo.Form100Auftragserfassung.TpAllgemein.DfAufkKdbestemailInfo, new RecordItemIndex(10));
            repo.Form100Auftragserfassung.TpAllgemein.DfAufkKdbestemail.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$BestellerMail' with focus on 'Form100Auftragserfassung.TpAllgemein.DfAufkKdbestemail'.", repo.Form100Auftragserfassung.TpAllgemein.DfAufkKdbestemailInfo, new RecordItemIndex(11));
            repo.Form100Auftragserfassung.TpAllgemein.DfAufkKdbestemail.PressKeys(BestellerMail);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$BestellerMail) on item 'Form100Auftragserfassung.TpAllgemein.DfAufkKdbestemail'.", repo.Form100Auftragserfassung.TpAllgemein.DfAufkKdbestemailInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.Form100Auftragserfassung.TpAllgemein.DfAufkKdbestemailInfo, "Text", BestellerMail);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.TabPagePositionen' at Center.", repo.FrmAufk.TabPagePositionenInfo, new RecordItemIndex(13));
            repo.FrmAufk.TabPagePositionen.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.TpPos.ArtNr' at Center.", repo.FrmAufk.TpPos.ArtNrInfo, new RecordItemIndex(14));
            repo.FrmAufk.TpPos.ArtNr.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Art_Nr_RA_Diverser_Artikel' with focus on 'FrmAufk.TpPos.ArtNr'.", repo.FrmAufk.TpPos.ArtNrInfo, new RecordItemIndex(15));
            repo.FrmAufk.TpPos.ArtNr.PressKeys(Art_Nr_RA_Diverser_Artikel);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmAufk.TpPos.ArtNr'.", repo.FrmAufk.TpPos.ArtNrInfo, new RecordItemIndex(16));
            repo.FrmAufk.TpPos.ArtNr.PressKeys("{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Art_Nr_RA_Diverser_Artikel) on item 'FrmAufk.TpPos.ArtNr'.", repo.FrmAufk.TpPos.ArtNrInfo, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.FrmAufk.TpPos.ArtNrInfo, "Text", Art_Nr_RA_Diverser_Artikel);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'Fahrtzeit' with focus on 'Form100Auftragserfassung.DfArtBez1'.", repo.Form100Auftragserfassung.DfArtBez1Info, new RecordItemIndex(18));
            repo.Form100Auftragserfassung.DfArtBez1.PressKeys("Fahrtzeit");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Fahrtzeit') on item 'Form100Auftragserfassung.DfArtBez1'.", repo.Form100Auftragserfassung.DfArtBez1Info, new RecordItemIndex(19));
            Validate.AttributeEqual(repo.Form100Auftragserfassung.DfArtBez1Info, "Text", "Fahrtzeit");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.TpPos.Menge' at Center.", repo.FrmAufk.TpPos.MengeInfo, new RecordItemIndex(20));
            repo.FrmAufk.TpPos.Menge.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '1{Tab}' with focus on 'FrmAufk.TpPos.Menge'.", repo.FrmAufk.TpPos.MengeInfo, new RecordItemIndex(21));
            repo.FrmAufk.TpPos.Menge.PressKeys("1{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='1,00') on item 'FrmAufk.TpPos.Menge'.", repo.FrmAufk.TpPos.MengeInfo, new RecordItemIndex(22));
            Validate.AttributeEqual(repo.FrmAufk.TpPos.MengeInfo, "Text", "1,00");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='12,000') on item 'FrmAufk.TpPos.Preis'.", repo.FrmAufk.TpPos.PreisInfo, new RecordItemIndex(23));
            Validate.AttributeEqual(repo.FrmAufk.TpPos.PreisInfo, "Text", "12,000");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'STD{Tab}' with focus on 'FrmAufk.TpPos.MEH'.", repo.FrmAufk.TpPos.MEHInfo, new RecordItemIndex(24));
            repo.FrmAufk.TpPos.MEH.EnsureVisible();
            Keyboard.Press("STD{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Für den Artikel 100002 konnte kein Umrechnungsfaktor von STD nach STK gefunden werden!') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(25));
            Validate.AttributeEqual(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Für den Artikel 100002 konnte kein Umrechnungsfaktor von STD nach STK gefunden werden!");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(26));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmAufk.TpPos.MEH' at Center.", repo.FrmAufk.TpPos.MEHInfo, new RecordItemIndex(27));
            repo.FrmAufk.TpPos.MEH.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'STK{Tab}' with focus on 'FrmAufk.TpPos.MEH'.", repo.FrmAufk.TpPos.MEHInfo, new RecordItemIndex(28));
            repo.FrmAufk.TpPos.MEH.EnsureVisible();
            Keyboard.Press("STK{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='STK') on item 'FrmAufk.TpPos.MEH'.", repo.FrmAufk.TpPos.MEHInfo, new RecordItemIndex(29));
            Validate.AttributeEqual(repo.FrmAufk.TpPos.MEHInfo, "Text", "STK");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
