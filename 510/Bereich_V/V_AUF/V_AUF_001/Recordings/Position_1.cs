///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace V_AUF_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Position_1 recording.
    /// </summary>
    [TestModule("d29b4e99-3d80-4b49-baae-ae2939d902ab", ModuleType.Recording, 1)]
    public partial class Position_1 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::V_AUF_001.V_AUF_001Repository repository.
        /// </summary>
        public static global::V_AUF_001.V_AUF_001Repository repo = global::V_AUF_001.V_AUF_001Repository.Instance;

        static Position_1 instance = new Position_1();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Position_1()
        {
            Preis1 = "11,000";
            Artikel1 = "";
            Menge1 = "";
            getMenge1 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Position_1 Instance
        {
            get { return instance; }
        }

#region Variables

        string _Preis1;

        /// <summary>
        /// Gets or sets the value of variable Preis1.
        /// </summary>
        [TestVariable("aa1ed34a-1e4a-4e53-9fe7-cfbe55b01100")]
        public string Preis1
        {
            get { return _Preis1; }
            set { _Preis1 = value; }
        }

        string _Artikel1;

        /// <summary>
        /// Gets or sets the value of variable Artikel1.
        /// </summary>
        [TestVariable("8328b435-028d-42ba-be5b-09652e1e69b5")]
        public string Artikel1
        {
            get { return _Artikel1; }
            set { _Artikel1 = value; }
        }

        string _Menge1;

        /// <summary>
        /// Gets or sets the value of variable Menge1.
        /// </summary>
        [TestVariable("5c0af7cb-b6d3-47bf-8c7f-89ca4c462e63")]
        public string Menge1
        {
            get { return _Menge1; }
            set { _Menge1 = value; }
        }

        string _getMenge1;

        /// <summary>
        /// Gets or sets the value of variable getMenge1.
        /// </summary>
        [TestVariable("77e0d3cc-6632-4feb-94b1-e27f0e7c219a")]
        public string getMenge1
        {
            get { return _getMenge1; }
            set { _getMenge1 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.TpPos.ArtNr' at Center.", repo.FrmAufk.TpPos.ArtNrInfo, new RecordItemIndex(0));
            repo.FrmAufk.TpPos.ArtNr.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Artikel1'.", new RecordItemIndex(1));
            Keyboard.Press(Artikel1);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(2));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Menge1' with focus on 'FrmAufk.TpPos.Men'.", repo.FrmAufk.TpPos.MenInfo, new RecordItemIndex(3));
            repo.FrmAufk.TpPos.Men.EnsureVisible();
            Keyboard.Press(Menge1);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(4));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Menge1) on item 'FrmAufk.TpPos.Men'.", repo.FrmAufk.TpPos.MenInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.FrmAufk.TpPos.MenInfo, "Text", Menge1);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Preis1) on item 'FrmAufk.TpPos.TextPr'.", repo.FrmAufk.TpPos.TextPrInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.FrmAufk.TpPos.TextPrInfo, "Text", Preis1);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.PbCommonSave' at Center.", repo.FrmAufk.PbCommonSaveInfo, new RecordItemIndex(7));
            repo.FrmAufk.PbCommonSave.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Artikel1) on item 'FrmAufk.TpPos.ColArtNrRow1'.", repo.FrmAufk.TpPos.ColArtNrRow1Info, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.FrmAufk.TpPos.ColArtNrRow1Info, "Text", Artikel1);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'FrmAufk.TpPos.ColAufpMengeRow1' and assigning its value to variable 'getMenge1'.", repo.FrmAufk.TpPos.ColAufpMengeRow1Info, new RecordItemIndex(9));
            getMenge1 = repo.FrmAufk.TpPos.ColAufpMengeRow1.Element.GetAttributeValueText("Text");
            
            Ranorex.AutomationHelpers.UserCodeCollections.Aptean.ValidateWithoutDecimals(Menge1, getMenge1);
            
            //Validate_ColAufpMengeRow1(repo.FrmAufk.TpPos.ColAufpMengeRow1Info);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Preis1) on item 'FrmAufk.TpPos.ColAufpPreisRow1'.", repo.FrmAufk.TpPos.ColAufpPreisRow1Info, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.FrmAufk.TpPos.ColAufpPreisRow1Info, "Text", Preis1);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
