///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace V_AUF_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Position_3 recording.
    /// </summary>
    [TestModule("dba25914-0355-4925-b0e8-6fdebd65425e", ModuleType.Recording, 1)]
    public partial class Position_3 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::V_AUF_001.V_AUF_001Repository repository.
        /// </summary>
        public static global::V_AUF_001.V_AUF_001Repository repo = global::V_AUF_001.V_AUF_001Repository.Instance;

        static Position_3 instance = new Position_3();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Position_3()
        {
            Artikel3 = "";
            Menge3 = "";
            Preis3 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Position_3 Instance
        {
            get { return instance; }
        }

#region Variables

        string _Artikel3;

        /// <summary>
        /// Gets or sets the value of variable Artikel3.
        /// </summary>
        [TestVariable("163a08fb-a855-4a5c-8bb9-aa414031bae6")]
        public string Artikel3
        {
            get { return _Artikel3; }
            set { _Artikel3 = value; }
        }

        string _Menge3;

        /// <summary>
        /// Gets or sets the value of variable Menge3.
        /// </summary>
        [TestVariable("44ab51ad-bb89-473b-81d9-78a2910b51fa")]
        public string Menge3
        {
            get { return _Menge3; }
            set { _Menge3 = value; }
        }

        string _Preis3;

        /// <summary>
        /// Gets or sets the value of variable Preis3.
        /// </summary>
        [TestVariable("14844191-6ba6-41db-99de-53291d9c856f")]
        public string Preis3
        {
            get { return _Preis3; }
            set { _Preis3 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAufk.TpPos.ArtNr' at Center.", repo.FrmAufk.TpPos.ArtNrInfo, new RecordItemIndex(0));
            repo.FrmAufk.TpPos.ArtNr.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Artikel3'.", new RecordItemIndex(1));
            Keyboard.Press(Artikel3);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(2));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Menge3' with focus on 'FrmAufk.TpPos.Men'.", repo.FrmAufk.TpPos.MenInfo, new RecordItemIndex(3));
            repo.FrmAufk.TpPos.Men.EnsureVisible();
            Keyboard.Press(Menge3);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(4));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Preis3) on item 'FrmAufk.TpPos.TextPr'.", repo.FrmAufk.TpPos.TextPrInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.FrmAufk.TpPos.TextPrInfo, "Text", Preis3);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Alt+S' Press.", new RecordItemIndex(6));
            Keyboard.Press(System.Windows.Forms.Keys.S | System.Windows.Forms.Keys.Alt, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Artikel3) on item 'FrmAufk.TpPos.ColArtNrRow3'.", repo.FrmAufk.TpPos.ColArtNrRow3Info, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.FrmAufk.TpPos.ColArtNrRow3Info, "Text", Artikel3);
            
            Validate_ColAufpMengeRow3(repo.FrmAufk.TpPos.ColAufpMengeRow3Info);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Preis3) on item 'FrmAufk.TpPos.ColAufpPreisRow3'.", repo.FrmAufk.TpPos.ColAufpPreisRow3Info, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.FrmAufk.TpPos.ColAufpPreisRow3Info, "Text", Preis3);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
