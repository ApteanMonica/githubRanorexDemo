///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_BUCH_003.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Eingabe_Vorauszahlung recording.
    /// </summary>
    [TestModule("e93c3b39-3ff4-43ee-b598-5944ecdf0e4d", ModuleType.Recording, 1)]
    public partial class Eingabe_Vorauszahlung : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_BUCH_003.B_BUCH_003Repository repository.
        /// </summary>
        public static global::B_BUCH_003.B_BUCH_003Repository repo = global::B_BUCH_003.B_BUCH_003Repository.Instance;

        static Eingabe_Vorauszahlung instance = new Eingabe_Vorauszahlung();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Eingabe_Vorauszahlung()
        {
            Beleg2 = "B_BUCH_003_2";
            Kunde = "200006";
            BelegVZ = "VZ_Test_1";
            Beleg1 = "B_BUCH_003_1";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Eingabe_Vorauszahlung Instance
        {
            get { return instance; }
        }

#region Variables

        string _Beleg2;

        /// <summary>
        /// Gets or sets the value of variable Beleg2.
        /// </summary>
        [TestVariable("db262b10-be53-4eb1-a3c1-ecfd3fd25f1d")]
        public string Beleg2
        {
            get { return _Beleg2; }
            set { _Beleg2 = value; }
        }

        string _Kunde;

        /// <summary>
        /// Gets or sets the value of variable Kunde.
        /// </summary>
        [TestVariable("773d0aa7-9df2-4c46-8452-2b73433f87a0")]
        public string Kunde
        {
            get { return _Kunde; }
            set { _Kunde = value; }
        }

        string _BelegVZ;

        /// <summary>
        /// Gets or sets the value of variable BelegVZ.
        /// </summary>
        [TestVariable("d4a7815b-2b16-497f-a93e-d58513881c77")]
        public string BelegVZ
        {
            get { return _BelegVZ; }
            set { _BelegVZ = value; }
        }

        string _Beleg1;

        /// <summary>
        /// Gets or sets the value of variable Beleg1.
        /// </summary>
        [TestVariable("1056a63d-0a56-4498-aaa7-6d13d7ae7c54")]
        public string Beleg1
        {
            get { return _Beleg1; }
            set { _Beleg1 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(0));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='2800') on item 'MdiBuch.FrmZ.DfZahlktoNr'.", repo.MdiBuch.FrmZ.DfZahlktoNrInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.MdiBuch.FrmZ.DfZahlktoNrInfo, "Text", "2800");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='0,00') on item 'MdiBuch.Toolbar_Kopfbereich.DfSoll'.", repo.MdiBuch.Toolbar_Kopfbereich.DfSollInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.MdiBuch.Toolbar_Kopfbereich.DfSollInfo, "Text", "0,00");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Beleg1) on item 'MdiBuch.FrmZ.DfBelegnr'.", repo.MdiBuch.FrmZ.DfBelegnrInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.MdiBuch.FrmZ.DfBelegnrInfo, "Text", Beleg1);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='K') on item 'MdiBuch.FrmZ.DfKLSH'.", repo.MdiBuch.FrmZ.DfKLSHInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.MdiBuch.FrmZ.DfKLSHInfo, "Text", "K");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '+' with focus on 'MdiBuch.FrmZ.DfBelegnr'.", repo.MdiBuch.FrmZ.DfBelegnrInfo, new RecordItemIndex(5));
            repo.MdiBuch.FrmZ.DfBelegnr.PressKeys("+");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(6));
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Beleg2) on item 'MdiBuch.FrmZ.DfBelegnr'.", repo.MdiBuch.FrmZ.DfBelegnrInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.MdiBuch.FrmZ.DfBelegnrInfo, "Text", Beleg2);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBuch.FrmZ.DfAdrNr' at Center.", repo.MdiBuch.FrmZ.DfAdrNrInfo, new RecordItemIndex(8));
            repo.MdiBuch.FrmZ.DfAdrNr.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{F5}' with focus on 'MdiBuch.FrmZ.DfAdrNr'.", repo.MdiBuch.FrmZ.DfAdrNrInfo, new RecordItemIndex(9));
            repo.MdiBuch.FrmZ.DfAdrNr.PressKeys("{F5}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(10));
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Kunde) on item 'MdiBuch.FrmZ.DfAdrNr'.", repo.MdiBuch.FrmZ.DfAdrNrInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.MdiBuch.FrmZ.DfAdrNrInfo, "Text", Kunde);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '500' with focus on 'MdiBuch.FrmZ.DfBetrag'.", repo.MdiBuch.FrmZ.DfBetragInfo, new RecordItemIndex(12));
            repo.MdiBuch.FrmZ.DfBetrag.PressKeys("500");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBuch.PbStandard2' at Center.", repo.MdiBuch.PbStandard2Info, new RecordItemIndex(13));
            repo.MdiBuch.PbStandard2.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m to exist. Associated repository item: 'MdiBuch.FrmZP.DfBelegnr_frmZP'", repo.MdiBuch.FrmZP.DfBelegnr_frmZPInfo, new ActionTimeout(60000), new RecordItemIndex(14));
            repo.MdiBuch.FrmZP.DfBelegnr_frmZPInfo.WaitForExists(60000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$BelegVZ' with focus on 'MdiBuch.FrmZP.DfBelegnr_frmZP'.", repo.MdiBuch.FrmZP.DfBelegnr_frmZPInfo, new RecordItemIndex(15));
            repo.MdiBuch.FrmZP.DfBelegnr_frmZP.PressKeys(BelegVZ);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBuch.PbStandard2' at Center.", repo.MdiBuch.PbStandard2Info, new RecordItemIndex(16));
            repo.MdiBuch.PbStandard2.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'DlgZahlungsart'.", repo.DlgZahlungsart.SelfInfo, new RecordItemIndex(17));
            Validate.Exists(repo.DlgZahlungsart.SelfInfo);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Beleg < VZ_TEST_1 > nicht am Konto !') on item 'DlgZahlungsart.DfText'.", repo.DlgZahlungsart.DfTextInfo, new RecordItemIndex(18));
            Validate.AttributeContains(repo.DlgZahlungsart.DfTextInfo, "Text", "Beleg < VZ_TEST_1 > nicht am Konto !");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgZahlungsart.ButtonPbV' at Center.", repo.DlgZahlungsart.ButtonPbVInfo, new RecordItemIndex(19));
            repo.DlgZahlungsart.ButtonPbV.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
