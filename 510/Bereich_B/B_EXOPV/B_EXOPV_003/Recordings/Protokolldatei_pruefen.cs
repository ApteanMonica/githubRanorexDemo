///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_EXOPV_003.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Protokolldatei_pruefen recording.
    /// </summary>
    [TestModule("0a192fb4-4461-4e06-b89e-8bd030a9e160", ModuleType.Recording, 1)]
    public partial class Protokolldatei_pruefen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_EXOPV_003.B_EXOPV_003Repository repository.
        /// </summary>
        public static global::B_EXOPV_003.B_EXOPV_003Repository repo = global::B_EXOPV_003.B_EXOPV_003Repository.Instance;

        static Protokolldatei_pruefen instance = new Protokolldatei_pruefen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Protokolldatei_pruefen()
        {
            Fehlerprotokoll = "c:\\temp\\Fehlerprotokoll_b_exopv_003.txt";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Protokolldatei_pruefen Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable Fehlerprotokoll.
        /// </summary>
        [TestVariable("06b33c2c-4f57-4aaf-bca6-9038d5494b2e")]
        public string Fehlerprotokoll
        {
            get { return repo.Fehlerprotokoll; }
            set { repo.Fehlerprotokoll = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100ExterneBuchungenVerbuchen.PbCommonProtokolldatei' at Center.", repo.Form100ExterneBuchungenVerbuchen.PbCommonProtokolldateiInfo, new RecordItemIndex(0));
            repo.Form100ExterneBuchungenVerbuchen.PbCommonProtokolldatei.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m to exist. Associated repository item: 'Fehlerprotokoll_TxtEditor.Fehlerprotokoll_TxtEditor'", repo.Fehlerprotokoll_TxtEditor.Fehlerprotokoll_TxtEditorInfo, new ActionTimeout(60000), new RecordItemIndex(1));
            repo.Fehlerprotokoll_TxtEditor.Fehlerprotokoll_TxtEditorInfo.WaitForExists(60000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Fehlerprotokoll_b_exopv_003') on item 'Fehlerprotokoll_TxtEditor.Fehlerprotokoll_TxtEditor'.", repo.Fehlerprotokoll_TxtEditor.Fehlerprotokoll_TxtEditorInfo, new RecordItemIndex(2));
            Validate.AttributeContains(repo.Fehlerprotokoll_TxtEditor.Fehlerprotokoll_TxtEditorInfo, "Text", "Fehlerprotokoll_b_exopv_003");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'B_EXOPV - Starte Verbuchung') on item 'Fehlerprotokoll_TxtEditor.Text15'.", repo.Fehlerprotokoll_TxtEditor.Text15Info, new RecordItemIndex(3));
            Validate.AttributeContains(repo.Fehlerprotokoll_TxtEditor.Text15Info, "Text", "B_EXOPV - Starte Verbuchung");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'[100] Starte Verbuchung RS\\2-Verkauf') on item 'Fehlerprotokoll_TxtEditor.Text15'.", repo.Fehlerprotokoll_TxtEditor.Text15Info, new RecordItemIndex(4));
            Validate.AttributeContains(repo.Fehlerprotokoll_TxtEditor.Text15Info, "Text", "[100] Starte Verbuchung RS\\2-Verkauf");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Exop: 0\tBeleg: R20/0010: Belegnummer mehrfach in externer Schnittstelle vorhanden in Zeile') on item 'Fehlerprotokoll_TxtEditor.Text15'.", repo.Fehlerprotokoll_TxtEditor.Text15Info, new RecordItemIndex(5));
            Validate.AttributeContains(repo.Fehlerprotokoll_TxtEditor.Text15Info, "Text", "Exop: 0\tBeleg: R20/0010: Belegnummer mehrfach in externer Schnittstelle vorhanden in Zeile");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Exop: 0\tBeleg: R20/0010: Belegnummer mehrfach in externer Schnittstelle vorhanden in Zeile') on item 'Fehlerprotokoll_TxtEditor.Text15'.", repo.Fehlerprotokoll_TxtEditor.Text15Info, new RecordItemIndex(6));
            Validate.AttributeContains(repo.Fehlerprotokoll_TxtEditor.Text15Info, "Text", "Exop: 0\tBeleg: R20/0010: Belegnummer mehrfach in externer Schnittstelle vorhanden in Zeile");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'[100] Beende Verbuchung RS\\2-Verkauf') on item 'Fehlerprotokoll_TxtEditor.Text15'.", repo.Fehlerprotokoll_TxtEditor.Text15Info, new RecordItemIndex(7));
            Validate.AttributeContains(repo.Fehlerprotokoll_TxtEditor.Text15Info, "Text", "[100] Beende Verbuchung RS\\2-Verkauf");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Anzahl Buchungen gelesen  3\r\nAnzahl Buchungen verbucht 3  Summe verbucht: 4800,00') on item 'Fehlerprotokoll_TxtEditor.Text15'.", repo.Fehlerprotokoll_TxtEditor.Text15Info, new RecordItemIndex(8));
            Validate.AttributeContains(repo.Fehlerprotokoll_TxtEditor.Text15Info, "Text", "Anzahl Buchungen gelesen  3\r\nAnzahl Buchungen verbucht 3  Summe verbucht: 4800,00");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
