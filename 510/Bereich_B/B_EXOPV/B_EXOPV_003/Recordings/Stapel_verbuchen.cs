///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_EXOPV_003.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Stapel_verbuchen recording.
    /// </summary>
    [TestModule("f799779b-c49a-4ef2-af33-4df412d20a32", ModuleType.Recording, 1)]
    public partial class Stapel_verbuchen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_EXOPV_003.B_EXOPV_003Repository repository.
        /// </summary>
        public static global::B_EXOPV_003.B_EXOPV_003Repository repo = global::B_EXOPV_003.B_EXOPV_003Repository.Instance;

        static Stapel_verbuchen instance = new Stapel_verbuchen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Stapel_verbuchen()
        {
            Kunde_NR = "200009";
            Beleg2 = "R20/0010";
            Fehlerprotokoll = "c:\\temp\\Fehlerprotokoll_b_exopv_003.txt";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Stapel_verbuchen Instance
        {
            get { return instance; }
        }

#region Variables

        string _Kunde_NR;

        /// <summary>
        /// Gets or sets the value of variable Kunde_NR.
        /// </summary>
        [TestVariable("ed606e7b-fe30-49d3-aea8-c252497223f4")]
        public string Kunde_NR
        {
            get { return _Kunde_NR; }
            set { _Kunde_NR = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Stapel_Betrag.
        /// </summary>
        [TestVariable("48b19637-43c3-4e36-928f-6ad2fe527894")]
        public string Stapel_Betrag
        {
            get { return repo.Stapel_Betrag; }
            set { repo.Stapel_Betrag = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Beleg2.
        /// </summary>
        [TestVariable("3993af81-570d-41a2-a7a3-11594a929593")]
        public string Beleg2
        {
            get { return repo.Beleg2; }
            set { repo.Beleg2 = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Fehlerprotokoll.
        /// </summary>
        [TestVariable("588ef7c4-41e9-4268-ae22-e5b93c7466b6")]
        public string Fehlerprotokoll
        {
            get { return repo.Fehlerprotokoll; }
            set { repo.Fehlerprotokoll = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Fehlerprotokoll' with focus on 'Form100ExterneBuchungenVerbuchen.Text_Pfad_Pruefprotokoll'.", repo.Form100ExterneBuchungenVerbuchen.Text_Pfad_PruefprotokollInfo, new RecordItemIndex(0));
            repo.Form100ExterneBuchungenVerbuchen.Text_Pfad_Pruefprotokoll.PressKeys(Fehlerprotokoll);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(1));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100ExterneBuchungenVerbuchen.Row1Column0' at Center.", repo.Form100ExterneBuchungenVerbuchen.Row1Column0Info, new RecordItemIndex(2));
            repo.Form100ExterneBuchungenVerbuchen.Row1Column0.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LControlKey down}'.", new RecordItemIndex(3));
            Keyboard.Press("{LControlKey down}");
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(4));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{End}'.", new RecordItemIndex(5));
            Keyboard.Press("{End}");
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(6));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LControlKey up}'.", new RecordItemIndex(7));
            Keyboard.Press("{LControlKey up}");
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(8));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100ExterneBuchungenVerbuchen.Tabelle_Zeilen_mit_Variablen.Zeile_mit_Stapel_Betrag_4800.Column0_Stapel_4800' at Center.", repo.Form100ExterneBuchungenVerbuchen.Tabelle_Zeilen_mit_Variablen.Zeile_mit_Stapel_Betrag_4800.Column0_Stapel_4800Info, new RecordItemIndex(9));
            repo.Form100ExterneBuchungenVerbuchen.Tabelle_Zeilen_mit_Variablen.Zeile_mit_Stapel_Betrag_4800.Column0_Stapel_4800.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100ExterneBuchungenVerbuchen.PbCommonVerbuchen' at Center.", repo.Form100ExterneBuchungenVerbuchen.PbCommonVerbuchenInfo, new RecordItemIndex(10));
            repo.Form100ExterneBuchungenVerbuchen.PbCommonVerbuchen.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 3m to exist. Associated repository item: 'DlgMessageBox.FakturenPruefung'", repo.DlgMessageBox.FakturenPruefungInfo, new ActionTimeout(180000), new RecordItemIndex(11));
            repo.DlgMessageBox.FakturenPruefungInfo.WaitForExists(180000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Es sind doppelte Belegnummern in der Externen Schnittstelle\r\nbei  den Kundenbuchungen vorhanden.\r\n\r\nSoll die Verbuchung abgebrochen werden?') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Es sind doppelte Belegnummern in der Externen Schnittstelle\r\nbei  den Kundenbuchungen vorhanden.\r\n\r\nSoll die Verbuchung abgebrochen werden?");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button1' at Center.", repo.DlgMessageBox.Button1Info, new RecordItemIndex(13));
            repo.DlgMessageBox.Button1.Click();
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(14));
            Delay.Duration(2000, false);
            
            //Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'DlgBelegnrFehler.TitleBar100BelegNrFehler'", repo.DlgBelegnrFehler.TitleBar100BelegNrFehlerInfo, new ActionTimeout(120000), new RecordItemIndex(15));
            //repo.DlgBelegnrFehler.TitleBar100BelegNrFehlerInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Kunde_NR) on item 'DlgBelegnrFehler.Frame2.DfAdrNr'.", repo.DlgBelegnrFehler.Frame2.DfAdrNrInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.DlgBelegnrFehler.Frame2.DfAdrNrInfo, "Text", Kunde_NR);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Beleg2) on item 'DlgBelegnrFehler.Frame2.DfBelegNr'.", repo.DlgBelegnrFehler.Frame2.DfBelegNrInfo, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.DlgBelegnrFehler.Frame2.DfBelegNrInfo, "Text", Beleg2);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Beleg im selben Jahr schon als OP vorhanden !') on item 'DlgBelegnrFehler.Frame2.Label3'.", repo.DlgBelegnrFehler.Frame2.Label3Info, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.DlgBelegnrFehler.Frame2.Label3Info, "Text", "Beleg im selben Jahr schon als OP vorhanden !");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Beleg2) on item 'DlgBelegnrFehler.Frame2.NeueBelegNr'.", repo.DlgBelegnrFehler.Frame2.NeueBelegNrInfo, new RecordItemIndex(19));
            Validate.AttributeEqual(repo.DlgBelegnrFehler.Frame2.NeueBelegNrInfo, "Text", Beleg2);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgBelegnrFehler.PbAkzeptieren' at Center.", repo.DlgBelegnrFehler.PbAkzeptierenInfo, new RecordItemIndex(20));
            repo.DlgBelegnrFehler.PbAkzeptieren.Click();
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(21));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Kunde_NR) on item 'DlgBelegnrFehler.Frame2.DfAdrNr'.", repo.DlgBelegnrFehler.Frame2.DfAdrNrInfo, new RecordItemIndex(22));
            Validate.AttributeEqual(repo.DlgBelegnrFehler.Frame2.DfAdrNrInfo, "Text", Kunde_NR);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Beleg2) on item 'DlgBelegnrFehler.Frame2.DfBelegNr'.", repo.DlgBelegnrFehler.Frame2.DfBelegNrInfo, new RecordItemIndex(23));
            Validate.AttributeEqual(repo.DlgBelegnrFehler.Frame2.DfBelegNrInfo, "Text", Beleg2);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Beleg im selben Jahr schon als OP vorhanden !') on item 'DlgBelegnrFehler.Frame2.Label3'.", repo.DlgBelegnrFehler.Frame2.Label3Info, new RecordItemIndex(24));
            Validate.AttributeEqual(repo.DlgBelegnrFehler.Frame2.Label3Info, "Text", "Beleg im selben Jahr schon als OP vorhanden !");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Beleg2) on item 'DlgBelegnrFehler.Frame2.NeueBelegNr'.", repo.DlgBelegnrFehler.Frame2.NeueBelegNrInfo, new RecordItemIndex(25));
            Validate.AttributeEqual(repo.DlgBelegnrFehler.Frame2.NeueBelegNrInfo, "Text", Beleg2);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgBelegnrFehler.PbAkzeptieren' at Center.", repo.DlgBelegnrFehler.PbAkzeptierenInfo, new RecordItemIndex(26));
            repo.DlgBelegnrFehler.PbAkzeptieren.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'DlgMessageBox.FakturenPruefung'", repo.DlgMessageBox.FakturenPruefungInfo, new ActionTimeout(120000), new RecordItemIndex(27));
            repo.DlgMessageBox.FakturenPruefungInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Belege wurden verbucht ! ') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(28));
            Validate.AttributeEqual(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Belege wurden verbucht ! ");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(29));
            repo.DlgMessageBox.Button0.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
