///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_JOUR_002.Recordings_2015
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Indexdatei_oeffnen recording.
    /// </summary>
    [TestModule("ff0a5a05-2945-4bf1-a9cc-5bfa4ff0fcf0", ModuleType.Recording, 1)]
    public partial class Indexdatei_oeffnen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_JOUR_002.B_JOUR_002Repository repository.
        /// </summary>
        public static global::B_JOUR_002.B_JOUR_002Repository repo = global::B_JOUR_002.B_JOUR_002Repository.Instance;

        static Indexdatei_oeffnen instance = new Indexdatei_oeffnen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Indexdatei_oeffnen()
        {
            Pfad_File_Index = "c:\\temp\\index.xml";
            File_Index = "index.xml";
            Programm2 = "notepad.exe";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Indexdatei_oeffnen Instance
        {
            get { return instance; }
        }

#region Variables

        string _Pfad_File_Index;

        /// <summary>
        /// Gets or sets the value of variable Pfad_File_Index.
        /// </summary>
        [TestVariable("d93234a5-22c0-4e13-9c6e-42370b160288")]
        public string Pfad_File_Index
        {
            get { return _Pfad_File_Index; }
            set { _Pfad_File_Index = value; }
        }

        string _File_Index;

        /// <summary>
        /// Gets or sets the value of variable File_Index.
        /// </summary>
        [TestVariable("0c9ce850-fb05-4e4f-8d16-dfefc1c170f2")]
        public string File_Index
        {
            get { return _File_Index; }
            set { _File_Index = value; }
        }

        string _Programm2;

        /// <summary>
        /// Gets or sets the value of variable Programm2.
        /// </summary>
        [TestVariable("71e83add-a9d4-41fc-81e8-dea7036dbe61")]
        public string Programm2
        {
            get { return _Programm2; }
            set { _Programm2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Application", "Run application with file name from variable $Pfad_File_Index with arguments from variable $Programm2 in normal mode.", new RecordItemIndex(0));
            Host.Local.RunApplication(Pfad_File_Index, Programm2, "", false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'IndexXmlEditor.IndexXmlEditor'", repo.IndexXmlEditor.IndexXmlEditorInfo, new ActionTimeout(120000), new RecordItemIndex(1));
            repo.IndexXmlEditor.IndexXmlEditorInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$File_Index) on item 'IndexXmlEditor.IndexXmlEditor'.", repo.IndexXmlEditor.IndexXmlEditorInfo, new RecordItemIndex(2));
            Validate.AttributeContains(repo.IndexXmlEditor.IndexXmlEditorInfo, "Text", File_Index);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
