///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_JOUR_004.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The B_JOUR_mit_user_RS_aufrufen_Meldung_gleicher_Benutzer recording.
    /// </summary>
    [TestModule("b7eb8d66-3627-4f34-9507-dbaccfd9c1e0", ModuleType.Recording, 1)]
    public partial class B_JOUR_mit_user_RS_aufrufen_Meldung_gleicher_Benutzer : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_JOUR_004.B_JOUR_004Repository repository.
        /// </summary>
        public static global::B_JOUR_004.B_JOUR_004Repository repo = global::B_JOUR_004.B_JOUR_004Repository.Instance;

        static B_JOUR_mit_user_RS_aufrufen_Meldung_gleicher_Benutzer instance = new B_JOUR_mit_user_RS_aufrufen_Meldung_gleicher_Benutzer();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public B_JOUR_mit_user_RS_aufrufen_Meldung_gleicher_Benutzer()
        {
            Startfile = "C:\\Testdaten\\Allgemein\\Start.bat";
            Programm_RS = "B_JOUR x x RS";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static B_JOUR_mit_user_RS_aufrufen_Meldung_gleicher_Benutzer Instance
        {
            get { return instance; }
        }

#region Variables

        string _Startfile;

        /// <summary>
        /// Gets or sets the value of variable Startfile.
        /// </summary>
        [TestVariable("f464a257-4a0e-40fd-8fbc-dc2880bc8062")]
        public string Startfile
        {
            get { return _Startfile; }
            set { _Startfile = value; }
        }

        string _Programm_RS;

        /// <summary>
        /// Gets or sets the value of variable Programm_RS.
        /// </summary>
        [TestVariable("0b317f40-7cfe-4b8e-8d95-7eda8d59f8b0")]
        public string Programm_RS
        {
            get { return _Programm_RS; }
            set { _Programm_RS = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Application", "Run application with file name from variable $Startfile with arguments from variable $Programm_RS in normal mode.", new RecordItemIndex(0));
            Host.Local.RunApplication(Startfile, Programm_RS, "", false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'DlgMessageBox.LabelMeldungstext'", repo.DlgMessageBox.LabelMeldungstextInfo, new ActionTimeout(120000), new RecordItemIndex(1));
            repo.DlgMessageBox.LabelMeldungstextInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Journaldruck wird bereits von Benutzer RS verwendet\r\n\r\nFortfahren?') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Journaldruck wird bereits von Benutzer RS verwendet\r\n\r\nFortfahren?");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(3));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 3m to exist. Associated repository item: 'FrmJournal.TitleBar100ErfassungsJournal'", repo.FrmJournal.TitleBar100ErfassungsJournalInfo, new ActionTimeout(180000), new RecordItemIndex(4));
            repo.FrmJournal.TitleBar100ErfassungsJournalInfo.WaitForExists(180000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Erfassungs-Journal') on item 'FrmJournal.TitleBar100ErfassungsJournal'.", repo.FrmJournal.TitleBar100ErfassungsJournalInfo, new RecordItemIndex(5));
            Validate.AttributeContains(repo.FrmJournal.TitleBar100ErfassungsJournalInfo, "Text", "Erfassungs-Journal");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
