///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_MNDR_004.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Aenderung_kontrollieren recording.
    /// </summary>
    [TestModule("4833f6bc-ee7f-458d-99a1-9cb75edfd71a", ModuleType.Recording, 1)]
    public partial class Aenderung_kontrollieren : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_MNDR_004.B_MNDR_004Repository repository.
        /// </summary>
        public static global::B_MNDR_004.B_MNDR_004Repository repo = global::B_MNDR_004.B_MNDR_004Repository.Instance;

        static Aenderung_kontrollieren instance = new Aenderung_kontrollieren();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Aenderung_kontrollieren()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Aenderung_kontrollieren Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Mahnsperre\t01.02.2021\t31.03.2021\tB_MNDR_004_03\t*\tKLAGE\tkeine Mahnung wegen Klage') on item 'Form100Sperren.untere_Sperrtabelle.Row2_untere_Sperrtabelle'.", repo.Form100Sperren.untere_Sperrtabelle.Row2_untere_SperrtabelleInfo, new RecordItemIndex(0));
            Validate.AttributeContains(repo.Form100Sperren.untere_Sperrtabelle.Row2_untere_SperrtabelleInfo, "Text", "Mahnsperre\t01.02.2021\t31.03.2021\tB_MNDR_004_03\t*\tKLAGE\tkeine Mahnung wegen Klage");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Alt+F4' Press with focus on 'Form100Sperren.TitleBar100Sperren'.", repo.Form100Sperren.TitleBar100SperrenInfo, new RecordItemIndex(1));
            Keyboard.PrepareFocus(repo.Form100Sperren.TitleBar100Sperren);
            Keyboard.Press(System.Windows.Forms.Keys.F4 | System.Windows.Forms.Keys.Alt, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            // Zusatz-Schritt der nach Behebung des Tickets AR570 wieder entfernt werden kann.
            Report.Log(ReportLevel.Info, "Mouse", "Zusatz-Schritt der nach Behebung des Tickets AR570 wieder entfernt werden kann.\r\nMouse Left Click item 'FrmVorschlagAEndern.PbDataAccessSave' at Center.", repo.FrmVorschlagAEndern.PbDataAccessSaveInfo, new RecordItemIndex(2));
            repo.FrmVorschlagAEndern.PbDataAccessSave.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='N') on item 'FrmVorschlagAEndern.FlexGrid_Tabelle.Row6.ColSperreRow6'.", repo.FrmVorschlagAEndern.FlexGrid_Tabelle.Row6.ColSperreRow6Info, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.FrmVorschlagAEndern.FlexGrid_Tabelle.Row6.ColSperreRow6Info, "Text", "N");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='KLAGE') on item 'FrmVorschlagAEndern.FlexGrid_Tabelle.Row6.ColOpspCdRow6'.", repo.FrmVorschlagAEndern.FlexGrid_Tabelle.Row6.ColOpspCdRow6Info, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.FrmVorschlagAEndern.FlexGrid_Tabelle.Row6.ColOpspCdRow6Info, "Text", "KLAGE");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='keine Mahnung wegen Klage') on item 'FrmVorschlagAEndern.FlexGrid_Tabelle.Row6.ColOpspBezRow6'.", repo.FrmVorschlagAEndern.FlexGrid_Tabelle.Row6.ColOpspBezRow6Info, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.FrmVorschlagAEndern.FlexGrid_Tabelle.Row6.ColOpspBezRow6Info, "Text", "keine Mahnung wegen Klage");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
