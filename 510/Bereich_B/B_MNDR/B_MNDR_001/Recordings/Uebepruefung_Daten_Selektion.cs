///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_MNDR_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Uebepruefung_Daten_Selektion recording.
    /// </summary>
    [TestModule("e89b1307-8082-4fe6-98a1-335891e24c3c", ModuleType.Recording, 1)]
    public partial class Uebepruefung_Daten_Selektion : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_MNDR_001.B_MNDR_001Repository repository.
        /// </summary>
        public static global::B_MNDR_001.B_MNDR_001Repository repo = global::B_MNDR_001.B_MNDR_001Repository.Instance;

        static Uebepruefung_Daten_Selektion instance = new Uebepruefung_Daten_Selektion();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Uebepruefung_Daten_Selektion()
        {
            Kunde_1 = "200014";
            Kunde_2 = "200015";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Uebepruefung_Daten_Selektion Instance
        {
            get { return instance; }
        }

#region Variables

        string _Kunde_1;

        /// <summary>
        /// Gets or sets the value of variable Kunde_1.
        /// </summary>
        [TestVariable("95e36d53-26bd-47a2-ac6f-e242a36c093c")]
        public string Kunde_1
        {
            get { return _Kunde_1; }
            set { _Kunde_1 = value; }
        }

        string _Kunde_2;

        /// <summary>
        /// Gets or sets the value of variable Kunde_2.
        /// </summary>
        [TestVariable("ebbb2719-418a-40a2-8e27-30e9a43027ef")]
        public string Kunde_2
        {
            get { return _Kunde_2; }
            set { _Kunde_2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmVorschlagErstellen.Selektion' at Center.", repo.FrmVorschlagErstellen.SelektionInfo, new RecordItemIndex(0));
            repo.FrmVorschlagErstellen.Selektion.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'FrmVorschlagErstellen.DfKlktV'", repo.FrmVorschlagErstellen.DfKlktVInfo, new ActionTimeout(120000), new RecordItemIndex(1));
            repo.FrmVorschlagErstellen.DfKlktVInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Kunde_1) on item 'FrmVorschlagErstellen.DfKlktV'.", repo.FrmVorschlagErstellen.DfKlktVInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.FrmVorschlagErstellen.DfKlktVInfo, "Text", Kunde_1);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Kunde_2) on item 'FrmVorschlagErstellen.TextBis'.", repo.FrmVorschlagErstellen.TextBisInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.FrmVorschlagErstellen.TextBisInfo, "Text", Kunde_2);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='') on item 'FrmVorschlagErstellen.DfLand1'.", repo.FrmVorschlagErstellen.DfLand1Info, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.FrmVorschlagErstellen.DfLand1Info, "Text", "");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='') on item 'FrmVorschlagErstellen.DfLand2'.", repo.FrmVorschlagErstellen.DfLand2Info, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.FrmVorschlagErstellen.DfLand2Info, "Text", "");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='') on item 'FrmVorschlagErstellen.DfAdga'.", repo.FrmVorschlagErstellen.DfAdgaInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.FrmVorschlagErstellen.DfAdgaInfo, "Text", "");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='') on item 'FrmVorschlagErstellen.DfAdga'.", repo.FrmVorschlagErstellen.DfAdgaInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.FrmVorschlagErstellen.DfAdgaInfo, "Text", "");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='') on item 'FrmVorschlagErstellen.DfAdgrVon'.", repo.FrmVorschlagErstellen.DfAdgrVonInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.FrmVorschlagErstellen.DfAdgrVonInfo, "Text", "");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='') on item 'FrmVorschlagErstellen.TextBis1'.", repo.FrmVorschlagErstellen.TextBis1Info, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.FrmVorschlagErstellen.TextBis1Info, "Text", "");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='') on item 'FrmVorschlagErstellen.DfAdgrBis'.", repo.FrmVorschlagErstellen.DfAdgrBisInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.FrmVorschlagErstellen.DfAdgrBisInfo, "Text", "");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='') on item 'FrmVorschlagErstellen.DfCd1'.", repo.FrmVorschlagErstellen.DfCd1Info, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.FrmVorschlagErstellen.DfCd1Info, "Text", "");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='') on item 'FrmVorschlagErstellen.DfVertreter'.", repo.FrmVorschlagErstellen.DfVertreterInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.FrmVorschlagErstellen.DfVertreterInfo, "Text", "");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='') on item 'FrmVorschlagErstellen.DfAdrBetreuer'.", repo.FrmVorschlagErstellen.DfAdrBetreuerInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.FrmVorschlagErstellen.DfAdrBetreuerInfo, "Text", "");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
