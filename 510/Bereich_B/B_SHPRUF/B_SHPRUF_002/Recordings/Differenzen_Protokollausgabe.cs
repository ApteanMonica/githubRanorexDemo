///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_SHPRUF_002.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Differenzen_Protokollausgabe recording.
    /// </summary>
    [TestModule("03f7b7fa-e701-415d-b696-c3693ec11ef8", ModuleType.Recording, 1)]
    public partial class Differenzen_Protokollausgabe : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_SHPRUF_002.B_SHPRUF_002Repository repository.
        /// </summary>
        public static global::B_SHPRUF_002.B_SHPRUF_002Repository repo = global::B_SHPRUF_002.B_SHPRUF_002Repository.Instance;

        static Differenzen_Protokollausgabe instance = new Differenzen_Protokollausgabe();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Differenzen_Protokollausgabe()
        {
            Jahr = "2018";
            Periode = "2";
            Protokollpfad = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Differenzen_Protokollausgabe Instance
        {
            get { return instance; }
        }

#region Variables

        string _Jahr;

        /// <summary>
        /// Gets or sets the value of variable Jahr.
        /// </summary>
        [TestVariable("f2e931ca-de0f-43f1-b097-2d15263e3d35")]
        public string Jahr
        {
            get { return _Jahr; }
            set { _Jahr = value; }
        }

        string _Periode;

        /// <summary>
        /// Gets or sets the value of variable Periode.
        /// </summary>
        [TestVariable("ec42821d-2d2b-4ebf-bf07-405dbb2b6d70")]
        public string Periode
        {
            get { return _Periode; }
            set { _Periode = value; }
        }

        string _Protokollpfad;

        /// <summary>
        /// Gets or sets the value of variable Protokollpfad.
        /// </summary>
        [TestVariable("6a69f029-55f1-4c0f-bdb3-b315c14066dc")]
        public string Protokollpfad
        {
            get { return _Protokollpfad; }
            set { _Protokollpfad = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmMain.DfJahrbez' at Center.", repo.FrmMain.DfJahrbezInfo, new RecordItemIndex(0));
            repo.FrmMain.DfJahrbez.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Back}' with focus on 'FrmMain.DfJahrbez'.", repo.FrmMain.DfJahrbezInfo, new RecordItemIndex(1));
            repo.FrmMain.DfJahrbez.PressKeys("{Back}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Jahr' with focus on 'FrmMain.DfJahrbez'.", repo.FrmMain.DfJahrbezInfo, new RecordItemIndex(2));
            repo.FrmMain.DfJahrbez.PressKeys(Jahr);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmMain.Periode' at Center.", repo.FrmMain.PeriodeInfo, new RecordItemIndex(3));
            repo.FrmMain.Periode.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Periode' with focus on 'FrmMain.Periode'.", repo.FrmMain.PeriodeInfo, new RecordItemIndex(4));
            repo.FrmMain.Periode.PressKeys(Periode);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Jahr) on item 'FrmMain.DfJahrbez'.", repo.FrmMain.DfJahrbezInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.FrmMain.DfJahrbezInfo, "Text", Jahr);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Periode) on item 'FrmMain.Periode'.", repo.FrmMain.PeriodeInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.FrmMain.PeriodeInfo, "Text", Periode);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmMain.CbDatei' at Center.", repo.FrmMain.CbDateiInfo, new RecordItemIndex(7));
            repo.FrmMain.CbDatei.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Protokollpfad' with focus on 'FrmMain.Text'.", repo.FrmMain.TextInfo, new RecordItemIndex(8));
            repo.FrmMain.Text.PressKeys(Protokollpfad);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Checked='True') on item 'FrmMain.CbDatei'.", repo.FrmMain.CbDateiInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.FrmMain.CbDateiInfo, "Checked", "True");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Protokollpfad) on item 'FrmMain.Text'.", repo.FrmMain.TextInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.FrmMain.TextInfo, "Text", Protokollpfad);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmMain.PbOK' at Center.", repo.FrmMain.PbOKInfo, new RecordItemIndex(11));
            repo.FrmMain.PbOK.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Es wurden Differenzen protokolliert.\r\n\r\nDatei anzeigen?') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(12));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Es wurden Differenzen protokolliert.\r\n\r\nDatei anzeigen?");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(13));
            repo.DlgMessageBox.Button0.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
