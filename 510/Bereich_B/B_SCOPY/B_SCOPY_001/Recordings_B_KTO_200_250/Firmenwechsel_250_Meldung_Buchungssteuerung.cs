///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_SCOPY_001.Recordings_B_KTO_200_250
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Firmenwechsel_250_Meldung_Buchungssteuerung recording.
    /// </summary>
    [TestModule("ac73ea07-90bf-4e5a-bac5-52f3ad160a80", ModuleType.Recording, 1)]
    public partial class Firmenwechsel_250_Meldung_Buchungssteuerung : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_SCOPY_001.B_SCOPY_001Repository repository.
        /// </summary>
        public static global::B_SCOPY_001.B_SCOPY_001Repository repo = global::B_SCOPY_001.B_SCOPY_001Repository.Instance;

        static Firmenwechsel_250_Meldung_Buchungssteuerung instance = new Firmenwechsel_250_Meldung_Buchungssteuerung();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Firmenwechsel_250_Meldung_Buchungssteuerung()
        {
            Ziel_Firma = "250";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Firmenwechsel_250_Meldung_Buchungssteuerung Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable Ziel_Firma.
        /// </summary>
        [TestVariable("18d7306e-6768-4861-8b8d-4e00ebe561e0")]
        public string Ziel_Firma
        {
            get { return repo.Ziel_Firma; }
            set { repo.Ziel_Firma = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmKto.PbStandard2' at Center.", repo.FrmKto.PbStandard2Info, new RecordItemIndex(0));
            repo.FrmKto.PbStandard2.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m to exist. Associated repository item: 'DlgFirmenwechsel.TitleBar100FirmaWechseln'", repo.DlgFirmenwechsel.TitleBar100FirmaWechselnInfo, new ActionTimeout(60000), new RecordItemIndex(1));
            repo.DlgFirmenwechsel.TitleBar100FirmaWechselnInfo.WaitForExists(60000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Ziel_Firma' with focus on 'DlgFirmenwechsel.Firma'.", repo.DlgFirmenwechsel.FirmaInfo, new RecordItemIndex(2));
            repo.DlgFirmenwechsel.Firma.PressKeys(Ziel_Firma);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(3));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Ziel_Firma) on item 'DlgFirmenwechsel.Firma'.", repo.DlgFirmenwechsel.FirmaInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.DlgFirmenwechsel.FirmaInfo, "Text", Ziel_Firma);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='TEST_B_BUST') on item 'DlgFirmenwechsel.DfFirmKbez'.", repo.DlgFirmenwechsel.DfFirmKbezInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.DlgFirmenwechsel.DfFirmKbezInfo, "Text", "TEST_B_BUST");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgFirmenwechsel.PbOk' at Center.", repo.DlgFirmenwechsel.PbOkInfo, new RecordItemIndex(6));
            repo.DlgFirmenwechsel.PbOk.Click();
            
            // Bestätigung Meldung "Buchungsteuerung nicht vorhanden" wenn Test b_bust_001 nicht vorher ausgef. wurde.
            Report.Log(ReportLevel.Info, "Keyboard", "Bestätigung Meldung \"Buchungsteuerung nicht vorhanden\" wenn Test b_bust_001 nicht vorher ausgef. wurde.\r\nKey 'Enter' Press.", new RecordItemIndex(7));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'[250]  Sachkonten verwalten') on item 'FrmKto.TitleBar250SachkontenVerwalten'.", repo.FrmKto.TitleBar250SachkontenVerwaltenInfo, new RecordItemIndex(8));
            Validate.AttributeContains(repo.FrmKto.TitleBar250SachkontenVerwaltenInfo, "Text", "[250]  Sachkonten verwalten");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
