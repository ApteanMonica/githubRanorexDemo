///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_SCOPY_001.Recordings_SQL
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Select_B_KTO_39rows recording.
    /// </summary>
    [TestModule("37958858-7742-447c-82c4-d34d7f62605f", ModuleType.Recording, 1)]
    public partial class Select_B_KTO_39rows : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_SCOPY_001.B_SCOPY_001Repository repository.
        /// </summary>
        public static global::B_SCOPY_001.B_SCOPY_001Repository repo = global::B_SCOPY_001.B_SCOPY_001Repository.Instance;

        static Select_B_KTO_39rows instance = new Select_B_KTO_39rows();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Select_B_KTO_39rows()
        {
            Ziel_Firma = "250";
            Ziel_DB = "E510";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Select_B_KTO_39rows Instance
        {
            get { return instance; }
        }

#region Variables

        string _Ziel_DB;

        /// <summary>
        /// Gets or sets the value of variable Ziel_DB.
        /// </summary>
        [TestVariable("89903d6c-f44a-4914-8f17-ce886cb59fb6")]
        public string Ziel_DB
        {
            get { return _Ziel_DB; }
            set { _Ziel_DB = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Ziel_Firma.
        /// </summary>
        [TestVariable("362b0e89-73a7-4694-9578-ba7e62b13012")]
        public string Ziel_Firma
        {
            get { return repo.Ziel_Firma; }
            set { repo.Ziel_Firma = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence select * from b_kto where firm_nr = '.", new RecordItemIndex(0));
            Keyboard.Press("select * from b_kto where firm_nr = '");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Ziel_Firma'.", new RecordItemIndex(1));
            Keyboard.Press(Ziel_Firma);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence ';.", new RecordItemIndex(2));
            Keyboard.Press("';");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LControlKey down}{Return}{LControlKey up}'.", new RecordItemIndex(3));
            Keyboard.Press("{LControlKey down}{Return}{LControlKey up}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}{Return}'.", new RecordItemIndex(4));
            Keyboard.Press("{Return}{Return}");
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(5));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'39 Rows') on item 'DBTalkUI.Status_Bar_unten_links_Ready'.", repo.DBTalkUI.Status_Bar_unten_links_ReadyInfo, new RecordItemIndex(6));
            Validate.AttributeContains(repo.DBTalkUI.Status_Bar_unten_links_ReadyInfo, "Text", "39 Rows");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$Ziel_DB) on item 'DBTalkUI.StatusBar_unten_rechts_Schraegstrich'.", repo.DBTalkUI.StatusBar_unten_rechts_SchraegstrichInfo, new RecordItemIndex(7));
            Validate.AttributeContains(repo.DBTalkUI.StatusBar_unten_rechts_SchraegstrichInfo, "Text", Ziel_DB);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'$RLG') on item 'DBTalkUI.Text'.", repo.DBTalkUI.TextInfo, new RecordItemIndex(8));
            //Validate.AttributeContains(repo.DBTalkUI.TextInfo, "Text", "$RLG");
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'theor. Skonto') on item 'DBTalkUI.Text'.", repo.DBTalkUI.TextInfo, new RecordItemIndex(9));
            //Validate.AttributeContains(repo.DBTalkUI.TextInfo, "Text", "theor. Skonto");
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Kundenskonto (Klasse 4)') on item 'DBTalkUI.Text'.", repo.DBTalkUI.TextInfo, new RecordItemIndex(10));
            //Validate.AttributeContains(repo.DBTalkUI.TextInfo, "Text", "Kundenskonto (Klasse 4)");
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Lieferantenskonto (Klasse 5)') on item 'DBTalkUI.Text'.", repo.DBTalkUI.TextInfo, new RecordItemIndex(11));
            //Validate.AttributeContains(repo.DBTalkUI.TextInfo, "Text", "Lieferantenskonto (Klasse 5)");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot_Sachkonten' with region {X=15,Y=2,Width=657,Height=374}) on item 'DBTalkUI.CustomScrollControl'.", repo.DBTalkUI.CustomScrollControlInfo, new RecordItemIndex(12));
            Validate.ContainsImage(repo.DBTalkUI.CustomScrollControlInfo, CustomScrollControl_Screenshot_Sachkonten, CustomScrollControl_Screenshot_Sachkonten_Options);
            
        }

#region Image Feature Data
        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage CustomScrollControl_Screenshot_Sachkonten
        { get { return repo.DBTalkUI.CustomScrollControlInfo.GetScreenshot_Sachkonten(new Rectangle(15, 2, 657, 374)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions CustomScrollControl_Screenshot_Sachkonten_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
