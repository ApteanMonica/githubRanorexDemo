///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_SCOPY_001.Recordings_SQL
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Connect_herstellen recording.
    /// </summary>
    [TestModule("2205df5a-90ef-4846-8ded-cab658087bb6", ModuleType.Recording, 1)]
    public partial class Connect_herstellen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_SCOPY_001.B_SCOPY_001Repository repository.
        /// </summary>
        public static global::B_SCOPY_001.B_SCOPY_001Repository repo = global::B_SCOPY_001.B_SCOPY_001Repository.Instance;

        static Connect_herstellen instance = new Connect_herstellen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Connect_herstellen()
        {
            Ziel_DB = "E510";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Connect_herstellen Instance
        {
            get { return instance; }
        }

#region Variables

        string _Ziel_DB;

        /// <summary>
        /// Gets or sets the value of variable Ziel_DB.
        /// </summary>
        [TestVariable("46f4acaf-fa6c-453e-ae5c-479466f14fad")]
        public string Ziel_DB
        {
            get { return _Ziel_DB; }
            set { _Ziel_DB = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            // Connect + 1 Leerzeichen
            Report.Log(ReportLevel.Info, "Keyboard", "Connect + 1 Leerzeichen\r\nKey sequence 'Connect ' with focus on 'DBTalkUI.SomeContainer'.", repo.DBTalkUI.SomeContainerInfo, new RecordItemIndex(0));
            repo.DBTalkUI.SomeContainer.PressKeys("Connect ");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Ziel_DB'.", new RecordItemIndex(1));
            Keyboard.Press(Ziel_DB);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(2));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence ';'.", new RecordItemIndex(3));
            //Keyboard.Press(";");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LControlKey down}{Return}{LControlKey up}'.", new RecordItemIndex(4));
            Keyboard.Press("{LControlKey down}{Return}{LControlKey up}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}{Return}'.", new RecordItemIndex(5));
            Keyboard.Press("{Return}{Return}");
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(6));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Connected to') on item 'DBTalkUI.Text'.", repo.DBTalkUI.TextInfo, new RecordItemIndex(7));
            Validate.AttributeContains(repo.DBTalkUI.TextInfo, "Text", "Connected to");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$Ziel_DB) on item 'DBTalkUI.Text'.", repo.DBTalkUI.TextInfo, new RecordItemIndex(8));
            Validate.AttributeContains(repo.DBTalkUI.TextInfo, "Text", Ziel_DB);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$Ziel_DB) on item 'DBTalkUI.StatusBar_unten_rechts_Schraegstrich'.", repo.DBTalkUI.StatusBar_unten_rechts_SchraegstrichInfo, new RecordItemIndex(9));
            Validate.AttributeContains(repo.DBTalkUI.StatusBar_unten_rechts_SchraegstrichInfo, "Text", Ziel_DB);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
