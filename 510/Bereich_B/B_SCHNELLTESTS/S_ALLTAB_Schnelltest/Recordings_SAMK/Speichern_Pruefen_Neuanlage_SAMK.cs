///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace S_ALLTAB_Schnelltest.Recordings_SAMK
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Speichern_Pruefen_Neuanlage_SAMK recording.
    /// </summary>
    [TestModule("878b8378-fe4a-4756-b262-316a472dab2e", ModuleType.Recording, 1)]
    public partial class Speichern_Pruefen_Neuanlage_SAMK : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::S_ALLTAB_Schnelltest.S_ALLTAB_SchnelltestRepository repository.
        /// </summary>
        public static global::S_ALLTAB_Schnelltest.S_ALLTAB_SchnelltestRepository repo = global::S_ALLTAB_Schnelltest.S_ALLTAB_SchnelltestRepository.Instance;

        static Speichern_Pruefen_Neuanlage_SAMK instance = new Speichern_Pruefen_Neuanlage_SAMK();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Speichern_Pruefen_Neuanlage_SAMK()
        {
            SAMK_CD_NEU = "KX";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Speichern_Pruefen_Neuanlage_SAMK Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable SAMK_CD_NEU.
        /// </summary>
        [TestVariable("df6cf195-d1da-4af2-bd8c-f4d78ab0f0aa")]
        public string SAMK_CD_NEU
        {
            get { return repo.SAMK_CD_NEU; }
            set { repo.SAMK_CD_NEU = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblSamk.PbDataAccessSave' at Center.", repo.TblSamk.PbDataAccessSaveInfo, new RecordItemIndex(0));
            repo.TblSamk.PbDataAccessSave.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s to exist. Associated repository item: 'TblSamk.Row_mit_SAMK_CD_NEU.row'", repo.TblSamk.Row_mit_SAMK_CD_NEU.rowInfo, new ActionTimeout(5000), new RecordItemIndex(1));
            repo.TblSamk.Row_mit_SAMK_CD_NEU.rowInfo.WaitForExists(5000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$SAMK_CD_NEU) on item 'TblSamk.Row_mit_SAMK_CD_NEU.ColSamkCd'.", repo.TblSamk.Row_mit_SAMK_CD_NEU.ColSamkCdInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.TblSamk.Row_mit_SAMK_CD_NEU.ColSamkCdInfo, "Text", SAMK_CD_NEU);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='K') on item 'TblSamk.Row_mit_SAMK_CD_NEU.ColSamkKl'.", repo.TblSamk.Row_mit_SAMK_CD_NEU.ColSamkKlInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.TblSamk.Row_mit_SAMK_CD_NEU.ColSamkKlInfo, "Text", "K");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='test') on item 'TblSamk.Row_mit_SAMK_CD_NEU.ColSamkBez'.", repo.TblSamk.Row_mit_SAMK_CD_NEU.ColSamkBezInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.TblSamk.Row_mit_SAMK_CD_NEU.ColSamkBezInfo, "Text", "test");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='2000') on item 'TblSamk.Row_mit_SAMK_CD_NEU.ColSamkKto'.", repo.TblSamk.Row_mit_SAMK_CD_NEU.ColSamkKtoInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.TblSamk.Row_mit_SAMK_CD_NEU.ColSamkKtoInfo, "Text", "2000");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
