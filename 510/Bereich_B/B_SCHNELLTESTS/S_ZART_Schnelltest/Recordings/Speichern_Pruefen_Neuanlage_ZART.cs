///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace S_ZART_Schnelltest.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Speichern_Pruefen_Neuanlage_ZART recording.
    /// </summary>
    [TestModule("6e82401c-454a-4b6f-bab8-fd5e905b77c1", ModuleType.Recording, 1)]
    public partial class Speichern_Pruefen_Neuanlage_ZART : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::S_ZART_Schnelltest.S_ZART_SchnelltestRepository repository.
        /// </summary>
        public static global::S_ZART_Schnelltest.S_ZART_SchnelltestRepository repo = global::S_ZART_Schnelltest.S_ZART_SchnelltestRepository.Instance;

        static Speichern_Pruefen_Neuanlage_ZART instance = new Speichern_Pruefen_Neuanlage_ZART();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Speichern_Pruefen_Neuanlage_ZART()
        {
            ZART_CD_NEU = "SX";
            ZART_BEZ = "S_ZART_Schnelltest";
            ZAHLWEG = "SEPA-A1";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Speichern_Pruefen_Neuanlage_ZART Instance
        {
            get { return instance; }
        }

#region Variables

        string _ZART_BEZ;

        /// <summary>
        /// Gets or sets the value of variable ZART_BEZ.
        /// </summary>
        [TestVariable("59625725-9470-4fde-b170-e6b114b27690")]
        public string ZART_BEZ
        {
            get { return _ZART_BEZ; }
            set { _ZART_BEZ = value; }
        }

        string _ZAHLWEG;

        /// <summary>
        /// Gets or sets the value of variable ZAHLWEG.
        /// </summary>
        [TestVariable("4982d788-587a-4941-ba01-7aee8eb4480d")]
        public string ZAHLWEG
        {
            get { return _ZAHLWEG; }
            set { _ZAHLWEG = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable ZART_CD_NEU.
        /// </summary>
        [TestVariable("6556337c-4837-46fc-8e8c-2d5d44db9912")]
        public string ZART_CD_NEU
        {
            get { return repo.ZART_CD_NEU; }
            set { repo.ZART_CD_NEU = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblZahlungsarten.PbDataAccessSave' at Center.", repo.TblZahlungsarten.PbDataAccessSaveInfo, new RecordItemIndex(0));
            repo.TblZahlungsarten.PbDataAccessSave.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m to exist. Associated repository item: 'TblZahlungsarten.row_mit_ZART_CD_NEU.Row'", repo.TblZahlungsarten.row_mit_ZART_CD_NEU.RowInfo, new ActionTimeout(60000), new RecordItemIndex(1));
            repo.TblZahlungsarten.row_mit_ZART_CD_NEU.RowInfo.WaitForExists(60000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$ZART_CD_NEU) on item 'TblZahlungsarten.row_mit_ZART_CD_NEU.ColCode'.", repo.TblZahlungsarten.row_mit_ZART_CD_NEU.ColCodeInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.TblZahlungsarten.row_mit_ZART_CD_NEU.ColCodeInfo, "Text", ZART_CD_NEU);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$ZART_BEZ) on item 'TblZahlungsarten.row_mit_ZART_CD_NEU.ColBezeichnung'.", repo.TblZahlungsarten.row_mit_ZART_CD_NEU.ColBezeichnungInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.TblZahlungsarten.row_mit_ZART_CD_NEU.ColBezeichnungInfo, "Text", ZART_BEZ);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='3') on item 'TblZahlungsarten.row_mit_ZART_CD_NEU.ColZartKzverwendung'.", repo.TblZahlungsarten.row_mit_ZART_CD_NEU.ColZartKzverwendungInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.TblZahlungsarten.row_mit_ZART_CD_NEU.ColZartKzverwendungInfo, "Text", "3");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$ZAHLWEG) on item 'TblZahlungsarten.row_mit_ZART_CD_NEU.ColZahlweg'.", repo.TblZahlungsarten.row_mit_ZART_CD_NEU.ColZahlwegInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.TblZahlungsarten.row_mit_ZART_CD_NEU.ColZahlwegInfo, "Text", ZAHLWEG);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
