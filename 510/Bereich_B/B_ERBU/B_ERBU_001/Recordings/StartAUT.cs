///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_ERBU_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The StartAUT recording.
    /// </summary>
    [TestModule("61c406bf-4c0d-47dd-aff2-0ad4a313b2a3", ModuleType.Recording, 1)]
    public partial class StartAUT : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_ERBU_001.B_ERBU_001Repository repository.
        /// </summary>
        public static global::B_ERBU_001.B_ERBU_001Repository repo = global::B_ERBU_001.B_ERBU_001Repository.Instance;

        static StartAUT instance = new StartAUT();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public StartAUT()
        {
            Programm = "B_BUCH Par3 ERB";
            Startfile = "C:\\Testdaten\\Allgemein\\Start.bat";
            Jahr = "";
            Monat = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static StartAUT Instance
        {
            get { return instance; }
        }

#region Variables

        string _Programm;

        /// <summary>
        /// Gets or sets the value of variable Programm.
        /// </summary>
        [TestVariable("e45fa810-46e3-47c2-be4e-00263f678c35")]
        public string Programm
        {
            get { return _Programm; }
            set { _Programm = value; }
        }

        string _Startfile;

        /// <summary>
        /// Gets or sets the value of variable Startfile.
        /// </summary>
        [TestVariable("e5b9ec21-714b-4177-9695-47e9ae0fd5e6")]
        public string Startfile
        {
            get { return _Startfile; }
            set { _Startfile = value; }
        }

        string _Jahr;

        /// <summary>
        /// Gets or sets the value of variable Jahr.
        /// </summary>
        [TestVariable("896cf6f6-2bc8-4313-b68d-cfd245781299")]
        public string Jahr
        {
            get { return _Jahr; }
            set { _Jahr = value; }
        }

        string _Monat;

        /// <summary>
        /// Gets or sets the value of variable Monat.
        /// </summary>
        [TestVariable("30390c93-bdde-48e7-b3f2-746fc78d31b5")]
        public string Monat
        {
            get { return _Monat; }
            set { _Monat = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Application", "Run application with file name from variable $Startfile with arguments from variable $Programm in normal mode.", new RecordItemIndex(0));
            Host.Local.RunApplication(Startfile, Programm, "", false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5m to exist. Associated repository item: 'DlgFirmaPeriode.TitleBar100Eingangsrechnungsbuch'", repo.DlgFirmaPeriode.TitleBar100EingangsrechnungsbuchInfo, new ActionTimeout(300000), new RecordItemIndex(1));
            repo.DlgFirmaPeriode.TitleBar100EingangsrechnungsbuchInfo.WaitForExists(300000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Eingangsrechnungsbuch') on item 'DlgFirmaPeriode.TitleBar100Eingangsrechnungsbuch'.", repo.DlgFirmaPeriode.TitleBar100EingangsrechnungsbuchInfo, new RecordItemIndex(2));
            Validate.AttributeContains(repo.DlgFirmaPeriode.TitleBar100EingangsrechnungsbuchInfo, "Text", "Eingangsrechnungsbuch");
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute AccessibleValue to '$Jahr' on item 'DlgFirmaPeriode.Jahr'.", repo.DlgFirmaPeriode.JahrInfo, new RecordItemIndex(3));
            repo.DlgFirmaPeriode.Jahr.Element.SetAttributeValue("AccessibleValue", Jahr);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute AccessibleValue to '$Monat' on item 'DlgFirmaPeriode.Monat'.", repo.DlgFirmaPeriode.MonatInfo, new RecordItemIndex(4));
            repo.DlgFirmaPeriode.Monat.Element.SetAttributeValue("AccessibleValue", Monat);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgFirmaPeriode.PbOK' at Center.", repo.DlgFirmaPeriode.PbOKInfo, new RecordItemIndex(5));
            repo.DlgFirmaPeriode.PbOK.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 3m to exist. Associated repository item: 'TblErbu.TitleBar100ERBuchRSREFDB'", repo.TblErbu.TitleBar100ERBuchRSREFDBInfo, new ActionTimeout(180000), new RecordItemIndex(6));
            repo.TblErbu.TitleBar100ERBuchRSREFDBInfo.WaitForExists(180000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'ER-Buch') on item 'TblErbu.TitleBar100ERBuchRSREFDB'.", repo.TblErbu.TitleBar100ERBuchRSREFDBInfo, new RecordItemIndex(7));
            Validate.AttributeContains(repo.TblErbu.TitleBar100ERBuchRSREFDBInfo, "Text", "ER-Buch");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
