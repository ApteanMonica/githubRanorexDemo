///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_ELSTER_006_ZM.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The StartAUT recording.
    /// </summary>
    [TestModule("3864ecbb-7f16-402c-88e9-c8e351134c00", ModuleType.Recording, 1)]
    public partial class StartAUT : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_ELSTER_006_ZM.B_ELSTER_006_ZMRepository repository.
        /// </summary>
        public static global::B_ELSTER_006_ZM.B_ELSTER_006_ZMRepository repo = global::B_ELSTER_006_ZM.B_ELSTER_006_ZMRepository.Instance;

        static StartAUT instance = new StartAUT();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public StartAUT()
        {
            Programm = "B_ZM x x x 300";
            Startfile = "C:\\Testdaten\\Allgemein\\Start.bat";
            Firma = "300";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static StartAUT Instance
        {
            get { return instance; }
        }

#region Variables

        string _Programm;

        /// <summary>
        /// Gets or sets the value of variable Programm.
        /// </summary>
        [TestVariable("9cd68d41-f10c-4466-836d-7dcde397d3f9")]
        public string Programm
        {
            get { return _Programm; }
            set { _Programm = value; }
        }

        string _Startfile;

        /// <summary>
        /// Gets or sets the value of variable Startfile.
        /// </summary>
        [TestVariable("06d0505b-7b0a-409e-ab0e-da8e999f6ed6")]
        public string Startfile
        {
            get { return _Startfile; }
            set { _Startfile = value; }
        }

        string _Firma;

        /// <summary>
        /// Gets or sets the value of variable Firma.
        /// </summary>
        [TestVariable("6782b402-cfaa-4564-9171-caa73816df4e")]
        public string Firma
        {
            get { return _Firma; }
            set { _Firma = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Application", "Run application with file name from variable $Startfile with arguments from variable $Programm in normal mode.", new RecordItemIndex(0));
            Host.Local.RunApplication(Startfile, Programm, "", false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 3m to exist. Associated repository item: 'FrmMain_B_ZM.TitleBar300ZusammenfassendeMeldung'", repo.FrmMain_B_ZM.TitleBar300ZusammenfassendeMeldungInfo, new ActionTimeout(180000), new RecordItemIndex(1));
            repo.FrmMain_B_ZM.TitleBar300ZusammenfassendeMeldungInfo.WaitForExists(180000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Zusammenfassende Meldung') on item 'FrmMain_B_ZM.TitleBar300ZusammenfassendeMeldung'.", repo.FrmMain_B_ZM.TitleBar300ZusammenfassendeMeldungInfo, new RecordItemIndex(2));
            Validate.AttributeContains(repo.FrmMain_B_ZM.TitleBar300ZusammenfassendeMeldungInfo, "Text", "Zusammenfassende Meldung");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$Firma) on item 'FrmMain_B_ZM.TitleBar300ZusammenfassendeMeldung'.", repo.FrmMain_B_ZM.TitleBar300ZusammenfassendeMeldungInfo, new RecordItemIndex(3));
            Validate.AttributeContains(repo.FrmMain_B_ZM.TitleBar300ZusammenfassendeMeldungInfo, "Text", Firma);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
