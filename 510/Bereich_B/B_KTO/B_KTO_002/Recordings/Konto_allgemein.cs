///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_KTO_002.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Konto_allgemein recording.
    /// </summary>
    [TestModule("e7760372-c64f-4f00-bdb7-b020682f6573", ModuleType.Recording, 1)]
    public partial class Konto_allgemein : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_KTO_002.B_KTO_002Repository repository.
        /// </summary>
        public static global::B_KTO_002.B_KTO_002Repository repo = global::B_KTO_002.B_KTO_002Repository.Instance;

        static Konto_allgemein instance = new Konto_allgemein();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Konto_allgemein()
        {
            Konto = "4321";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Konto_allgemein Instance
        {
            get { return instance; }
        }

#region Variables

        string _Konto;

        /// <summary>
        /// Gets or sets the value of variable Konto.
        /// </summary>
        [TestVariable("e35659ae-212e-475d-92ca-31ec2616bd74")]
        public string Konto
        {
            get { return _Konto; }
            set { _Konto = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmKto.Text' at Center.", repo.FrmKto.TextInfo, new RecordItemIndex(0));
            repo.FrmKto.Text.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Konto' with focus on 'FrmKto.Text'.", repo.FrmKto.TextInfo, new RecordItemIndex(1));
            repo.FrmKto.Text.PressKeys(Konto);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmKto.Row1Column0' at Center.", repo.FrmKto.Row1Column0Info, new RecordItemIndex(2));
            repo.FrmKto.Row1Column0.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmKto.PicTabs.TabPageAllgemein' at Center.", repo.FrmKto.PicTabs.TabPageAllgemeinInfo, new RecordItemIndex(3));
            repo.FrmKto.PicTabs.TabPageAllgemein.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmKto.Bezeichnung' at Center.", repo.FrmKto.BezeichnungInfo, new RecordItemIndex(4));
            repo.FrmKto.Bezeichnung.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}' with focus on 'FrmKto.Bezeichnung'.", repo.FrmKto.BezeichnungInfo, new RecordItemIndex(5));
            repo.FrmKto.Bezeichnung.EnsureVisible();
            Keyboard.Press("{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'QS Konto ändern 1' with focus on 'FrmKto.Bezeichnung'.", repo.FrmKto.BezeichnungInfo, new RecordItemIndex(6));
            repo.FrmKto.Bezeichnung.EnsureVisible();
            Keyboard.Press("QS Konto ändern 1");
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmKto.Bezeichnung' at Center.", repo.FrmKto.BezeichnungInfo, new RecordItemIndex(7));
            //repo.FrmKto.Bezeichnung.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(8));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='QS Konto ändern 1') on item 'FrmKto.Bezeichnung'.", repo.FrmKto.BezeichnungInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.FrmKto.BezeichnungInfo, "Text", "QS Konto ändern 1");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmKto.Verwendung' at Center.", repo.FrmKto.VerwendungInfo, new RecordItemIndex(10));
            repo.FrmKto.Verwendung.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'p' with focus on 'FrmKto.Verwendung'.", repo.FrmKto.VerwendungInfo, new RecordItemIndex(11));
            repo.FrmKto.Verwendung.EnsureVisible();
            Keyboard.Press("p");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(12));
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'DlgMessageBox.Meldungstext'", repo.DlgMessageBox.MeldungstextInfo, new ActionTimeout(120000), new RecordItemIndex(13));
            repo.DlgMessageBox.MeldungstextInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Verwendung wirklich ändern?\r\n') on item 'DlgMessageBox.Meldungstext'.", repo.DlgMessageBox.MeldungstextInfo, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.DlgMessageBox.MeldungstextInfo, "Text", "Verwendung wirklich ändern?\r\n");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(15));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='P') on item 'FrmKto.Verwendung'.", repo.FrmKto.VerwendungInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.FrmKto.VerwendungInfo, "Text", "P");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
