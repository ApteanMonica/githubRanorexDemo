///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_KTO_004.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Konto_status_aendern recording.
    /// </summary>
    [TestModule("fdfcb681-e1ed-4bc6-bfda-4d5b0da62be9", ModuleType.Recording, 1)]
    public partial class Konto_status_aendern : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_KTO_004.B_KTO_004Repository repository.
        /// </summary>
        public static global::B_KTO_004.B_KTO_004Repository repo = global::B_KTO_004.B_KTO_004Repository.Instance;

        static Konto_status_aendern instance = new Konto_status_aendern();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Konto_status_aendern()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Konto_status_aendern Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='aktiv') on item 'FrmKto.Text1001_Status'.", repo.FrmKto.Text1001_StatusInfo, new RecordItemIndex(0));
            Validate.AttributeEqual(repo.FrmKto.Text1001_StatusInfo, "Text", "aktiv");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmKto.PbCommonStatus' at Center.", repo.FrmKto.PbCommonStatusInfo, new RecordItemIndex(1));
            repo.FrmKto.PbCommonStatus.Click();
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(2));
            Delay.Duration(1000, false);
            
            // CenterRight für Auswahlelement Pfeil
            Report.Log(ReportLevel.Info, "Mouse", "CenterRight für Auswahlelement Pfeil\r\nMouse Left Click item 'FrmKto.CmbKtoStatus' at CenterRight.", repo.FrmKto.CmbKtoStatusInfo, new RecordItemIndex(3));
            repo.FrmKto.CmbKtoStatus.Click(Location.CenterRight);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(4));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'List1000.Status_Geloescht' at Center.", repo.List1000.Status_GeloeschtInfo, new RecordItemIndex(5));
            repo.List1000.Status_Geloescht.Click();
            
            // Workaround, wenn Auswahl mit Kombobox Probleme macht
            //Report.Log(ReportLevel.Info, "Keyboard", "Workaround, wenn Auswahl mit Kombobox Probleme macht\r\nKey 'Down' Press with focus on 'FrmKto.CmbKtoStatus'.", repo.FrmKto.CmbKtoStatusInfo, new RecordItemIndex(6));
            //Keyboard.PrepareFocus(repo.FrmKto.CmbKtoStatus);
            //Keyboard.Press(System.Windows.Forms.Keys.Down, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            // Pfeil nach unten + Enter zur Auswahl von "gelöscht"
            //Report.Log(ReportLevel.Info, "Keyboard", "Pfeil nach unten + Enter zur Auswahl von \"gelöscht\"\r\nKey 'Enter' Press.", new RecordItemIndex(7));
            //Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='gelöscht') on item 'FrmKto.Text1001_Status'.", repo.FrmKto.Text1001_StatusInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.FrmKto.Text1001_StatusInfo, "Text", "gelöscht");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmKto.Speichern_Button' at Center.", repo.FrmKto.Speichern_ButtonInfo, new RecordItemIndex(9));
            repo.FrmKto.Speichern_Button.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='gelöscht') on item 'FrmKto.Text1001_Status'.", repo.FrmKto.Text1001_StatusInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.FrmKto.Text1001_StatusInfo, "Text", "gelöscht");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
