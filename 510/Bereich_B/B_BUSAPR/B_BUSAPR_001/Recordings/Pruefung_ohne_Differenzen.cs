///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace B_BUSAPR_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Pruefung_ohne_Differenzen recording.
    /// </summary>
    [TestModule("9bcaca18-277c-44cd-9110-6fbe703312e0", ModuleType.Recording, 1)]
    public partial class Pruefung_ohne_Differenzen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::B_BUSAPR_001.B_BUSAPR_001Repository repository.
        /// </summary>
        public static global::B_BUSAPR_001.B_BUSAPR_001Repository repo = global::B_BUSAPR_001.B_BUSAPR_001Repository.Instance;

        static Pruefung_ohne_Differenzen instance = new Pruefung_ohne_Differenzen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Pruefung_ohne_Differenzen()
        {
            Jahr_2 = "2017";
            Periode2_von = "1";
            Periode2_bis = "14";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Pruefung_ohne_Differenzen Instance
        {
            get { return instance; }
        }

#region Variables

        string _Jahr_2;

        /// <summary>
        /// Gets or sets the value of variable Jahr_2.
        /// </summary>
        [TestVariable("c71e6bc4-9855-499d-a32c-a523c409a5b8")]
        public string Jahr_2
        {
            get { return _Jahr_2; }
            set { _Jahr_2 = value; }
        }

        string _Periode2_von;

        /// <summary>
        /// Gets or sets the value of variable Periode2_von.
        /// </summary>
        [TestVariable("eb04df1b-f7af-41d2-9d38-3513c5dccd28")]
        public string Periode2_von
        {
            get { return _Periode2_von; }
            set { _Periode2_von = value; }
        }

        string _Periode2_bis;

        /// <summary>
        /// Gets or sets the value of variable Periode2_bis.
        /// </summary>
        [TestVariable("bdbc18d9-72b7-43f9-8cc0-e4507886e763")]
        public string Periode2_bis
        {
            get { return _Periode2_bis; }
            set { _Periode2_bis = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'FrmMain.Jahr'.", repo.FrmMain.JahrInfo, new RecordItemIndex(0));
            Keyboard.PrepareFocus(repo.FrmMain.Jahr);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmMain.Jahr' at Center.", repo.FrmMain.JahrInfo, new RecordItemIndex(1));
            //repo.FrmMain.Jahr.DoubleClick();
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press.", new RecordItemIndex(2));
            //Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Jahr_2' with focus on 'FrmMain.Jahr'.", repo.FrmMain.JahrInfo, new RecordItemIndex(3));
            repo.FrmMain.Jahr.PressKeys(Jahr_2);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(4));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(5));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'FrmMain.PeriodeVon'.", repo.FrmMain.PeriodeVonInfo, new RecordItemIndex(6));
            Keyboard.PrepareFocus(repo.FrmMain.PeriodeVon);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmMain.PeriodeVon' at Center.", repo.FrmMain.PeriodeVonInfo, new RecordItemIndex(7));
            //repo.FrmMain.PeriodeVon.DoubleClick();
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press with focus on 'FrmMain.PeriodeVon'.", repo.FrmMain.PeriodeVonInfo, new RecordItemIndex(8));
            //Keyboard.PrepareFocus(repo.FrmMain.PeriodeVon);
            //Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(9));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(10));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'FrmMain.Bis'.", repo.FrmMain.BisInfo, new RecordItemIndex(11));
            Keyboard.PrepareFocus(repo.FrmMain.Bis);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmMain.Bis' at Center.", repo.FrmMain.BisInfo, new RecordItemIndex(12));
            //repo.FrmMain.Bis.DoubleClick();
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press with focus on 'FrmMain.Bis'.", repo.FrmMain.BisInfo, new RecordItemIndex(13));
            //Keyboard.PrepareFocus(repo.FrmMain.Bis);
            //Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press with focus on 'FrmMain.Bis'.", repo.FrmMain.BisInfo, new RecordItemIndex(14));
            Keyboard.PrepareFocus(repo.FrmMain.Bis);
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Jahr_2) on item 'FrmMain.Jahr'.", repo.FrmMain.JahrInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.FrmMain.JahrInfo, "Text", Jahr_2);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='') on item 'FrmMain.PeriodeVon'.", repo.FrmMain.PeriodeVonInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.FrmMain.PeriodeVonInfo, "Text", "");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='') on item 'FrmMain.Bis'.", repo.FrmMain.BisInfo, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.FrmMain.BisInfo, "Text", "");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmMain.PbStart' at Center.", repo.FrmMain.PbStartInfo, new RecordItemIndex(18));
            repo.FrmMain.PbStart.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 7m to exist. Associated repository item: 'DlgMessageBox.LabelMeldungstext'", repo.DlgMessageBox.LabelMeldungstextInfo, new ActionTimeout(420000), new RecordItemIndex(19));
            repo.DlgMessageBox.LabelMeldungstextInfo.WaitForExists(420000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Saldenprüfung beendet !') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(20));
            Validate.AttributeEqual(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Saldenprüfung beendet !");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(21));
            repo.DlgMessageBox.Button0.Click();
            
            // Periode von-bis wird erst nach Ausführen der Prüfung in Maske befüllt
            Report.Log(ReportLevel.Info, "Validation", "Periode von-bis wird erst nach Ausführen der Prüfung in Maske befüllt\r\nValidating AttributeEqual (Text=$Periode2_von) on item 'FrmMain.PeriodeVon'.", repo.FrmMain.PeriodeVonInfo, new RecordItemIndex(22));
            Validate.AttributeEqual(repo.FrmMain.PeriodeVonInfo, "Text", Periode2_von);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Periode2_bis) on item 'FrmMain.Bis'.", repo.FrmMain.BisInfo, new RecordItemIndex(23));
            Validate.AttributeEqual(repo.FrmMain.BisInfo, "Text", Periode2_bis);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
