///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace L_KMSE_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The KOSchein_laden recording.
    /// </summary>
    [TestModule("2d57d7d9-fe08-4c1d-838f-3401021e4776", ModuleType.Recording, 1)]
    public partial class KOSchein_laden : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::L_KMSE_001.L_KMSE_001Repository repository.
        /// </summary>
        public static global::L_KMSE_001.L_KMSE_001Repository repo = global::L_KMSE_001.L_KMSE_001Repository.Instance;

        static KOSchein_laden instance = new KOSchein_laden();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public KOSchein_laden()
        {
            Lager = "";
            Warenempf = "";
            Auftrag = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static KOSchein_laden Instance
        {
            get { return instance; }
        }

#region Variables

        string _Lager;

        /// <summary>
        /// Gets or sets the value of variable Lager.
        /// </summary>
        [TestVariable("df05e116-768f-4731-a496-b1d4b5858aa4")]
        public string Lager
        {
            get { return _Lager; }
            set { _Lager = value; }
        }

        string _Warenempf;

        /// <summary>
        /// Gets or sets the value of variable Warenempf.
        /// </summary>
        [TestVariable("6a0fa0f4-7c59-4dfb-b406-8027b77694b6")]
        public string Warenempf
        {
            get { return _Warenempf; }
            set { _Warenempf = value; }
        }

        string _Auftrag;

        /// <summary>
        /// Gets or sets the value of variable Auftrag.
        /// </summary>
        [TestVariable("b5c903b8-8831-4863-adda-b2fdd727976e")]
        public string Auftrag
        {
            get { return _Auftrag; }
            set { _Auftrag = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Checked='True') on item 'TblKmse.RbLadenErstellen'.", repo.TblKmse.RbLadenErstellenInfo, new RecordItemIndex(0));
            Validate.AttributeEqual(repo.TblKmse.RbLadenErstellenInfo, "Checked", "True");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Lager' with focus on 'TblKmse.LagerVon'.", repo.TblKmse.LagerVonInfo, new RecordItemIndex(1));
            repo.TblKmse.LagerVon.PressKeys(Lager);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press with focus on 'TblKmse.LagerVon'.", repo.TblKmse.LagerVonInfo, new RecordItemIndex(2));
            Keyboard.PrepareFocus(repo.TblKmse.LagerVon);
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibleValue=$Lager) on item 'TblKmse.LagerBis'.", repo.TblKmse.LagerBisInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.TblKmse.LagerBisInfo, "AccessibleValue", Lager);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Warenempf' with focus on 'TblKmse.Warenempf'.", repo.TblKmse.WarenempfInfo, new RecordItemIndex(4));
            repo.TblKmse.Warenempf.PressKeys(Warenempf);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press with focus on 'TblKmse.Warenempf'.", repo.TblKmse.WarenempfInfo, new RecordItemIndex(5));
            Keyboard.PrepareFocus(repo.TblKmse.Warenempf);
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblKmse.PbDataAccessLoad' at Center.", repo.TblKmse.PbDataAccessLoadInfo, new RecordItemIndex(6));
            repo.TblKmse.PbDataAccessLoad.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibleValue=$Auftrag) on item 'TblKmse.ColAufkNrRow2'.", repo.TblKmse.ColAufkNrRow2Info, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.TblKmse.ColAufkNrRow2Info, "AccessibleValue", Auftrag);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}' with focus on 'TblKmse.Warenempf'.", repo.TblKmse.WarenempfInfo, new RecordItemIndex(8));
            repo.TblKmse.Warenempf.PressKeys("{Back}{Back}{Back}{Back}{Back}{Back}{Back}{Back}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press with focus on 'TblKmse.Warenempf'.", repo.TblKmse.WarenempfInfo, new RecordItemIndex(9));
            Keyboard.PrepareFocus(repo.TblKmse.Warenempf);
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Auftrag' with focus on 'TblKmse.Nummer'.", repo.TblKmse.NummerInfo, new RecordItemIndex(10));
            repo.TblKmse.Nummer.PressKeys(Auftrag);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press with focus on 'TblKmse.Nummer'.", repo.TblKmse.NummerInfo, new RecordItemIndex(11));
            Keyboard.PrepareFocus(repo.TblKmse.Nummer);
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblKmse.PbDataAccessLoad' at Center.", repo.TblKmse.PbDataAccessLoadInfo, new RecordItemIndex(12));
            repo.TblKmse.PbDataAccessLoad.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
