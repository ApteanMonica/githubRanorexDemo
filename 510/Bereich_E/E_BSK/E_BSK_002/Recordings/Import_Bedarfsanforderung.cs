///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace E_BSK_002.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Import_Bedarfsanforderung recording.
    /// </summary>
    [TestModule("2f253280-78e5-4bcd-8e95-fa49d62f4f3f", ModuleType.Recording, 1)]
    public partial class Import_Bedarfsanforderung : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::E_BSK_002.E_BSK_002Repository repository.
        /// </summary>
        public static global::E_BSK_002.E_BSK_002Repository repo = global::E_BSK_002.E_BSK_002Repository.Instance;

        static Import_Bedarfsanforderung instance = new Import_Bedarfsanforderung();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Import_Bedarfsanforderung()
        {
            Artikel3 = "100012";
            Import_Ende = "Keine weiteren Import-Daten vorhanden";
            Bedarfsanforderung = "BA2100001";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Import_Bedarfsanforderung Instance
        {
            get { return instance; }
        }

#region Variables

        string _Artikel3;

        /// <summary>
        /// Gets or sets the value of variable Artikel3.
        /// </summary>
        [TestVariable("62109d80-428b-4307-8692-7225b2dd6bc2")]
        public string Artikel3
        {
            get { return _Artikel3; }
            set { _Artikel3 = value; }
        }

        string _Import_Ende;

        /// <summary>
        /// Gets or sets the value of variable Import_Ende.
        /// </summary>
        [TestVariable("70efc15d-0d96-4a5d-a2ba-4e94a8861e40")]
        public string Import_Ende
        {
            get { return _Import_Ende; }
            set { _Import_Ende = value; }
        }

        string _Bedarfsanforderung;

        /// <summary>
        /// Gets or sets the value of variable Bedarfsanforderung.
        /// </summary>
        [TestVariable("38741ec2-ee03-4725-b8b8-df58d5525e5e")]
        public string Bedarfsanforderung
        {
            get { return _Bedarfsanforderung; }
            set { _Bedarfsanforderung = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBestellung.PbImportMenu' at Center.", repo.MdiBestellung.PbImportMenuInfo, new RecordItemIndex(0));
            repo.MdiBestellung.PbImportMenu.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'EBSK.Bedarfsanforderung' at Center.", repo.EBSK.BedarfsanforderungInfo, new RecordItemIndex(1));
            repo.EBSK.Bedarfsanforderung.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeRegex (AccessibleValue~'Import von Positionen aus Bedarfsanforderungen...') on item 'DlgPositionsImport.TitleBar100ImportVonPositionenAu'.", repo.DlgPositionsImport.TitleBar100ImportVonPositionenAuInfo, new RecordItemIndex(2));
            Validate.AttributeRegex(repo.DlgPositionsImport.TitleBar100ImportVonPositionenAuInfo, "AccessibleValue", new Regex("Import von Positionen aus Bedarfsanforderungen..."));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgPositionsImport.PbLaden' at Center.", repo.DlgPositionsImport.PbLadenInfo, new RecordItemIndex(3));
            repo.DlgPositionsImport.PbLaden.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Bedarfsanforderung) on item 'DlgPositionsImport.CColumnRow13'.", repo.DlgPositionsImport.CColumnRow13Info, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.DlgPositionsImport.CColumnRow13Info, "Text", Bedarfsanforderung);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Artikel3) on item 'DlgPositionsImport.CColumnRow11'.", repo.DlgPositionsImport.CColumnRow11Info, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.DlgPositionsImport.CColumnRow11Info, "Text", Artikel3);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgPositionsImport.Row1Column0' at Center.", repo.DlgPositionsImport.Row1Column0Info, new RecordItemIndex(6));
            repo.DlgPositionsImport.Row1Column0.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgPositionsImport.PbStandard' at Center.", repo.DlgPositionsImport.PbStandardInfo, new RecordItemIndex(7));
            repo.DlgPositionsImport.PbStandard.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'MdiBestellung.FrmBsp.Text'", repo.MdiBestellung.FrmBsp.TextInfo, new ActionTimeout(30000), new RecordItemIndex(8));
            repo.MdiBestellung.FrmBsp.TextInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Bedarfsanforderungsposition') on item 'MdiBestellung.FrmBsp.ColBezeichnungRow1'.", repo.MdiBestellung.FrmBsp.ColBezeichnungRow1Info, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.MdiBestellung.FrmBsp.ColBezeichnungRow1Info, "Text", "Bedarfsanforderungsposition");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='3,500') on item 'MdiBestellung.FrmBsp.Text'.", repo.MdiBestellung.FrmBsp.TextInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.MdiBestellung.FrmBsp.TextInfo, "Text", "3,500");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBestellung.PbDataAccessSave' at Center.", repo.MdiBestellung.PbDataAccessSaveInfo, new RecordItemIndex(11));
            repo.MdiBestellung.PbDataAccessSave.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeRegex (AccessibleValue~'Lieferantenartikel anlegen...') on item 'DlgArlfAuto.TitleBar100LieferantenartikelAnlege'.", repo.DlgArlfAuto.TitleBar100LieferantenartikelAnlegeInfo, new RecordItemIndex(12));
            Validate.AttributeRegex(repo.DlgArlfAuto.TitleBar100LieferantenartikelAnlegeInfo, "AccessibleValue", new Regex("Lieferantenartikel anlegen..."));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100LieferantenartikelAnlegen.PbSpeichern' at Center.", repo.Form100LieferantenartikelAnlegen.PbSpeichernInfo, new RecordItemIndex(13));
            repo.Form100LieferantenartikelAnlegen.PbSpeichern.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'das Lieferdatum liegt VOR dem Bestelldatum') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(14));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "das Lieferdatum liegt VOR dem Bestelldatum");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(15));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$Import_Ende) on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(16));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", Import_Ende);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(17));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBestellung.PbPositionBeenden' at Center.", repo.MdiBestellung.PbPositionBeendenInfo, new RecordItemIndex(18));
            repo.MdiBestellung.PbPositionBeenden.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
