///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace E_BSK_002.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Import_Auftragsposition recording.
    /// </summary>
    [TestModule("29ace05f-de31-421c-aff2-fd28771591eb", ModuleType.Recording, 1)]
    public partial class Import_Auftragsposition : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::E_BSK_002.E_BSK_002Repository repository.
        /// </summary>
        public static global::E_BSK_002.E_BSK_002Repository repo = global::E_BSK_002.E_BSK_002Repository.Instance;

        static Import_Auftragsposition instance = new Import_Auftragsposition();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Import_Auftragsposition()
        {
            Auftragsnummer = "A21/00014";
            Import_Ende = "Keine weiteren Import-Daten vorhanden";
            Lieferant = "300023";
            Warenadresse = "200013";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Import_Auftragsposition Instance
        {
            get { return instance; }
        }

#region Variables

        string _Import_Ende;

        /// <summary>
        /// Gets or sets the value of variable Import_Ende.
        /// </summary>
        [TestVariable("775519a2-deca-4b1e-b81d-90627e24dd88")]
        public string Import_Ende
        {
            get { return _Import_Ende; }
            set { _Import_Ende = value; }
        }

        string _Lieferant;

        /// <summary>
        /// Gets or sets the value of variable Lieferant.
        /// </summary>
        [TestVariable("fdb17d89-7c2a-4cc8-8f06-7efa0c6719e4")]
        public string Lieferant
        {
            get { return _Lieferant; }
            set { _Lieferant = value; }
        }

        string _Warenadresse;

        /// <summary>
        /// Gets or sets the value of variable Warenadresse.
        /// </summary>
        [TestVariable("16917653-73f3-4b0e-8c90-fef7bc98076c")]
        public string Warenadresse
        {
            get { return _Warenadresse; }
            set { _Warenadresse = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Auftragsnummer.
        /// </summary>
        [TestVariable("b60331e5-fbfe-4d8a-8544-909adcddd3c0")]
        public string Auftragsnummer
        {
            get { return repo.Auftragsnummer; }
            set { repo.Auftragsnummer = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBestellung.PbNew' at Center.", repo.MdiBestellung.PbNewInfo, new RecordItemIndex(0));
            repo.MdiBestellung.PbNew.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBestellung.PbImportMenu' at Center.", repo.MdiBestellung.PbImportMenuInfo, new RecordItemIndex(1));
            repo.MdiBestellung.PbImportMenu.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'EBSK.KundenAuftrag' at Center.", repo.EBSK.KundenAuftragInfo, new RecordItemIndex(2));
            repo.EBSK.KundenAuftrag.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgPositionsImport.LVTyp' at Center.", repo.DlgPositionsImport.LVTypInfo, new RecordItemIndex(3));
            repo.DlgPositionsImport.LVTyp.Click();
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute AccessibleValue to '$Auftragsnummer' on item 'DlgPositionsImport.LVTyp'.", repo.DlgPositionsImport.LVTypInfo, new RecordItemIndex(4));
            repo.DlgPositionsImport.LVTyp.Element.SetAttributeValue("AccessibleValue", Auftragsnummer);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Auftragsnummer' with focus on 'DlgPositionsImport.LVTyp'.", repo.DlgPositionsImport.LVTypInfo, new RecordItemIndex(5));
            //repo.DlgPositionsImport.LVTyp.PressKeys(Auftragsnummer);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'DlgPositionsImport.LVTyp'.", repo.DlgPositionsImport.LVTypInfo, new RecordItemIndex(6));
            repo.DlgPositionsImport.LVTyp.PressKeys("{Tab}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgPositionsImport.Text' at Center.", repo.DlgPositionsImport.TextInfo, new RecordItemIndex(7));
            repo.DlgPositionsImport.Text.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad3}{NumPad0}{NumPad0}{NumPad0}{NumPad2}{NumPad3}' with focus on 'DlgPositionsImport.Text'.", repo.DlgPositionsImport.TextInfo, new RecordItemIndex(8));
            repo.DlgPositionsImport.Text.EnsureVisible();
            Keyboard.Press("{NumPad3}{NumPad0}{NumPad0}{NumPad0}{NumPad2}{NumPad3}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'DlgPositionsImport.Text'.", repo.DlgPositionsImport.TextInfo, new RecordItemIndex(9));
            repo.DlgPositionsImport.Text.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgPositionsImport.PbLaden' at Center.", repo.DlgPositionsImport.PbLadenInfo, new RecordItemIndex(10));
            repo.DlgPositionsImport.PbLaden.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Auftragsnummer) on item 'DlgPositionsImport.CColumnRow14'.", repo.DlgPositionsImport.CColumnRow14Info, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.DlgPositionsImport.CColumnRow14Info, "Text", Auftragsnummer);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'DlgPositionsImport.Row1Column0' at Center.", repo.DlgPositionsImport.Row1Column0Info, new RecordItemIndex(12));
            repo.DlgPositionsImport.Row1Column0.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgPositionsImport.CbPOSITIONAUTOMATISCH' at Center.", repo.DlgPositionsImport.CbPOSITIONAUTOMATISCHInfo, new RecordItemIndex(13));
            repo.DlgPositionsImport.CbPOSITIONAUTOMATISCH.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgPositionsImport.PbStandard' at Center.", repo.DlgPositionsImport.PbStandardInfo, new RecordItemIndex(14));
            repo.DlgPositionsImport.PbStandard.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeRegex (AccessibleValue~'Auswahl Bestellung') on item 'DlgBsk.TitleBar100AuswahlBestellung'.", repo.DlgBsk.TitleBar100AuswahlBestellungInfo, new RecordItemIndex(15));
            Validate.AttributeRegex(repo.DlgBsk.TitleBar100AuswahlBestellungInfo, "AccessibleValue", new Regex("Auswahl Bestellung"));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Lieferant) on item 'DlgBsk.Lieferant'.", repo.DlgBsk.LieferantInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.DlgBsk.LieferantInfo, "Text", Lieferant);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgBsk.PbNeuVerwalten' at Center.", repo.DlgBsk.PbNeuVerwaltenInfo, new RecordItemIndex(17));
            repo.DlgBsk.PbNeuVerwalten.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBestellung.Warenadresse' at Center.", repo.MdiBestellung.WarenadresseInfo, new RecordItemIndex(18));
            repo.MdiBestellung.Warenadresse.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Warenadresse) on item 'MdiBestellung.Warenadresse'.", repo.MdiBestellung.WarenadresseInfo, new RecordItemIndex(19));
            Validate.AttributeEqual(repo.MdiBestellung.WarenadresseInfo, "Text", Warenadresse);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBestellung.TabPagePositionen' at Center.", repo.MdiBestellung.TabPagePositionenInfo, new RecordItemIndex(20));
            repo.MdiBestellung.TabPagePositionen.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'DlgMessageBox.BestellungenVerwalten'", repo.DlgMessageBox.BestellungenVerwaltenInfo, new ActionTimeout(10000), new RecordItemIndex(21));
            repo.DlgMessageBox.BestellungenVerwaltenInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Kontierung aus der Ursprungsposition') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(22));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Kontierung aus der Ursprungsposition");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(23));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Auftragsposition') on item 'MdiBestellung.FrmBsp.ColBezeichnungRow1'.", repo.MdiBestellung.FrmBsp.ColBezeichnungRow1Info, new RecordItemIndex(24));
            Validate.AttributeEqual(repo.MdiBestellung.FrmBsp.ColBezeichnungRow1Info, "Text", "Auftragsposition");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBestellung.PbDataAccessSave' at Center.", repo.MdiBestellung.PbDataAccessSaveInfo, new RecordItemIndex(25));
            repo.MdiBestellung.PbDataAccessSave.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeRegex (AccessibleValue~'Lieferantenartikel anlegen...') on item 'DlgArlfAuto.TitleBar100LieferantenartikelAnlege'.", repo.DlgArlfAuto.TitleBar100LieferantenartikelAnlegeInfo, new RecordItemIndex(26));
            Validate.AttributeRegex(repo.DlgArlfAuto.TitleBar100LieferantenartikelAnlegeInfo, "AccessibleValue", new Regex("Lieferantenartikel anlegen..."));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Form100LieferantenartikelAnlegen.PbSpeichern' at Center.", repo.Form100LieferantenartikelAnlegen.PbSpeichernInfo, new RecordItemIndex(27));
            repo.Form100LieferantenartikelAnlegen.PbSpeichern.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'das Lieferdatum liegt VOR dem Bestelldatum') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(28));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "das Lieferdatum liegt VOR dem Bestelldatum");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(29));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$Import_Ende) on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(30));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", Import_Ende);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(31));
            repo.DlgMessageBox.Button0.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
