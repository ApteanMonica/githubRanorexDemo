///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace E_ABRK_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Rahmenposition recording.
    /// </summary>
    [TestModule("3b105565-9c18-48a7-a61c-3e3be55a0f57", ModuleType.Recording, 1)]
    public partial class Rahmenposition : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::E_ABRK_001.E_ABRK_001Repository repository.
        /// </summary>
        public static global::E_ABRK_001.E_ABRK_001Repository repo = global::E_ABRK_001.E_ABRK_001Repository.Instance;

        static Rahmenposition instance = new Rahmenposition();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Rahmenposition()
        {
            Preis1 = "7,000";
            Preis2 = "6,000";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Rahmenposition Instance
        {
            get { return instance; }
        }

#region Variables

        string _Preis1;

        /// <summary>
        /// Gets or sets the value of variable Preis1.
        /// </summary>
        [TestVariable("9ab51fef-dda3-49a6-9335-dae121fd8f11")]
        public string Preis1
        {
            get { return _Preis1; }
            set { _Preis1 = value; }
        }

        string _Preis2;

        /// <summary>
        /// Gets or sets the value of variable Preis2.
        /// </summary>
        [TestVariable("e4fdaafc-5c54-47f9-a872-01ea413cd7d1")]
        public string Preis2
        {
            get { return _Preis2; }
            set { _Preis2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='ABRK_TEST') on item 'FrmAbrk.PicTabs.IBanf_Pos'.", repo.FrmAbrk.PicTabs.IBanf_PosInfo, new RecordItemIndex(0));
            Validate.AttributeEqual(repo.FrmAbrk.PicTabs.IBanf_PosInfo, "Text", "ABRK_TEST");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAbrk.PicTabs.Artikel1' at Center.", repo.FrmAbrk.PicTabs.Artikel1Info, new RecordItemIndex(1));
            repo.FrmAbrk.PicTabs.Artikel1.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad1}{NumPad0}{NumPad0}{NumPad0}{NumPad3}{NumPad5}{Tab}' with focus on 'FrmAbrk.PicTabs.Artikel1'.", repo.FrmAbrk.PicTabs.Artikel1Info, new RecordItemIndex(2));
            repo.FrmAbrk.PicTabs.Artikel1.EnsureVisible();
            Keyboard.Press("{NumPad1}{NumPad0}{NumPad0}{NumPad0}{NumPad3}{NumPad5}{Tab}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad2}{Tab}' with focus on 'FrmAbrk.PicTabs.Menge'.", repo.FrmAbrk.PicTabs.MengeInfo, new RecordItemIndex(3));
            repo.FrmAbrk.PicTabs.Menge.EnsureVisible();
            Keyboard.Press("{NumPad2}{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Preis1) on item 'Preis'.", repo.PreisInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.PreisInfo, "Text", Preis1);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='2,00') on item 'FrmAbrk.PicTabs.Maximalmenge'.", repo.FrmAbrk.PicTabs.MaximalmengeInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.FrmAbrk.PicTabs.MaximalmengeInfo, "Text", "2,00");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmAbrk.PicTabs.Menge' at Center.", repo.FrmAbrk.PicTabs.MengeInfo, new RecordItemIndex(6));
            repo.FrmAbrk.PicTabs.Menge.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad1}{NumPad5}' with focus on 'FrmAbrk.PicTabs.Menge'.", repo.FrmAbrk.PicTabs.MengeInfo, new RecordItemIndex(7));
            repo.FrmAbrk.PicTabs.Menge.EnsureVisible();
            Keyboard.Press("{NumPad1}{NumPad5}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmAbrk.PicTabs.Menge'.", repo.FrmAbrk.PicTabs.MengeInfo, new RecordItemIndex(8));
            repo.FrmAbrk.PicTabs.Menge.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Preis2) on item 'Preis'.", repo.PreisInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.PreisInfo, "Text", Preis2);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'Preis' at Center.", repo.PreisInfo, new RecordItemIndex(10));
            repo.Preis.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad5}' with focus on 'Preis'.", repo.PreisInfo, new RecordItemIndex(11));
            repo.Preis.EnsureVisible();
            Keyboard.Press("{NumPad5}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'Preis'.", repo.PreisInfo, new RecordItemIndex(12));
            repo.Preis.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAbrk.PicTabs.Meldemenge' at Center.", repo.FrmAbrk.PicTabs.MeldemengeInfo, new RecordItemIndex(13));
            repo.FrmAbrk.PicTabs.Meldemenge.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad4}' with focus on 'FrmAbrk.PicTabs.Meldemenge'.", repo.FrmAbrk.PicTabs.MeldemengeInfo, new RecordItemIndex(14));
            repo.FrmAbrk.PicTabs.Meldemenge.PressKeys("{NumPad4}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmAbrk.PicTabs.Meldemenge'.", repo.FrmAbrk.PicTabs.MeldemengeInfo, new RecordItemIndex(15));
            repo.FrmAbrk.PicTabs.Meldemenge.PressKeys("{Tab}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad1}{NumPad6}' with focus on 'FrmAbrk.PicTabs.Maximalmenge'.", repo.FrmAbrk.PicTabs.MaximalmengeInfo, new RecordItemIndex(16));
            repo.FrmAbrk.PicTabs.Maximalmenge.EnsureVisible();
            Keyboard.Press("{NumPad1}{NumPad6}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmAbrk.PicTabs.Maximalmenge'.", repo.FrmAbrk.PicTabs.MaximalmengeInfo, new RecordItemIndex(17));
            repo.FrmAbrk.PicTabs.Maximalmenge.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmAbrk.PbDataAccessSave' at Center.", repo.FrmAbrk.PbDataAccessSaveInfo, new RecordItemIndex(18));
            repo.FrmAbrk.PbDataAccessSave.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'FrmAbrk.PicTabs.Row1Column0'.", repo.FrmAbrk.PicTabs.Row1Column0Info, new RecordItemIndex(19));
            Validate.Exists(repo.FrmAbrk.PicTabs.Row1Column0Info);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
