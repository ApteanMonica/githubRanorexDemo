///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace E_BAK_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Positionen_erfassen recording.
    /// </summary>
    [TestModule("7cb1799f-8f55-4e36-a8c5-f3ab9cd65158", ModuleType.Recording, 1)]
    public partial class Positionen_erfassen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::E_BAK_001.E_BAK_001Repository repository.
        /// </summary>
        public static global::E_BAK_001.E_BAK_001Repository repo = global::E_BAK_001.E_BAK_001Repository.Instance;

        static Positionen_erfassen instance = new Positionen_erfassen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Positionen_erfassen()
        {
            Artikel1 = "100012";
            Artikel2 = "100013";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Positionen_erfassen Instance
        {
            get { return instance; }
        }

#region Variables

        string _Artikel1;

        /// <summary>
        /// Gets or sets the value of variable Artikel1.
        /// </summary>
        [TestVariable("cfe2055f-e48b-4441-a52f-b0b378c7332f")]
        public string Artikel1
        {
            get { return _Artikel1; }
            set { _Artikel1 = value; }
        }

        string _Artikel2;

        /// <summary>
        /// Gets or sets the value of variable Artikel2.
        /// </summary>
        [TestVariable("106a4e28-ac6b-47d4-8857-139979b08d54")]
        public string Artikel2
        {
            get { return _Artikel2; }
            set { _Artikel2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBak.Maximieren' at Center.", repo.MdiBak.MaximierenInfo, new RecordItemIndex(0));
            repo.MdiBak.Maximieren.Click();
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBak.PbStandard' at Center.", repo.MdiBak.PbStandardInfo, new RecordItemIndex(1));
            //repo.MdiBak.PbStandard.Click();
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'EBAK.Eingabehilfe' at Center.", repo.EBAK.EingabehilfeInfo, new RecordItemIndex(2));
            //repo.EBAK.Eingabehilfe.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiBak.PbEHilfeEingabehilfe' at Center.", repo.MdiBak.PbEHilfeEingabehilfeInfo, new RecordItemIndex(3));
            repo.MdiBak.PbEHilfeEingabehilfe.Click();
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key 'Alt+G' Press with focus on 'MdiBak'.", repo.MdiBak.SelfInfo, new RecordItemIndex(4));
            //Keyboard.PrepareFocus(repo.MdiBak.Self);
            //Keyboard.Press(System.Windows.Forms.Keys.G | System.Windows.Forms.Keys.Alt, 34, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(5));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Eingabehilfe') on item 'FrmEingabe.TitleBar100EingabehilfeFuerAnforde'.", repo.FrmEingabe.TitleBar100EingabehilfeFuerAnfordeInfo, new RecordItemIndex(6));
            Validate.AttributeContains(repo.FrmEingabe.TitleBar100EingabehilfeFuerAnfordeInfo, "Text", "Eingabehilfe");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmEingabe.ColAgrCdRow1' at Center.", repo.FrmEingabe.ColAgrCdRow1Info, new RecordItemIndex(7));
            repo.FrmEingabe.ColAgrCdRow1.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='EK') on item 'FrmEingabe.ColAgrCdRow1'.", repo.FrmEingabe.ColAgrCdRow1Info, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.FrmEingabe.ColAgrCdRow1Info, "Text", "EK");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Artikel1) on item 'FrmEingabe.FlexGrid.ColArtNrRow1'.", repo.FrmEingabe.FlexGrid.ColArtNrRow1Info, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.FrmEingabe.FlexGrid.ColArtNrRow1Info, "Text", Artikel1);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmEingabe.FlexGrid.ColMengeRow1' at Center.", repo.FrmEingabe.FlexGrid.ColMengeRow1Info, new RecordItemIndex(10));
            repo.FrmEingabe.FlexGrid.ColMengeRow1.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad3}' with focus on 'FrmEingabe.FlexGrid.ColMengeRow1'.", repo.FrmEingabe.FlexGrid.ColMengeRow1Info, new RecordItemIndex(11));
            repo.FrmEingabe.FlexGrid.ColMengeRow1.EnsureVisible();
            Keyboard.Press("{NumPad3}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmEingabe.FlexGrid.ColMengeRow1'.", repo.FrmEingabe.FlexGrid.ColMengeRow1Info, new RecordItemIndex(12));
            repo.FrmEingabe.FlexGrid.ColMengeRow1.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmEingabe.ColAgrCdRow2' at Center.", repo.FrmEingabe.ColAgrCdRow2Info, new RecordItemIndex(13));
            repo.FrmEingabe.ColAgrCdRow2.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='VK') on item 'FrmEingabe.ColAgrCdRow2'.", repo.FrmEingabe.ColAgrCdRow2Info, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.FrmEingabe.ColAgrCdRow2Info, "Text", "VK");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Artikel2) on item 'FrmEingabe.FlexGrid.ColArtNrRow2'.", repo.FrmEingabe.FlexGrid.ColArtNrRow2Info, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.FrmEingabe.FlexGrid.ColArtNrRow2Info, "Text", Artikel2);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmEingabe.FlexGrid.ColMengeRow2' at Center.", repo.FrmEingabe.FlexGrid.ColMengeRow2Info, new RecordItemIndex(16));
            repo.FrmEingabe.FlexGrid.ColMengeRow2.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad3}' with focus on 'FrmEingabe.FlexGrid.ColMengeRow2'.", repo.FrmEingabe.FlexGrid.ColMengeRow2Info, new RecordItemIndex(17));
            repo.FrmEingabe.FlexGrid.ColMengeRow2.EnsureVisible();
            Keyboard.Press("{NumPad3}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmEingabe'.", repo.FrmEingabe.SelfInfo, new RecordItemIndex(18));
            repo.FrmEingabe.Self.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'DlgMessageBox.BedarfsanforderungErfassen'", repo.DlgMessageBox.BedarfsanforderungErfassenInfo, new ActionTimeout(30000), new RecordItemIndex(19));
            repo.DlgMessageBox.BedarfsanforderungErfassenInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Wollen Sie trotzdem die gesamte Menge anfordern?') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(20));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Wollen Sie trotzdem die gesamte Menge anfordern?");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(21));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmEingabe.PbDataAccessSave' at Center.", repo.FrmEingabe.PbDataAccessSaveInfo, new RecordItemIndex(22));
            repo.FrmEingabe.PbDataAccessSave.Click();
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Keine weiteren Import-Daten vorhanden') on item 'BedarfsanforderungErfassen.HinweisKeineWeiterenImportDatenVor'.", repo.BedarfsanforderungErfassen.HinweisKeineWeiterenImportDatenVorInfo, new RecordItemIndex(23));
            //Validate.AttributeContains(repo.BedarfsanforderungErfassen.HinweisKeineWeiterenImportDatenVorInfo, "Text", "Keine weiteren Import-Daten vorhanden");
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'BedarfsanforderungErfassen.ButtonOK' at Center.", repo.BedarfsanforderungErfassen.ButtonOKInfo, new RecordItemIndex(24));
            //repo.BedarfsanforderungErfassen.ButtonOK.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
