///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace E_FIBU_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Druck recording.
    /// </summary>
    [TestModule("f7721b8a-4769-490c-8a06-9da5cce9a177", ModuleType.Recording, 1)]
    public partial class Druck : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::E_FIBU_001.E_FIBU_001Repository repository.
        /// </summary>
        public static global::E_FIBU_001.E_FIBU_001Repository repo = global::E_FIBU_001.E_FIBU_001Repository.Instance;

        static Druck instance = new Druck();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Druck()
        {
            Rechnung = "301900003";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Druck Instance
        {
            get { return instance; }
        }

#region Variables

        string _Rechnung;

        /// <summary>
        /// Gets or sets the value of variable Rechnung.
        /// </summary>
        [TestVariable("6069ee72-71a4-448e-a379-5aa5ab548a5a")]
        public string Rechnung
        {
            get { return _Rechnung; }
            set { _Rechnung = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgDrucken.OEffnen' at CenterRight.", repo.DlgDrucken.OEffnenInfo, new RecordItemIndex(0));
            repo.DlgDrucken.OEffnen.Click(Location.CenterRight);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'List1000.MicrosoftPrintToPDF' at Center.", repo.List1000.MicrosoftPrintToPDFInfo, new RecordItemIndex(1));
            repo.List1000.MicrosoftPrintToPDF.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgDrucken.PbExport' at CenterRight.", repo.DlgDrucken.PbExportInfo, new RecordItemIndex(2));
            repo.DlgDrucken.PbExport.Click(Location.CenterRight);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'PbExportItems.Tabelle' at Center.", repo.PbExportItems.TabelleInfo, new RecordItemIndex(3));
            repo.PbExportItems.Tabelle.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibleValue=$Rechnung) on item 'TblDrucken.CColumnRow1'.", repo.TblDrucken.CColumnRow1Info, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.TblDrucken.CColumnRow1Info, "AccessibleValue", Rechnung);
            
            Report.Log(ReportLevel.Info, "Application", "Closing application containing item 'TblDrucken.TitleBar100Protokoll'.", repo.TblDrucken.TitleBar100ProtokollInfo, new RecordItemIndex(5));
            Host.Current.CloseApplication(repo.TblDrucken.TitleBar100Protokoll, new Duration(0));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgDrucken.PbOk' at Center.", repo.DlgDrucken.PbOkInfo, new RecordItemIndex(6));
            repo.DlgDrucken.PbOk.Click();
            
            // BAR: Wait for auf von 1 auf 2 Minuten erhöht
            Report.Log(ReportLevel.Info, "Wait", "BAR: Wait for auf von 1 auf 2 Minuten erhöht\r\nWaiting 2m to exist. Associated repository item: 'DruckausgabeSpeichernUnter.ToolBar1001'", repo.DruckausgabeSpeichernUnter.ToolBar1001Info, new ActionTimeout(120000), new RecordItemIndex(7));
            repo.DruckausgabeSpeichernUnter.ToolBar1001Info.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DruckausgabeSpeichernUnter.ToolBar1001' at CenterRight.", repo.DruckausgabeSpeichernUnter.ToolBar1001Info, new RecordItemIndex(8));
            repo.DruckausgabeSpeichernUnter.ToolBar1001.Click(Location.CenterRight);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'C:\\temp{Return}' with focus on 'DruckausgabeSpeichernUnter.Pfad'.", repo.DruckausgabeSpeichernUnter.PfadInfo, new RecordItemIndex(9));
            repo.DruckausgabeSpeichernUnter.Pfad.PressKeys("C:\\temp{Return}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DruckausgabeSpeichernUnter.Dateiname' at Center.", repo.DruckausgabeSpeichernUnter.DateinameInfo, new RecordItemIndex(10));
            repo.DruckausgabeSpeichernUnter.Dateiname.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'e_fibu_001' with focus on 'DruckausgabeSpeichernUnter.Dateiname'.", repo.DruckausgabeSpeichernUnter.DateinameInfo, new RecordItemIndex(11));
            repo.DruckausgabeSpeichernUnter.Dateiname.PressKeys("e_fibu_001");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'DruckausgabeSpeichernUnter.Dateiname'.", repo.DruckausgabeSpeichernUnter.DateinameInfo, new RecordItemIndex(12));
            repo.DruckausgabeSpeichernUnter.Dateiname.PressKeys("{Tab}");
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'DruckausgabeSpeichernUnter.DruckausgabeSpeichernUnter'", repo.DruckausgabeSpeichernUnter.DruckausgabeSpeichernUnterInfo, new ActionTimeout(120000), new RecordItemIndex(13));
            repo.DruckausgabeSpeichernUnter.DruckausgabeSpeichernUnterInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DruckausgabeSpeichernUnter.ButtonSpeichern' at Center.", repo.DruckausgabeSpeichernUnter.ButtonSpeichernInfo, new RecordItemIndex(14));
            repo.DruckausgabeSpeichernUnter.ButtonSpeichern.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeRegex (WindowText~'Es wurden 1 von 1 Rechnungen übergeleitet') on item 'Textmessage'.", repo.Textmessage.SelfInfo, new RecordItemIndex(15));
            Validate.AttributeRegex(repo.Textmessage.SelfInfo, "WindowText", new Regex("Es wurden 1 von 1 Rechnungen übergeleitet"));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(16));
            repo.DlgMessageBox.Button0.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
