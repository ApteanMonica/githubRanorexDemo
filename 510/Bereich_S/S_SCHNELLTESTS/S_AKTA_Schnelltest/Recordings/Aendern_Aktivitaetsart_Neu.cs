///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace S_AKTA_Schnelltest.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Aendern_Aktivitaetsart_Neu recording.
    /// </summary>
    [TestModule("c67090f6-cb9f-49ac-bbc6-14a1fde7079d", ModuleType.Recording, 1)]
    public partial class Aendern_Aktivitaetsart_Neu : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::S_AKTA_Schnelltest.S_AKTA_SchnelltestRepository repository.
        /// </summary>
        public static global::S_AKTA_Schnelltest.S_AKTA_SchnelltestRepository repo = global::S_AKTA_Schnelltest.S_AKTA_SchnelltestRepository.Instance;

        static Aendern_Aktivitaetsart_Neu instance = new Aendern_Aktivitaetsart_Neu();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Aendern_Aktivitaetsart_Neu()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Aendern_Aktivitaetsart_Neu Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable Aktivitaet_Typ_Neu.
        /// </summary>
        [TestVariable("9ef6fbfd-bfcc-4ae8-a715-0ccfffb90776")]
        public string Aktivitaet_Typ_Neu
        {
            get { return repo.Aktivitaet_Typ_Neu; }
            set { repo.Aktivitaet_Typ_Neu = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FormAktArten.FlexGrid.Row_mit_Variable_Aktivitaetstyp_Neu' at Center.", repo.FormAktArten.FlexGrid.Row_mit_Variable_Aktivitaetstyp_Neu.SelfInfo, new RecordItemIndex(0));
            repo.FormAktArten.FlexGrid.Row_mit_Variable_Aktivitaetstyp_Neu.Self.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'FormAktArten.TitleBar100VerwaltenAktivitaetsarte'", repo.FormAktArten.TitleBar100VerwaltenAktivitaetsarteInfo, new ActionTimeout(120000), new RecordItemIndex(1));
            repo.FormAktArten.TitleBar100VerwaltenAktivitaetsarteInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormAktArten.Text1' at Center.", repo.FormAktArten.Text1Info, new RecordItemIndex(2));
            repo.FormAktArten.Text1.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'FormAktArten.Text1'.", repo.FormAktArten.Text1Info, new RecordItemIndex(3));
            Keyboard.PrepareFocus(repo.FormAktArten.Text1);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '1' with focus on 'FormAktArten.Text1'.", repo.FormAktArten.Text1Info, new RecordItemIndex(4));
            repo.FormAktArten.Text1.PressKeys("1");
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(5));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(6));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormAktArten.PbDataAccessSave' at Center.", repo.FormAktArten.PbDataAccessSaveInfo, new RecordItemIndex(7));
            repo.FormAktArten.PbDataAccessSave.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='1') on item 'FormAktArten.Text1'.", repo.FormAktArten.Text1Info, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.FormAktArten.Text1Info, "Text", "1");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
