///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace S_ALLTAB_Schnelltest.Recordings_SAMK
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Loeschen_SAMK_ALT_nicht_moeglich recording.
    /// </summary>
    [TestModule("9547e9b6-6362-4651-b81f-792c55c831da", ModuleType.Recording, 1)]
    public partial class Loeschen_SAMK_ALT_nicht_moeglich : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::S_ALLTAB_Schnelltest.S_ALLTAB_SchnelltestRepository repository.
        /// </summary>
        public static global::S_ALLTAB_Schnelltest.S_ALLTAB_SchnelltestRepository repo = global::S_ALLTAB_Schnelltest.S_ALLTAB_SchnelltestRepository.Instance;

        static Loeschen_SAMK_ALT_nicht_moeglich instance = new Loeschen_SAMK_ALT_nicht_moeglich();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Loeschen_SAMK_ALT_nicht_moeglich()
        {
            SAMK_CD_ALT = "KI";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Loeschen_SAMK_ALT_nicht_moeglich Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable SAMK_CD_ALT.
        /// </summary>
        [TestVariable("dd20fb60-051f-494b-b0d8-6fbb904c5b83")]
        public string SAMK_CD_ALT
        {
            get { return repo.SAMK_CD_ALT; }
            set { repo.SAMK_CD_ALT = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'TblSamk.Row_mit_SAMK_CD_ALT.row'.", repo.TblSamk.Row_mit_SAMK_CD_ALT.rowInfo, new RecordItemIndex(0));
            Validate.Exists(repo.TblSamk.Row_mit_SAMK_CD_ALT.rowInfo);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblSamk.Row_mit_SAMK_CD_ALT.Column0' at Center.", repo.TblSamk.Row_mit_SAMK_CD_ALT.Column0Info, new RecordItemIndex(1));
            repo.TblSamk.Row_mit_SAMK_CD_ALT.Column0.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'TblSamk.Row_mit_SAMK_CD_ALT.Column0'.", repo.TblSamk.Row_mit_SAMK_CD_ALT.Column0Info, new RecordItemIndex(2));
            Keyboard.PrepareFocus(repo.TblSamk.Row_mit_SAMK_CD_ALT.Column0);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblSamk.PbDataAccessSave' at Center.", repo.TblSamk.PbDataAccessSaveInfo, new RecordItemIndex(3));
            repo.TblSamk.PbDataAccessSave.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m to exist. Associated repository item: 'DlgMessageBox.LabelMeldungstext'", repo.DlgMessageBox.LabelMeldungstextInfo, new ActionTimeout(60000), new RecordItemIndex(4));
            repo.DlgMessageBox.LabelMeldungstextInfo.WaitForExists(60000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Dieser Datensatz kann noch nicht gelöscht werden,\r\nda noch abhängige Daten existieren!') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(5));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Dieser Datensatz kann noch nicht gelöscht werden,\r\nda noch abhängige Daten existieren!");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(6));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Während des Speicherns ist ein Fehler aufgetreten!') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(7));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Während des Speicherns ist ein Fehler aufgetreten!");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button1' at Center.", repo.DlgMessageBox.Button1Info, new RecordItemIndex(8));
            repo.DlgMessageBox.Button1.Click();
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(9));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblSamk.PbDataAccessLoad' at Center.", repo.TblSamk.PbDataAccessLoadInfo, new RecordItemIndex(10));
            repo.TblSamk.PbDataAccessLoad.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m to exist. Associated repository item: 'TblSamk.Row_mit_SAMK_CD_ALT.row'", repo.TblSamk.Row_mit_SAMK_CD_ALT.rowInfo, new ActionTimeout(60000), new RecordItemIndex(11));
            repo.TblSamk.Row_mit_SAMK_CD_ALT.rowInfo.WaitForExists(60000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$SAMK_CD_ALT) on item 'TblSamk.Row_mit_SAMK_CD_ALT.ColSamkCd'.", repo.TblSamk.Row_mit_SAMK_CD_ALT.ColSamkCdInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.TblSamk.Row_mit_SAMK_CD_ALT.ColSamkCdInfo, "Text", SAMK_CD_ALT);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='K') on item 'TblSamk.Row_mit_SAMK_CD_ALT.ColSamkKl'.", repo.TblSamk.Row_mit_SAMK_CD_ALT.ColSamkKlInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.TblSamk.Row_mit_SAMK_CD_ALT.ColSamkKlInfo, "Text", "K");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'SK Kunden Inland') on item 'TblSamk.Row_mit_SAMK_CD_ALT.ColSamkBez'.", repo.TblSamk.Row_mit_SAMK_CD_ALT.ColSamkBezInfo, new RecordItemIndex(14));
            Validate.AttributeContains(repo.TblSamk.Row_mit_SAMK_CD_ALT.ColSamkBezInfo, "Text", "SK Kunden Inland");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
