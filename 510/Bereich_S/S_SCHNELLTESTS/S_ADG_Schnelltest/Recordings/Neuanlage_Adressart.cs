///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace S_ADG_Schnelltest.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Neuanlage_Adressart recording.
    /// </summary>
    [TestModule("b87e12ed-7685-470c-aa67-6ee6ade8f8db", ModuleType.Recording, 1)]
    public partial class Neuanlage_Adressart : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::S_ADG_Schnelltest.S_ADG_SchnelltestRepository repository.
        /// </summary>
        public static global::S_ADG_Schnelltest.S_ADG_SchnelltestRepository repo = global::S_ADG_Schnelltest.S_ADG_SchnelltestRepository.Instance;

        static Neuanlage_Adressart instance = new Neuanlage_Adressart();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Neuanlage_Adressart()
        {
            ADRSSART_NEU = "51";
            ADRESSART_NEU_BEZEICHNUNG = "TEST_ADRESSART_BAR";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Neuanlage_Adressart Instance
        {
            get { return instance; }
        }

#region Variables

        string _ADRESSART_NEU_BEZEICHNUNG;

        /// <summary>
        /// Gets or sets the value of variable ADRESSART_NEU_BEZEICHNUNG.
        /// </summary>
        [TestVariable("33d1c1ba-fee5-41be-9065-b41a93524bc7")]
        public string ADRESSART_NEU_BEZEICHNUNG
        {
            get { return _ADRESSART_NEU_BEZEICHNUNG; }
            set { _ADRESSART_NEU_BEZEICHNUNG = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable ADRSSART_NEU.
        /// </summary>
        [TestVariable("6c59f2d1-3743-4a73-899b-ac0bfa5a3699")]
        public string ADRSSART_NEU
        {
            get { return repo.ADRSSART_NEU; }
            set { repo.ADRSSART_NEU = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblAda.Maximieren' at Center.", repo.TblAda.MaximierenInfo, new RecordItemIndex(0));
            repo.TblAda.Maximieren.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Right Click item 'TblAda.FlexGrid.Row0Column0' at Center.", repo.TblAda.FlexGrid.Row0Column0Info, new RecordItemIndex(1));
            repo.TblAda.FlexGrid.Row0Column0.Click(System.Windows.Forms.MouseButtons.Right);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SADG.ZeileEinfuegen' at Center.", repo.SADG.ZeileEinfuegenInfo, new RecordItemIndex(2));
            repo.SADG.ZeileEinfuegen.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ADRSSART_NEU'.", new RecordItemIndex(3));
            Keyboard.Press(ADRSSART_NEU);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(4));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key from variable $ADRESSART_NEU_BEZEICHNUNG Press.", new RecordItemIndex(5));
            Keyboard.Press(Keyboard.ToKey(ADRESSART_NEU_BEZEICHNUNG), Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(6));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblAda.RibbonBar.PbDataAccessSave' at Center.", repo.TblAda.RibbonBar.PbDataAccessSaveInfo, new RecordItemIndex(7));
            repo.TblAda.RibbonBar.PbDataAccessSave.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblAda.RibbonBar.PbDataAccessLoad' at Center.", repo.TblAda.RibbonBar.PbDataAccessLoadInfo, new RecordItemIndex(8));
            repo.TblAda.RibbonBar.PbDataAccessLoad.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s to exist. Associated repository item: 'TblAda.FlexGrid.Row1Column0'", repo.TblAda.FlexGrid.Row1Column0Info, new ActionTimeout(5000), new RecordItemIndex(9));
            repo.TblAda.FlexGrid.Row1Column0Info.WaitForExists(5000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$ADRSSART_NEU) on item 'TblAda.FlexGrid.Row_mit_Variable_Adressart_NEU.ColAdaCd'.", repo.TblAda.FlexGrid.Row_mit_Variable_Adressart_NEU.ColAdaCdInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.TblAda.FlexGrid.Row_mit_Variable_Adressart_NEU.ColAdaCdInfo, "Text", ADRSSART_NEU);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$ADRESSART_NEU_BEZEICHNUNG) on item 'TblAda.FlexGrid.Row_mit_Variable_Adressart_NEU.ColAdaBez'.", repo.TblAda.FlexGrid.Row_mit_Variable_Adressart_NEU.ColAdaBezInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.TblAda.FlexGrid.Row_mit_Variable_Adressart_NEU.ColAdaBezInfo, "Text", ADRESSART_NEU_BEZEICHNUNG);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
