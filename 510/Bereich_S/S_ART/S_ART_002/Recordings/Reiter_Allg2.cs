///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace S_ART_002.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Reiter_Allg2 recording.
    /// </summary>
    [TestModule("e4ae1872-dbaf-455d-bbc3-abfa8194da95", ModuleType.Recording, 1)]
    public partial class Reiter_Allg2 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::S_ART_002.S_ART_002Repository repository.
        /// </summary>
        public static global::S_ART_002.S_ART_002Repository repo = global::S_ART_002.S_ART_002Repository.Instance;

        static Reiter_Allg2 instance = new Reiter_Allg2();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Reiter_Allg2()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Reiter_Allg2 Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.TabPageAllgemein2' at Center.", repo.FrmArt.PicTabsArt.TabPageAllgemein2Info, new RecordItemIndex(0));
            repo.FrmArt.PicTabsArt.TabPageAllgemein2.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.Stuecklistentabelle' at Center.", repo.FrmArt.PicTabsArt.StuecklistentabelleInfo, new RecordItemIndex(1));
            repo.FrmArt.PicTabsArt.Stuecklistentabelle.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Insert}' with focus on 'FrmArt.PicTabsArt.Stuecklistentabelle'.", repo.FrmArt.PicTabsArt.StuecklistentabelleInfo, new RecordItemIndex(2));
            repo.FrmArt.PicTabsArt.Stuecklistentabelle.PressKeys("{Insert}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad0}' with focus on 'FrmArt.PicTabsArt.Stuecklistentabelle'.", repo.FrmArt.PicTabsArt.StuecklistentabelleInfo, new RecordItemIndex(3));
            repo.FrmArt.PicTabsArt.Stuecklistentabelle.EnsureVisible();
            Keyboard.Press("{NumPad0}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmArt.PicTabsArt.Stuecklistentabelle'.", repo.FrmArt.PicTabsArt.StuecklistentabelleInfo, new RecordItemIndex(4));
            repo.FrmArt.PicTabsArt.Stuecklistentabelle.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Stückliste für Verkauf und Produktion') on item 'FrmArt.PicTabsArt.ColArtsTypBezRow1'.", repo.FrmArt.PicTabsArt.ColArtsTypBezRow1Info, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.FrmArt.PicTabsArt.ColArtsTypBezRow1Info, "Text", "Stückliste für Verkauf und Produktion");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.SomeText' at Center.", repo.FrmArt.PicTabsArt.SomeTextInfo, new RecordItemIndex(6));
            repo.FrmArt.PicTabsArt.SomeText.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '0{Tab}' with focus on 'FrmArt.PicTabsArt.SomeText'.", repo.FrmArt.PicTabsArt.SomeTextInfo, new RecordItemIndex(7));
            repo.FrmArt.PicTabsArt.SomeText.PressKeys("0{Tab}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.SomeText' at Center.", repo.FrmArt.PicTabsArt.SomeTextInfo, new RecordItemIndex(8));
            repo.FrmArt.PicTabsArt.SomeText.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '100008{Tab}' with focus on 'FrmArt.PicTabsArt.Stuecklistentabelle'.", repo.FrmArt.PicTabsArt.StuecklistentabelleInfo, new RecordItemIndex(9));
            repo.FrmArt.PicTabsArt.Stuecklistentabelle.EnsureVisible();
            Keyboard.Press("100008{Tab}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.SomeText' at Center.", repo.FrmArt.PicTabsArt.SomeTextInfo, new RecordItemIndex(10));
            repo.FrmArt.PicTabsArt.SomeText.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'P' with focus on 'FrmArt.PicTabsArt.SomeText'.", repo.FrmArt.PicTabsArt.SomeTextInfo, new RecordItemIndex(11));
            repo.FrmArt.PicTabsArt.SomeText.PressKeys("P");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.Button_Speichern' at Center.", repo.FrmArt.Button_SpeichernInfo, new RecordItemIndex(12));
            repo.FrmArt.Button_Speichern.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Produktionsstückliste') on item 'FrmArt.PicTabsArt.ColStlaBezRow1'.", repo.FrmArt.PicTabsArt.ColStlaBezRow1Info, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.FrmArt.PicTabsArt.ColStlaBezRow1Info, "Text", "Produktionsstückliste");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.Tabelle_Alternativartikel' at Center.", repo.FrmArt.PicTabsArt.Tabelle_AlternativartikelInfo, new RecordItemIndex(14));
            repo.FrmArt.PicTabsArt.Tabelle_Alternativartikel.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Insert}' with focus on 'FrmArt.PicTabsArt.Tabelle_Alternativartikel'.", repo.FrmArt.PicTabsArt.Tabelle_AlternativartikelInfo, new RecordItemIndex(15));
            repo.FrmArt.PicTabsArt.Tabelle_Alternativartikel.PressKeys("{Insert}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '100015' with focus on 'FrmArt.PicTabsArt.Tabelle_Alternativartikel'.", repo.FrmArt.PicTabsArt.Tabelle_AlternativartikelInfo, new RecordItemIndex(16));
            repo.FrmArt.PicTabsArt.Tabelle_Alternativartikel.EnsureVisible();
            Keyboard.Press("100015");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmArt.PicTabsArt.Tabelle_Alternativartikel'.", repo.FrmArt.PicTabsArt.Tabelle_AlternativartikelInfo, new RecordItemIndex(17));
            repo.FrmArt.PicTabsArt.Tabelle_Alternativartikel.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='100015') on item 'FrmArt.PicTabsArt.Alternativ_Art_nr'.", repo.FrmArt.PicTabsArt.Alternativ_Art_nrInfo, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.FrmArt.PicTabsArt.Alternativ_Art_nrInfo, "Text", "100015");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.Anmerk_Alternativartikel' at Center.", repo.FrmArt.PicTabsArt.Anmerk_AlternativartikelInfo, new RecordItemIndex(19));
            repo.FrmArt.PicTabsArt.Anmerk_Alternativartikel.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'QS_S_ART_002' with focus on 'FrmArt.PicTabsArt.Tabelle_Alternativartikel'.", repo.FrmArt.PicTabsArt.Tabelle_AlternativartikelInfo, new RecordItemIndex(20));
            repo.FrmArt.PicTabsArt.Tabelle_Alternativartikel.EnsureVisible();
            Keyboard.Press("QS_S_ART_002");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.Button_Speichern' at Center.", repo.FrmArt.Button_SpeichernInfo, new RecordItemIndex(21));
            repo.FrmArt.Button_Speichern.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='QS_S_ART_002') on item 'FrmArt.PicTabsArt.Anmerk_Alternativartikel'.", repo.FrmArt.PicTabsArt.Anmerk_AlternativartikelInfo, new RecordItemIndex(22));
            Validate.AttributeEqual(repo.FrmArt.PicTabsArt.Anmerk_AlternativartikelInfo, "Text", "QS_S_ART_002");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
