///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace S_ART_002.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Reiter_Allg11 recording.
    /// </summary>
    [TestModule("1f8a6570-3a6b-4b6f-aec1-dd397f1f48ea", ModuleType.Recording, 1)]
    public partial class Reiter_Allg11 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::S_ART_002.S_ART_002Repository repository.
        /// </summary>
        public static global::S_ART_002.S_ART_002Repository repo = global::S_ART_002.S_ART_002Repository.Instance;

        static Reiter_Allg11 instance = new Reiter_Allg11();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Reiter_Allg11()
        {
            EAN_Code1 = "123456789";
            EAN_Code2 = "10101212";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Reiter_Allg11 Instance
        {
            get { return instance; }
        }

#region Variables

        string _EAN_Code1;

        /// <summary>
        /// Gets or sets the value of variable EAN_Code1.
        /// </summary>
        [TestVariable("daae170a-7327-46ac-a738-763df1a98ce5")]
        public string EAN_Code1
        {
            get { return _EAN_Code1; }
            set { _EAN_Code1 = value; }
        }

        string _EAN_Code2;

        /// <summary>
        /// Gets or sets the value of variable EAN_Code2.
        /// </summary>
        [TestVariable("97882eed-78c6-4475-868e-207897add8e6")]
        public string EAN_Code2
        {
            get { return _EAN_Code2; }
            set { _EAN_Code2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.TpAllgemein.EAN_1' at Center.", repo.FrmArt.TpAllgemein.EAN_1Info, new RecordItemIndex(0));
            repo.FrmArt.TpAllgemein.EAN_1.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$EAN_Code1' with focus on 'FrmArt.TpAllgemein.EAN_1'.", repo.FrmArt.TpAllgemein.EAN_1Info, new RecordItemIndex(1));
            repo.FrmArt.TpAllgemein.EAN_1.EnsureVisible();
            Keyboard.Press(EAN_Code1);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmArt.TpAllgemein.EAN_1'.", repo.FrmArt.TpAllgemein.EAN_1Info, new RecordItemIndex(2));
            repo.FrmArt.TpAllgemein.EAN_1.EnsureVisible();
            Keyboard.Press("{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$EAN_Code1) on item 'FrmArt.TpAllgemein.EAN_1'.", repo.FrmArt.TpAllgemein.EAN_1Info, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.FrmArt.TpAllgemein.EAN_1Info, "Text", EAN_Code1);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$EAN_Code2' with focus on 'FrmArt.TpAllgemein.EAN_2'.", repo.FrmArt.TpAllgemein.EAN_2Info, new RecordItemIndex(4));
            repo.FrmArt.TpAllgemein.EAN_2.EnsureVisible();
            Keyboard.Press(EAN_Code2);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$EAN_Code2) on item 'FrmArt.TpAllgemein.EAN_2'.", repo.FrmArt.TpAllgemein.EAN_2Info, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.FrmArt.TpAllgemein.EAN_2Info, "Text", EAN_Code2);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.TpAllgemein.Tabelle_Bilder' at Center.", repo.FrmArt.TpAllgemein.Tabelle_BilderInfo, new RecordItemIndex(6));
            repo.FrmArt.TpAllgemein.Tabelle_Bilder.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Insert}' with focus on 'FrmArt.TpAllgemein.Tabelle_Bilder'.", repo.FrmArt.TpAllgemein.Tabelle_BilderInfo, new RecordItemIndex(7));
            repo.FrmArt.TpAllgemein.Tabelle_Bilder.PressKeys("{Insert}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='1') on item 'FrmArt.TpAllgemein.Zeile_Tabelle_Bilder'.", repo.FrmArt.TpAllgemein.Zeile_Tabelle_BilderInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.FrmArt.TpAllgemein.Zeile_Tabelle_BilderInfo, "Text", "1");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.TpAllgemein.Row1Column0' at Center.", repo.FrmArt.TpAllgemein.Row1Column0Info, new RecordItemIndex(9));
            repo.FrmArt.TpAllgemein.Row1Column0.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Delete}' with focus on 'FrmArt.TpAllgemein.Tabelle_Bilder'.", repo.FrmArt.TpAllgemein.Tabelle_BilderInfo, new RecordItemIndex(10));
            repo.FrmArt.TpAllgemein.Tabelle_Bilder.PressKeys("{Delete}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.Button_Speichern' at Center.", repo.FrmArt.Button_SpeichernInfo, new RecordItemIndex(11));
            repo.FrmArt.Button_Speichern.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Für das Kennzeichen Kz. Rundungseinheit wurde ein Wert erfasst.\r\nBitte erfassen Sie die dazugehörige Rundungseinheit.') on item 'DlgMessageBox.Fehlermeldung_Speichervorgang'.", repo.DlgMessageBox.Fehlermeldung_SpeichervorgangInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.DlgMessageBox.Fehlermeldung_SpeichervorgangInfo, "Text", "Für das Kennzeichen Kz. Rundungseinheit wurde ein Wert erfasst.\r\nBitte erfassen Sie die dazugehörige Rundungseinheit.");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Fehlermeldung_OK' at Center.", repo.DlgMessageBox.Fehlermeldung_OKInfo, new RecordItemIndex(13));
            repo.DlgMessageBox.Fehlermeldung_OK.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.TpAllgemein.RundEinheit' at CenterLeft.", repo.FrmArt.TpAllgemein.RundEinheitInfo, new RecordItemIndex(14));
            repo.FrmArt.TpAllgemein.RundEinheit.Click(Location.CenterLeft);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'STK{Tab down}' with focus on 'FrmArt.TpAllgemein.RundEinheit'.", repo.FrmArt.TpAllgemein.RundEinheitInfo, new RecordItemIndex(15));
            repo.FrmArt.TpAllgemein.RundEinheit.PressKeys("STK{Tab down}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='STK') on item 'FrmArt.TpAllgemein.RundEinheit'.", repo.FrmArt.TpAllgemein.RundEinheitInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.FrmArt.TpAllgemein.RundEinheitInfo, "Text", "STK");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
