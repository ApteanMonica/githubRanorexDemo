///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace S_ART_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Artikel_kopieren recording.
    /// </summary>
    [TestModule("0c04f858-7a0d-480b-8a44-6ff5448661ae", ModuleType.Recording, 1)]
    public partial class Artikel_kopieren : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::S_ART_001.S_ART_001Repository repository.
        /// </summary>
        public static global::S_ART_001.S_ART_001Repository repo = global::S_ART_001.S_ART_001Repository.Instance;

        static Artikel_kopieren instance = new Artikel_kopieren();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Artikel_kopieren()
        {
            Artikel = "100000";
            Neuer_Artikel = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Artikel_kopieren Instance
        {
            get { return instance; }
        }

#region Variables

        string _Artikel;

        /// <summary>
        /// Gets or sets the value of variable Artikel.
        /// </summary>
        [TestVariable("57c1014b-4c8c-4389-8dde-7f97d063caff")]
        public string Artikel
        {
            get { return _Artikel; }
            set { _Artikel = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Neuer_Artikel.
        /// </summary>
        [TestVariable("c2387253-c04e-48c3-8bd2-3b211465a8a0")]
        public string Neuer_Artikel
        {
            get { return repo.Neuer_Artikel; }
            set { repo.Neuer_Artikel = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.FrmSearchPage.Text' at Center.", repo.FrmArt.FrmSearchPage.TextInfo, new RecordItemIndex(0));
            repo.FrmArt.FrmSearchPage.Text.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Artikel' with focus on 'FrmArt.FrmSearchPage.Text'.", repo.FrmArt.FrmSearchPage.TextInfo, new RecordItemIndex(1));
            repo.FrmArt.FrmSearchPage.Text.PressKeys(Artikel);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Artikel) on item 'FrmArt.FrmSearchPage.CellTmpColS1Row1'.", repo.FrmArt.FrmSearchPage.CellTmpColS1Row1Info, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.FrmArt.FrmSearchPage.CellTmpColS1Row1Info, "Text", Artikel);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmArt.FrmSearchPage.Row1Column0' at Center.", repo.FrmArt.FrmSearchPage.Row1Column0Info, new RecordItemIndex(3));
            repo.FrmArt.FrmSearchPage.Row1Column0.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PbCommonKopieren' at Center.", repo.FrmArt.PbCommonKopierenInfo, new RecordItemIndex(4));
            repo.FrmArt.PbCommonKopieren.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PbExtrasNummer' at Center.", repo.FrmArt.PbExtrasNummerInfo, new RecordItemIndex(5));
            repo.FrmArt.PbExtrasNummer.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PbDataAccessSave' at Center.", repo.FrmArt.PbDataAccessSaveInfo, new RecordItemIndex(6));
            repo.FrmArt.PbDataAccessSave.Click();
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'FrmArt.Artikelnummer' and assigning its value to variable 'Neuer_Artikel'.", repo.FrmArt.ArtikelnummerInfo, new RecordItemIndex(7));
            Neuer_Artikel = repo.FrmArt.Artikelnummer.Element.GetAttributeValueText("Text");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PbNavigationBack' at Center.", repo.FrmArt.PbNavigationBackInfo, new RecordItemIndex(8));
            repo.FrmArt.PbNavigationBack.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Neuer_Artikel' with focus on 'FrmArt.FrmSearchPage.Text'.", repo.FrmArt.FrmSearchPage.TextInfo, new RecordItemIndex(9));
            repo.FrmArt.FrmSearchPage.Text.PressKeys(Neuer_Artikel);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Neuer_Artikel) on item 'FrmArt.FrmSearchPage.CellTmpColS1Row1'.", repo.FrmArt.FrmSearchPage.CellTmpColS1Row1Info, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.FrmArt.FrmSearchPage.CellTmpColS1Row1Info, "Text", Neuer_Artikel);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmArt.FrmSearchPage.Row1Column0' at Center.", repo.FrmArt.FrmSearchPage.Row1Column0Info, new RecordItemIndex(11));
            repo.FrmArt.FrmSearchPage.Row1Column0.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Neuer_Artikel) on item 'FrmArt.Artikelnummer'.", repo.FrmArt.ArtikelnummerInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.FrmArt.ArtikelnummerInfo, "Text", Neuer_Artikel);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
