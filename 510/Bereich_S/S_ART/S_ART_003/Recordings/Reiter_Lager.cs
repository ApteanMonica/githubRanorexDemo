///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace S_ART_003.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Reiter_Lager recording.
    /// </summary>
    [TestModule("989b576f-fe58-4297-8994-5bf3de2b41e0", ModuleType.Recording, 1)]
    public partial class Reiter_Lager : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::S_ART_003.S_ART_003Repository repository.
        /// </summary>
        public static global::S_ART_003.S_ART_003Repository repo = global::S_ART_003.S_ART_003Repository.Instance;

        static Reiter_Lager instance = new Reiter_Lager();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Reiter_Lager()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Reiter_Lager Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.Karteireiter_Lager' at Center.", repo.FrmArt.Karteireiter_LagerInfo, new RecordItemIndex(0));
            repo.FrmArt.Karteireiter_Lager.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.Verwendung_Charge' at Center.", repo.FrmArt.Verwendung_ChargeInfo, new RecordItemIndex(1));
            repo.FrmArt.Verwendung_Charge.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LShiftKey down}{Left}{LShiftKey up}{Back}' with focus on 'FrmArt.Verwendung_Charge'.", repo.FrmArt.Verwendung_ChargeInfo, new RecordItemIndex(2));
            repo.FrmArt.Verwendung_Charge.PressKeys("{LShiftKey down}{Left}{LShiftKey up}{Back}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{NumPad2}' with focus on 'FrmArt.Verwendung_Charge'.", repo.FrmArt.Verwendung_ChargeInfo, new RecordItemIndex(3));
            repo.FrmArt.Verwendung_Charge.PressKeys("{NumPad2}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmArt.Verwendung_Charge'.", repo.FrmArt.Verwendung_ChargeInfo, new RecordItemIndex(4));
            repo.FrmArt.Verwendung_Charge.PressKeys("{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='2') on item 'FrmArt.Verwendung_Charge'.", repo.FrmArt.Verwendung_ChargeInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.FrmArt.Verwendung_ChargeInfo, "Text", "2");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Ungültige Kombination der Chargenkennzeichen!\r\n(Erfassung ist AUS aber Verwendung ist EIN)') on item 'DlgMessageBox.Meldungstext'.", repo.DlgMessageBox.MeldungstextInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.DlgMessageBox.MeldungstextInfo, "Text", "Ungültige Kombination der Chargenkennzeichen!\r\n(Erfassung ist AUS aber Verwendung ist EIN)");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(7));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.Erfassung_Charge' at Center.", repo.FrmArt.PicTabsArt.Erfassung_ChargeInfo, new RecordItemIndex(8));
            repo.FrmArt.PicTabsArt.Erfassung_Charge.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LShiftKey down}{Left}{LShiftKey up}{NumPad1}' with focus on 'FrmArt.PicTabsArt.Erfassung_Charge'.", repo.FrmArt.PicTabsArt.Erfassung_ChargeInfo, new RecordItemIndex(9));
            repo.FrmArt.PicTabsArt.Erfassung_Charge.PressKeys("{LShiftKey down}{Left}{LShiftKey up}{NumPad1}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'FrmArt.PicTabsArt.Erfassung_Charge'.", repo.FrmArt.PicTabsArt.Erfassung_ChargeInfo, new RecordItemIndex(10));
            repo.FrmArt.PicTabsArt.Erfassung_Charge.PressKeys("{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='1') on item 'FrmArt.PicTabsArt.Erfassung_Charge'.", repo.FrmArt.PicTabsArt.Erfassung_ChargeInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.FrmArt.PicTabsArt.Erfassung_ChargeInfo, "Text", "1");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.Mindestbestand' at Center.", repo.FrmArt.PicTabsArt.MindestbestandInfo, new RecordItemIndex(12));
            repo.FrmArt.PicTabsArt.Mindestbestand.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Right}{LShiftKey up}{Back}' with focus on 'FrmArt.PicTabsArt.Lager_Nr'.", repo.FrmArt.PicTabsArt.Lager_NrInfo, new RecordItemIndex(13));
            repo.FrmArt.PicTabsArt.Lager_Nr.PressKeys("{Right}{LShiftKey up}{Back}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '10{Tab}' with focus on 'FrmArt.PicTabsArt.Lager_Nr'.", repo.FrmArt.PicTabsArt.Lager_NrInfo, new RecordItemIndex(14));
            repo.FrmArt.PicTabsArt.Lager_Nr.PressKeys("10{Tab}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='10,00') on item 'FrmArt.PicTabsArt.Mindestbestand'.", repo.FrmArt.PicTabsArt.MindestbestandInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.FrmArt.PicTabsArt.MindestbestandInfo, "Text", "10,00");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Insert}' with focus on 'FrmArt.PicTabsArt.Tabelle_Lager'.", repo.FrmArt.PicTabsArt.Tabelle_LagerInfo, new RecordItemIndex(16));
            repo.FrmArt.PicTabsArt.Tabelle_Lager.EnsureVisible();
            Keyboard.Press("{Insert}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.Lager_Nr' at Center.", repo.FrmArt.PicTabsArt.Lager_NrInfo, new RecordItemIndex(17));
            repo.FrmArt.PicTabsArt.Lager_Nr.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '200{Tab}' with focus on 'FrmArt.PicTabsArt.Lager_Nr'.", repo.FrmArt.PicTabsArt.Lager_NrInfo, new RecordItemIndex(18));
            repo.FrmArt.PicTabsArt.Lager_Nr.PressKeys("200{Tab}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.Lager_nr2' at Center.", repo.FrmArt.PicTabsArt.Lager_nr2Info, new RecordItemIndex(19));
            repo.FrmArt.PicTabsArt.Lager_nr2.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='200') on item 'FrmArt.PicTabsArt.Lager_nr2'.", repo.FrmArt.PicTabsArt.Lager_nr2Info, new RecordItemIndex(20));
            Validate.AttributeEqual(repo.FrmArt.PicTabsArt.Lager_nr2Info, "Text", "200");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.Button_Speichern' at Center.", repo.FrmArt.Button_SpeichernInfo, new RecordItemIndex(21));
            repo.FrmArt.Button_Speichern.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.Notiz' at Center.", repo.FrmArt.PicTabsArt.NotizInfo, new RecordItemIndex(22));
            repo.FrmArt.PicTabsArt.Notiz.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmArt.PicTabsArt.Notiz_Text' at Center.", repo.FrmArt.PicTabsArt.Notiz_TextInfo, new RecordItemIndex(23));
            repo.FrmArt.PicTabsArt.Notiz_Text.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'QS Test Chargen- mit Folgeartikel {Tab down}' with focus on 'FrmArt.PicTabsArt.Notiz_Text'.", repo.FrmArt.PicTabsArt.Notiz_TextInfo, new RecordItemIndex(24));
            repo.FrmArt.PicTabsArt.Notiz_Text.PressKeys("QS Test Chargen- mit Folgeartikel {Tab down}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{F12}' with focus on 'FrmArt.PicTabsArt.Notiz_Text'.", repo.FrmArt.PicTabsArt.Notiz_TextInfo, new RecordItemIndex(25));
            repo.FrmArt.PicTabsArt.Notiz_Text.PressKeys("{F12}");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='QS Test Chargen- mit Folgeartikel ') on item 'FrmArt.PicTabsArt.Notiz_Text'.", repo.FrmArt.PicTabsArt.Notiz_TextInfo, new RecordItemIndex(26));
            Validate.AttributeEqual(repo.FrmArt.PicTabsArt.Notiz_TextInfo, "Text", "QS Test Chargen- mit Folgeartikel ");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
