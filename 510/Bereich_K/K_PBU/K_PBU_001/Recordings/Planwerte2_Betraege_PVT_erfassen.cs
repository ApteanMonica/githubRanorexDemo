///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace K_PBU_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Planwerte2_Betraege_PVT_erfassen recording.
    /// </summary>
    [TestModule("82230939-9132-4194-bfee-72c6fe1a4a77", ModuleType.Recording, 1)]
    public partial class Planwerte2_Betraege_PVT_erfassen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::K_PBU_001.K_PBU_001Repository repository.
        /// </summary>
        public static global::K_PBU_001.K_PBU_001Repository repo = global::K_PBU_001.K_PBU_001Repository.Instance;

        static Planwerte2_Betraege_PVT_erfassen instance = new Planwerte2_Betraege_PVT_erfassen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Planwerte2_Betraege_PVT_erfassen()
        {
            PVT_Code = "PVT_2022";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Planwerte2_Betraege_PVT_erfassen Instance
        {
            get { return instance; }
        }

#region Variables

        string _PVT_Code;

        /// <summary>
        /// Gets or sets the value of variable PVT_Code.
        /// </summary>
        [TestVariable("01d85f9b-c6e5-43c3-959e-1e2850ad4b82")]
        public string PVT_Code
        {
            get { return _PVT_Code; }
            set { _PVT_Code = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblK.FlexGrid.Row_2.ColVerteilRow2' at Center.", repo.TblK.FlexGrid.Row_2.ColVerteilRow2Info, new RecordItemIndex(0));
            repo.TblK.FlexGrid.Row_2.ColVerteilRow2.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$PVT_Code' with focus on 'TblK.FlexGrid.Row_2.ColVerteilRow2'.", repo.TblK.FlexGrid.Row_2.ColVerteilRow2Info, new RecordItemIndex(1));
            repo.TblK.FlexGrid.Row_2.ColVerteilRow2.PressKeys(PVT_Code);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(2));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '100.000' with focus on 'TblK.FlexGrid.Row_2.Col00Row2'.", repo.TblK.FlexGrid.Row_2.Col00Row2Info, new RecordItemIndex(3));
            repo.TblK.FlexGrid.Row_2.Col00Row2.PressKeys("100.000");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(4));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblK.PbCommonSpeichern' at Center.", repo.TblK.PbCommonSpeichernInfo, new RecordItemIndex(5));
            repo.TblK.PbCommonSpeichern.Click();
            
            // Zeile 1 prüfen: gleichmäßige Verteilung
            Report.Log(ReportLevel.Info, "Section", "Zeile 1 prüfen: gleichmäßige Verteilung", new RecordItemIndex(6));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='100.000') on item 'TblK.FlexGrid.Row_2.Col00Row2'.", repo.TblK.FlexGrid.Row_2.Col00Row2Info, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.TblK.FlexGrid.Row_2.Col00Row2Info, "Text", "100.000");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'15.000\t5.000\t10.000\t20.000\t5.000\t5.000\t\t\t10.000\t5.000\t5.000\t20.000') on item 'TblK.FlexGrid.Row_2.Row2'.", repo.TblK.FlexGrid.Row_2.Row2Info, new RecordItemIndex(8));
            Validate.AttributeContains(repo.TblK.FlexGrid.Row_2.Row2Info, "Text", "15.000\t5.000\t10.000\t20.000\t5.000\t5.000\t\t\t10.000\t5.000\t5.000\t20.000");
            
            // Summenzeile prüfen
            Report.Log(ReportLevel.Info, "Section", "Summenzeile prüfen", new RecordItemIndex(9));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='SUMME') on item 'TblK.Fusszeile_Summe.ColPosRow0'.", repo.TblK.Fusszeile_Summe.ColPosRow0Info, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.TblK.Fusszeile_Summe.ColPosRow0Info, "Text", "SUMME");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='115.000') on item 'TblK.Fusszeile_Summe.Col00Row0'.", repo.TblK.Fusszeile_Summe.Col00Row0Info, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.TblK.Fusszeile_Summe.Col00Row0Info, "Text", "115.000");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'16.000\t6.000\t11.000\t21.000\t6.000\t6.000\t1.500\t1.500\t11.500\t6.500\t6.500\t21.500') on item 'TblK.Fusszeile_Summe.Row0'.", repo.TblK.Fusszeile_Summe.Row0Info, new RecordItemIndex(12));
            Validate.AttributeContains(repo.TblK.Fusszeile_Summe.Row0Info, "Text", "16.000\t6.000\t11.000\t21.000\t6.000\t6.000\t1.500\t1.500\t11.500\t6.500\t6.500\t21.500");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
