///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace K_PBU_001.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Planwerte1_Betraege_erfassen recording.
    /// </summary>
    [TestModule("2b3089ff-3734-4388-ac58-ce7ab7c1a65f", ModuleType.Recording, 1)]
    public partial class Planwerte1_Betraege_erfassen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::K_PBU_001.K_PBU_001Repository repository.
        /// </summary>
        public static global::K_PBU_001.K_PBU_001Repository repo = global::K_PBU_001.K_PBU_001Repository.Instance;

        static Planwerte1_Betraege_erfassen instance = new Planwerte1_Betraege_erfassen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Planwerte1_Betraege_erfassen()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Planwerte1_Betraege_erfassen Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblK.FlexGrid.Row_1.Col00Row1' at Center.", repo.TblK.FlexGrid.Row_1.Col00Row1Info, new RecordItemIndex(0));
            repo.TblK.FlexGrid.Row_1.Col00Row1.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'TblK.FlexGrid.Row_1.Col00Row1' at Center.", repo.TblK.FlexGrid.Row_1.Col00Row1Info, new RecordItemIndex(1));
            repo.TblK.FlexGrid.Row_1.Col00Row1.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '12000' with focus on 'TblK.FlexGrid.Row_1.Col00Row1'.", repo.TblK.FlexGrid.Row_1.Col00Row1Info, new RecordItemIndex(2));
            repo.TblK.FlexGrid.Row_1.Col00Row1.PressKeys("12000");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(3));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            // Zeile 1 prüfen: gleichmäßige Verteilung
            Report.Log(ReportLevel.Info, "Section", "Zeile 1 prüfen: gleichmäßige Verteilung", new RecordItemIndex(4));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='12.000') on item 'TblK.FlexGrid.Row_1.Col00Row1'.", repo.TblK.FlexGrid.Row_1.Col00Row1Info, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.TblK.FlexGrid.Row_1.Col00Row1Info, "Text", "12.000");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000') on item 'TblK.FlexGrid.Row_1.Row1'.", repo.TblK.FlexGrid.Row_1.Row1Info, new RecordItemIndex(6));
            Validate.AttributeContains(repo.TblK.FlexGrid.Row_1.Row1Info, "Text", "1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000");
            
            // Summenzeile prüfen
            Report.Log(ReportLevel.Info, "Section", "Summenzeile prüfen", new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='SUMME') on item 'TblK.Fusszeile_Summe.ColPosRow0'.", repo.TblK.Fusszeile_Summe.ColPosRow0Info, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.TblK.Fusszeile_Summe.ColPosRow0Info, "Text", "SUMME");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='12.000') on item 'TblK.Fusszeile_Summe.Col00Row0'.", repo.TblK.Fusszeile_Summe.Col00Row0Info, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.TblK.Fusszeile_Summe.Col00Row0Info, "Text", "12.000");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000') on item 'TblK.Fusszeile_Summe.Row0'.", repo.TblK.Fusszeile_Summe.Row0Info, new RecordItemIndex(10));
            Validate.AttributeContains(repo.TblK.Fusszeile_Summe.Row0Info, "Text", "1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000\t1.000");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
