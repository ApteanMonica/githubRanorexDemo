///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Z_UHR_003.Recording
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Auswertung_Erstellen recording.
    /// </summary>
    [TestModule("6060fcb9-06c1-4208-8ab4-a6647fb866af", ModuleType.Recording, 1)]
    public partial class Auswertung_Erstellen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Z_UHR_003.Z_UHR_003Repository repository.
        /// </summary>
        public static global::Z_UHR_003.Z_UHR_003Repository repo = global::Z_UHR_003.Z_UHR_003Repository.Instance;

        static Auswertung_Erstellen instance = new Auswertung_Erstellen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Auswertung_Erstellen()
        {
            Mitarbeiter_2 = "UHR_001_D - Schöneberg Huberta";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Auswertung_Erstellen Instance
        {
            get { return instance; }
        }

#region Variables

        string _Mitarbeiter_2;

        /// <summary>
        /// Gets or sets the value of variable Mitarbeiter_2.
        /// </summary>
        [TestVariable("3f34d2b9-b61e-4598-b196-9491d377815f")]
        public string Mitarbeiter_2
        {
            get { return _Mitarbeiter_2; }
            set { _Mitarbeiter_2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(0));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(1));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(2));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Down' Press.", new RecordItemIndex(3));
            Keyboard.Press(System.Windows.Forms.Keys.Down, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'uhr_001_D'.", new RecordItemIndex(4));
            Keyboard.Press("uhr_001_D");
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key 'Down' Press.", new RecordItemIndex(5));
            //Keyboard.Press(System.Windows.Forms.Keys.Down, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmUhr.PbAuswertungenAuswertung' at Center.", repo.FrmUhr.PbAuswertungenAuswertungInfo, new RecordItemIndex(6));
            repo.FrmUhr.PbAuswertungenAuswertung.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'TblAuswertungZeit.TitleBar100ZeitsystemStechuhrAus'", repo.TblAuswertungZeit.TitleBar100ZeitsystemStechuhrAusInfo, new ActionTimeout(120000), new RecordItemIndex(7));
            repo.TblAuswertungZeit.TitleBar100ZeitsystemStechuhrAusInfo.WaitForExists(120000);
            
            // Ticket erfassen zu Leerzeichen in Titelleiste zwei leerzeichen zuviel zw. Stechuhr und Auswertung
            Report.Log(ReportLevel.Info, "Validation", "Ticket erfassen zu Leerzeichen in Titelleiste zwei leerzeichen zuviel zw. Stechuhr und Auswertung\r\nValidating AttributeContains (Text>'Zeitsystem Stechuhr   Auswertung') on item 'TblAuswertungZeit.TitleBar100ZeitsystemStechuhrAus'.", repo.TblAuswertungZeit.TitleBar100ZeitsystemStechuhrAusInfo, new RecordItemIndex(8));
            Validate.AttributeContains(repo.TblAuswertungZeit.TitleBar100ZeitsystemStechuhrAusInfo, "Text", "Zeitsystem Stechuhr   Auswertung");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Monat') on item 'TblAuswertungZeit.RbMonat'.", repo.TblAuswertungZeit.RbMonatInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.TblAuswertungZeit.RbMonatInfo, "Text", "Monat");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'TblAuswertungZeit.DfJahrVon' at Center.", repo.TblAuswertungZeit.DfJahrVonInfo, new RecordItemIndex(10));
            repo.TblAuswertungZeit.DfJahrVon.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Delete}2022'.", new RecordItemIndex(11));
            Keyboard.Press("{Delete}2022");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'TblAuswertungZeit.JahrMonat' at Center.", repo.TblAuswertungZeit.JahrMonatInfo, new RecordItemIndex(12));
            repo.TblAuswertungZeit.JahrMonat.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Delete}07'.", new RecordItemIndex(13));
            Keyboard.Press("{Delete}07");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TblAuswertungZeit.PbDataAccessLoad' at Center.", repo.TblAuswertungZeit.PbDataAccessLoadInfo, new RecordItemIndex(14));
            repo.TblAuswertungZeit.PbDataAccessLoad.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
