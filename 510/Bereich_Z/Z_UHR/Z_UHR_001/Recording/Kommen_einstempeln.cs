///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Z_UHR_001.Recording
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Kommen_einstempeln recording.
    /// </summary>
    [TestModule("018bac0c-52e2-45d6-8636-7c108442d0af", ModuleType.Recording, 1)]
    public partial class Kommen_einstempeln : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Z_UHR_001.Z_UHR_001Repository repository.
        /// </summary>
        public static global::Z_UHR_001.Z_UHR_001Repository repo = global::Z_UHR_001.Z_UHR_001Repository.Instance;

        static Kommen_einstempeln instance = new Kommen_einstempeln();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Kommen_einstempeln()
        {
            Personal_Nr = "UHR_001_A";
            Name_MA = "Muster Hans";
            Mitarbeiter = "UHR_001_A - Muster Hans";
            Uhrzeit_plus_1Minute = "";
            Uhrzeit_Stunde_Minute = "";
            Uhrzeit_plus_2Minuten = "";
            Uhrzeit_plus_3Minuten = "";
            Einlesen_Uhrzeit = "";
            angepasste_Uhrzeit_einlesen = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Kommen_einstempeln Instance
        {
            get { return instance; }
        }

#region Variables

        string _Name_MA;

        /// <summary>
        /// Gets or sets the value of variable Name_MA.
        /// </summary>
        [TestVariable("4bda7cf6-552e-470e-8481-207ee01de381")]
        public string Name_MA
        {
            get { return _Name_MA; }
            set { _Name_MA = value; }
        }

        string _Mitarbeiter;

        /// <summary>
        /// Gets or sets the value of variable Mitarbeiter.
        /// </summary>
        [TestVariable("da0f5672-f419-4da1-9bd4-44ce05caa789")]
        public string Mitarbeiter
        {
            get { return _Mitarbeiter; }
            set { _Mitarbeiter = value; }
        }

        string _Uhrzeit_plus_1Minute;

        /// <summary>
        /// Gets or sets the value of variable Uhrzeit_plus_1Minute.
        /// </summary>
        [TestVariable("0e967a89-ed2b-4302-9cff-65a1154fe371")]
        public string Uhrzeit_plus_1Minute
        {
            get { return _Uhrzeit_plus_1Minute; }
            set { _Uhrzeit_plus_1Minute = value; }
        }

        string _Uhrzeit_Stunde_Minute;

        /// <summary>
        /// Gets or sets the value of variable Uhrzeit_Stunde_Minute.
        /// </summary>
        [TestVariable("177472d5-6430-4d97-8952-a886f5a2b0d7")]
        public string Uhrzeit_Stunde_Minute
        {
            get { return _Uhrzeit_Stunde_Minute; }
            set { _Uhrzeit_Stunde_Minute = value; }
        }

        string _Uhrzeit_plus_2Minuten;

        /// <summary>
        /// Gets or sets the value of variable Uhrzeit_plus_2Minuten.
        /// </summary>
        [TestVariable("ab728eaf-c4b7-4ef7-b91e-384da1ea5e6e")]
        public string Uhrzeit_plus_2Minuten
        {
            get { return _Uhrzeit_plus_2Minuten; }
            set { _Uhrzeit_plus_2Minuten = value; }
        }

        string _Uhrzeit_plus_3Minuten;

        /// <summary>
        /// Gets or sets the value of variable Uhrzeit_plus_3Minuten.
        /// </summary>
        [TestVariable("b71537f4-a0fc-4bc6-a609-bd144c178866")]
        public string Uhrzeit_plus_3Minuten
        {
            get { return _Uhrzeit_plus_3Minuten; }
            set { _Uhrzeit_plus_3Minuten = value; }
        }

        string _Einlesen_Uhrzeit;

        /// <summary>
        /// Gets or sets the value of variable Einlesen_Uhrzeit.
        /// </summary>
        [TestVariable("8e3901fe-6e67-4f4d-aa29-c0deb2871e93")]
        public string Einlesen_Uhrzeit
        {
            get { return _Einlesen_Uhrzeit; }
            set { _Einlesen_Uhrzeit = value; }
        }

        string _angepasste_Uhrzeit_einlesen;

        /// <summary>
        /// Gets or sets the value of variable angepasste_Uhrzeit_einlesen.
        /// </summary>
        [TestVariable("086a1326-8431-4bbf-9188-853001bb69b0")]
        public string angepasste_Uhrzeit_einlesen
        {
            get { return _angepasste_Uhrzeit_einlesen; }
            set { _angepasste_Uhrzeit_einlesen = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Personal_Nr.
        /// </summary>
        [TestVariable("5fdccce9-0409-41db-a0fe-7d9da4c4a9f2")]
        public string Personal_Nr
        {
            get { return repo.Personal_Nr; }
            set { repo.Personal_Nr = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Mitarbeiter' with focus on 'FrmUhr.Mitarbeiter_510_521'.", repo.FrmUhr.Mitarbeiter_510_521Info, new RecordItemIndex(0));
            repo.FrmUhr.Mitarbeiter_510_521.PressKeys(Mitarbeiter);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Down' Press.", new RecordItemIndex(1));
            Keyboard.Press(System.Windows.Forms.Keys.Down, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(2));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            // Probleme bei Prüfung sowohl mit Repository als auch mit Variable die ausgelesen werden soll in 521
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nProbleme bei Prüfung sowohl mit Repository als auch mit Variable die ausgelesen werden soll in 521\r\nValidating AttributeEqual (Text=$Mitarbeiter) on item 'FrmUhr.Mitarbeiter_510_521'.", repo.FrmUhr.Mitarbeiter_510_521Info, new RecordItemIndex(3));
                Validate.AttributeEqual(repo.FrmUhr.Mitarbeiter_510_521Info, "Text", Mitarbeiter, null, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmUhr.PbTimecontrolKommt' at Center.", repo.FrmUhr.PbTimecontrolKommtInfo, new RecordItemIndex(4));
            repo.FrmUhr.PbTimecontrolKommt.Click();
            
            Uhrzeit_Stunde_Minute = Ranorex.AutomationHelpers.UserCodeCollections.SystemLibrary.GetDateTimeAsString("HH:mm");
            
            // continue on fail (bei Einlesen der Zeit falls es zur Minutenüberschneidung kommt.
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\ncontinue on fail (bei Einlesen der Zeit falls es zur Minutenüberschneidung kommt.\r\nValidating AttributeContains (Text>$Uhrzeit_Stunde_Minute) on item 'FrmUhr.Tabelle_links_mit_Zeile_mit_Variable_Personal_Nr.ColUhrDtbeginn_Zeile_mit_Variable_Personal_Nr'.", repo.FrmUhr.Tabelle_links_mit_Zeile_mit_Variable_Personal_Nr.ColUhrDtbeginn_Zeile_mit_Variable_Personal_NrInfo, new RecordItemIndex(6));
                //Validate.AttributeContains(repo.FrmUhr.Tabelle_links_mit_Zeile_mit_Variable_Personal_Nr.ColUhrDtbeginn_Zeile_mit_Variable_Personal_NrInfo, "Text", Uhrzeit_Stunde_Minute, null, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'FrmUhr.Tabelle_links_mit_Zeile_mit_Variable_Personal_Nr.ColUhrDtbeginn_Zeile_mit_Variable_Personal_Nr' and assigning its value to variable 'Einlesen_Uhrzeit'.", repo.FrmUhr.Tabelle_links_mit_Zeile_mit_Variable_Personal_Nr.ColUhrDtbeginn_Zeile_mit_Variable_Personal_NrInfo, new RecordItemIndex(7));
            Einlesen_Uhrzeit = repo.FrmUhr.Tabelle_links_mit_Zeile_mit_Variable_Personal_Nr.ColUhrDtbeginn_Zeile_mit_Variable_Personal_Nr.Element.GetAttributeValueText("Text");
            
            angepasste_Uhrzeit_einlesen = Ranorex.AutomationHelpers.UserCodeCollections.Aptean.GetDateAsString(Einlesen_Uhrzeit, "HH:mm");
            
            Uhrzeit_plus_1Minute = Ranorex.AutomationHelpers.UserCodeCollections.Aptean.GetDateTimePlus(Uhrzeit_Stunde_Minute, "m", ValueConverter.ArgumentFromString<int>("counter", "1"), "HH:mm");
            
            // angepasste Uhrzeit eingelesen mit LOG
            Report.Log(ReportLevel.Info, "User", angepasste_Uhrzeit_einlesen, new RecordItemIndex(10));
            
            Report.Log(ReportLevel.Info, "User", Uhrzeit_Stunde_Minute, new RecordItemIndex(11));
            
            Ranorex.AutomationHelpers.UserCodeCollections.Aptean.ValidateVar1Var2(angepasste_Uhrzeit_einlesen, Uhrzeit_Stunde_Minute, Uhrzeit_plus_1Minute);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Personal_Nr) on item 'FrmUhr.Tabelle_links_mit_Zeile_mit_Variable_Personal_Nr.ColPersNr_Zeile_mit_Varibale_Personal_Nr'.", repo.FrmUhr.Tabelle_links_mit_Zeile_mit_Variable_Personal_Nr.ColPersNr_Zeile_mit_Varibale_Personal_NrInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.FrmUhr.Tabelle_links_mit_Zeile_mit_Variable_Personal_Nr.ColPersNr_Zeile_mit_Varibale_Personal_NrInfo, "Text", Personal_Nr);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Name_MA) on item 'FrmUhr.Tabelle_links_mit_Zeile_mit_Variable_Personal_Nr.ColPersName_Zeile_mit_Variable_Personal_Nr'.", repo.FrmUhr.Tabelle_links_mit_Zeile_mit_Variable_Personal_Nr.ColPersName_Zeile_mit_Variable_Personal_NrInfo, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.FrmUhr.Tabelle_links_mit_Zeile_mit_Variable_Personal_Nr.ColPersName_Zeile_mit_Variable_Personal_NrInfo, "Text", Name_MA);
            
            // Beginn
            Report.Log(ReportLevel.Info, "Section", "Beginn", new RecordItemIndex(15));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
