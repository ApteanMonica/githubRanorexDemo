///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Z_ZEIT_002.Recording
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Aendern recording.
    /// </summary>
    [TestModule("8acefedc-64ba-491b-b7a1-682c29cc7f1e", ModuleType.Recording, 1)]
    public partial class Aendern : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Z_ZEIT_002.Z_ZEIT_002Repository repository.
        /// </summary>
        public static global::Z_ZEIT_002.Z_ZEIT_002Repository repo = global::Z_ZEIT_002.Z_ZEIT_002Repository.Instance;

        static Aendern instance = new Aendern();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Aendern()
        {
            Projekt = "ZEIT_002";
            Phase_alt = "100";
            Phase_neu = "200";
            Text_Phase_neu = "Durchführung";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Aendern Instance
        {
            get { return instance; }
        }

#region Variables

        string _Projekt;

        /// <summary>
        /// Gets or sets the value of variable Projekt.
        /// </summary>
        [TestVariable("5d76a5f1-e4a7-4048-85e6-2d8dccf76f69")]
        public string Projekt
        {
            get { return _Projekt; }
            set { _Projekt = value; }
        }

        string _Phase_alt;

        /// <summary>
        /// Gets or sets the value of variable Phase_alt.
        /// </summary>
        [TestVariable("93f97d09-50d4-45d2-9a56-ba3ed512dcf5")]
        public string Phase_alt
        {
            get { return _Phase_alt; }
            set { _Phase_alt = value; }
        }

        string _Phase_neu;

        /// <summary>
        /// Gets or sets the value of variable Phase_neu.
        /// </summary>
        [TestVariable("63dc197f-b3a3-4899-8f2c-06dd39bf60ac")]
        public string Phase_neu
        {
            get { return _Phase_neu; }
            set { _Phase_neu = value; }
        }

        string _Text_Phase_neu;

        /// <summary>
        /// Gets or sets the value of variable Text_Phase_neu.
        /// </summary>
        [TestVariable("82555391-5574-4cc8-a81e-f5e5fbd5e473")]
        public string Text_Phase_neu
        {
            get { return _Text_Phase_neu; }
            set { _Text_Phase_neu = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Projekt) on item 'MdiZeit.Tabelle.Zeile_2.ColProjNrRow2'.", repo.MdiZeit.Tabelle.Zeile_2.ColProjNrRow2Info, new RecordItemIndex(0));
            Validate.AttributeEqual(repo.MdiZeit.Tabelle.Zeile_2.ColProjNrRow2Info, "Text", Projekt);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Phase_alt) on item 'MdiZeit.Tabelle.Zeile_2.ColPhasCdRow2'.", repo.MdiZeit.Tabelle.Zeile_2.ColPhasCdRow2Info, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.MdiZeit.Tabelle.Zeile_2.ColPhasCdRow2Info, "Text", Phase_alt);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'MdiZeit.Tabelle.Zeile_2.ColPhasCdRow2' at Center.", repo.MdiZeit.Tabelle.Zeile_2.ColPhasCdRow2Info, new RecordItemIndex(2));
            repo.MdiZeit.Tabelle.Zeile_2.ColPhasCdRow2.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Delete}200' with focus on 'MdiZeit.Tabelle.Zeile_2.ColPhasCdRow2'.", repo.MdiZeit.Tabelle.Zeile_2.ColPhasCdRow2Info, new RecordItemIndex(3));
            repo.MdiZeit.Tabelle.Zeile_2.ColPhasCdRow2.PressKeys("{Delete}200");
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(4));
            //Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiZeit.Tabelle.Zeile_4.ColPhasCdRow4' at Center.", repo.MdiZeit.Tabelle.Zeile_4.ColPhasCdRow4Info, new RecordItemIndex(5));
            repo.MdiZeit.Tabelle.Zeile_4.ColPhasCdRow4.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Phase_neu) on item 'MdiZeit.Tabelle.Zeile_2.ColPhasCdRow2'.", repo.MdiZeit.Tabelle.Zeile_2.ColPhasCdRow2Info, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.MdiZeit.Tabelle.Zeile_2.ColPhasCdRow2Info, "Text", Phase_neu);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$Text_Phase_neu) on item 'MdiZeit.Tabelle.Zeile_2.ColPhasBezRow2'.", repo.MdiZeit.Tabelle.Zeile_2.ColPhasBezRow2Info, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.MdiZeit.Tabelle.Zeile_2.ColPhasBezRow2Info, "Text", Text_Phase_neu);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MdiZeit.PbDataAccessSpeichern' at Center.", repo.MdiZeit.PbDataAccessSpeichernInfo, new RecordItemIndex(8));
            repo.MdiZeit.PbDataAccessSpeichern.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
