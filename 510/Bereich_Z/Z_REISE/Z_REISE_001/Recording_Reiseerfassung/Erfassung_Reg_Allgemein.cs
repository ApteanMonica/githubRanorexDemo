///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Z_REISE_001.Recording_Reiseerfassung
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Erfassung_Reg_Allgemein recording.
    /// </summary>
    [TestModule("6a2560be-19fb-4fec-8026-8e5a02ccceb2", ModuleType.Recording, 1)]
    public partial class Erfassung_Reg_Allgemein : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Z_REISE_001.Z_REISE_001Repository repository.
        /// </summary>
        public static global::Z_REISE_001.Z_REISE_001Repository repo = global::Z_REISE_001.Z_REISE_001Repository.Instance;

        static Erfassung_Reg_Allgemein instance = new Erfassung_Reg_Allgemein();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Erfassung_Reg_Allgemein()
        {
            Pers_nr = "Z_REISE001";
            Beginn_Uhrzeit = "06:00";
            Ende_Uhrzeit = "17:00";
            Datum_Beginn = "20.04.2022";
            Datum_Ende = "20.04.2022";
            Text_Beschreibung = "Besuch Musterkunde";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Erfassung_Reg_Allgemein Instance
        {
            get { return instance; }
        }

#region Variables

        string _Pers_nr;

        /// <summary>
        /// Gets or sets the value of variable Pers_nr.
        /// </summary>
        [TestVariable("49247e6d-eaa1-44d6-a6e2-ec7cab608a4c")]
        public string Pers_nr
        {
            get { return _Pers_nr; }
            set { _Pers_nr = value; }
        }

        string _Beginn_Uhrzeit;

        /// <summary>
        /// Gets or sets the value of variable Beginn_Uhrzeit.
        /// </summary>
        [TestVariable("45f35e03-cd72-43c5-8450-02f9a0e531f6")]
        public string Beginn_Uhrzeit
        {
            get { return _Beginn_Uhrzeit; }
            set { _Beginn_Uhrzeit = value; }
        }

        string _Datum_Beginn;

        /// <summary>
        /// Gets or sets the value of variable Datum_Beginn.
        /// </summary>
        [TestVariable("987046d3-51bf-40aa-a79f-1b13e4486bcc")]
        public string Datum_Beginn
        {
            get { return _Datum_Beginn; }
            set { _Datum_Beginn = value; }
        }

        string _Datum_Ende;

        /// <summary>
        /// Gets or sets the value of variable Datum_Ende.
        /// </summary>
        [TestVariable("dfe19caa-9ec1-4876-a908-74dfc2b842ac")]
        public string Datum_Ende
        {
            get { return _Datum_Ende; }
            set { _Datum_Ende = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Ende_Uhrzeit.
        /// </summary>
        [TestVariable("34ad9c82-5fe0-481b-8778-4f32e2abea0f")]
        public string Ende_Uhrzeit
        {
            get { return repo.Ende_Uhrzeit; }
            set { repo.Ende_Uhrzeit = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Text_Beschreibung.
        /// </summary>
        [TestVariable("89992bd7-b327-47d8-be99-ac539b493f76")]
        public string Text_Beschreibung
        {
            get { return repo.Text_Beschreibung; }
            set { repo.Text_Beschreibung = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormRk.PbNew' at Center.", repo.FormRk.PbNewInfo, new RecordItemIndex(0));
            repo.FormRk.PbNew.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'DlgListBox.TitleBar100AuswahllisteReiseartAus'", repo.DlgListBox.TitleBar100AuswahllisteReiseartAusInfo, new ActionTimeout(120000), new RecordItemIndex(1));
            repo.DlgListBox.TitleBar100AuswahllisteReiseartAusInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'[100]  Auswahlliste Reiseart auswählen') on item 'DlgListBox.TitleBar100AuswahllisteReiseartAus'.", repo.DlgListBox.TitleBar100AuswahllisteReiseartAusInfo, new RecordItemIndex(2));
            Validate.AttributeContains(repo.DlgListBox.TitleBar100AuswahllisteReiseartAusInfo, "Text", "[100]  Auswahlliste Reiseart auswählen");
            
            // Workarround zweites Leerzeichen eingefügt
            Report.Log(ReportLevel.Info, "Mouse", "Workarround zweites Leerzeichen eingefügt\r\nMouse Left DoubleClick item 'DlgListBox.FlexGrid.row_mit_variable_code' at Center.", repo.DlgListBox.FlexGrid.row_mit_variable_codeInfo, new RecordItemIndex(3));
            repo.DlgListBox.FlexGrid.row_mit_variable_code.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'FormRk.TitleBar100Reiseerfassung'", repo.FormRk.TitleBar100ReiseerfassungInfo, new ActionTimeout(120000), new RecordItemIndex(4));
            repo.FormRk.TitleBar100ReiseerfassungInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='[100]  Reiseerfassung') on item 'FormRk.TitleBar100Reiseerfassung'.", repo.FormRk.TitleBar100ReiseerfassungInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.FormRk.TitleBar100ReiseerfassungInfo, "Text", "[100]  Reiseerfassung");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormRk.Allgemein' at Center.", repo.FormRk.AllgemeinInfo, new RecordItemIndex(6));
            repo.FormRk.Allgemein.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibleName='Allgemein') on item 'FormRk.Allgemein'.", repo.FormRk.AllgemeinInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.FormRk.AllgemeinInfo, "AccessibleName", "Allgemein");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Pers_nr' with focus on 'FormRk.Mitarbeiter'.", repo.FormRk.MitarbeiterInfo, new RecordItemIndex(8));
            repo.FormRk.Mitarbeiter.PressKeys(Pers_nr);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(9));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Datum_Beginn' with focus on 'FormRk.Beginn'.", repo.FormRk.BeginnInfo, new RecordItemIndex(10));
            repo.FormRk.Beginn.PressKeys(Datum_Beginn);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Beginn_Uhrzeit' with focus on 'FormRk.TpAllgemein.DfRkDtbeginnZ'.", repo.FormRk.TpAllgemein.DfRkDtbeginnZInfo, new RecordItemIndex(11));
            repo.FormRk.TpAllgemein.DfRkDtbeginnZ.PressKeys(Beginn_Uhrzeit);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Datum_Ende' with focus on 'FormRk.Ende'.", repo.FormRk.EndeInfo, new RecordItemIndex(12));
            repo.FormRk.Ende.PressKeys(Datum_Ende);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Ende_Uhrzeit' with focus on 'FormRk.TpAllgemein.DfRkDtendeZ'.", repo.FormRk.TpAllgemein.DfRkDtendeZInfo, new RecordItemIndex(13));
            repo.FormRk.TpAllgemein.DfRkDtendeZ.PressKeys(Ende_Uhrzeit);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'KB{Tab}' with focus on 'FormRk.DfRgrndCd'.", repo.FormRk.DfRgrndCdInfo, new RecordItemIndex(14));
            repo.FormRk.DfRgrndCd.PressKeys("KB{Tab}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Text_Beschreibung' with focus on 'FormRk.TpAllgemein.Beschreibung_511_521'.", repo.FormRk.TpAllgemein.Beschreibung_511_521Info, new RecordItemIndex(15));
            repo.FormRk.TpAllgemein.Beschreibung_511_521.PressKeys(Text_Beschreibung);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(16));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
