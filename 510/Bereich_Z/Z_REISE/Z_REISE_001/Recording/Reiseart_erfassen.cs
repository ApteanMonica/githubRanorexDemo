///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Z_REISE_001.Recording
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Reiseart_erfassen recording.
    /// </summary>
    [TestModule("6b6fc4cc-29b6-4860-840b-f3c90e582bbf", ModuleType.Recording, 1)]
    public partial class Reiseart_erfassen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Z_REISE_001.Z_REISE_001Repository repository.
        /// </summary>
        public static global::Z_REISE_001.Z_REISE_001Repository repo = global::Z_REISE_001.Z_REISE_001Repository.Instance;

        static Reiseart_erfassen instance = new Reiseart_erfassen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Reiseart_erfassen()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Reiseart_erfassen Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FormRart.PbNew' at Center.", repo.FormRart.PbNewInfo, new RecordItemIndex(0));
            repo.FormRart.PbNew.Click();
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'FormRart.TitleBar100Reiseart'", repo.FormRart.TitleBar100ReiseartInfo, new ActionTimeout(120000), new RecordItemIndex(1));
            repo.FormRart.TitleBar100ReiseartInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'[100]  Reiseart') on item 'FormRart.TitleBar100Reiseart'.", repo.FormRart.TitleBar100ReiseartInfo, new RecordItemIndex(2));
            Validate.AttributeContains(repo.FormRart.TitleBar100ReiseartInfo, "Text", "[100]  Reiseart");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FormRart.ColDtvonRow1' at Center.", repo.FormRart.ColDtvonRow1Info, new RecordItemIndex(3));
            repo.FormRart.ColDtvonRow1.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '01.01.1900{Tab}' with focus on 'FormRart.ColDtvonRow1'.", repo.FormRart.ColDtvonRow1Info, new RecordItemIndex(4));
            repo.FormRart.ColDtvonRow1.PressKeys("01.01.1900{Tab}");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FormRart.ColDtbisRow1' at Center.", repo.FormRart.ColDtbisRow1Info, new RecordItemIndex(5));
            repo.FormRart.ColDtbisRow1.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '31.12.2999{Tab}' with focus on 'FormRart.ColDtbisRow1'.", repo.FormRart.ColDtbisRow1Info, new RecordItemIndex(6));
            repo.FormRart.ColDtbisRow1.PressKeys("31.12.2999{Tab}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'KB{Tab}' with focus on 'FormRart.Code'.", repo.FormRart.CodeInfo, new RecordItemIndex(7));
            repo.FormRart.Code.PressKeys("KB{Tab}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'Kundenbereich{Tab}' with focus on 'FormRart.DfRartBez'.", repo.FormRart.DfRartBezInfo, new RecordItemIndex(8));
            repo.FormRart.DfRartBez.PressKeys("Kundenbereich{Tab}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'I{Tab}' with focus on 'FormRart.DfRkVar'.", repo.FormRart.DfRkVarInfo, new RecordItemIndex(9));
            repo.FormRart.DfRkVar.PressKeys("I{Tab}");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'QS-Test{Tab}' with focus on 'FormRart.Info_511_521'.", repo.FormRart.Info_511_521Info, new RecordItemIndex(10));
            repo.FormRart.Info_511_521.PressKeys("QS-Test{Tab}");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
