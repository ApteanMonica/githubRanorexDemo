///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Z_SUM_002.Recording
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Ueberpruefung_Ergebnis_Screenshot recording.
    /// </summary>
    [TestModule("62d3bd0a-ab56-4a98-b36a-623e8c3a438b", ModuleType.Recording, 1)]
    public partial class Ueberpruefung_Ergebnis_Screenshot : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Z_SUM_002.Z_SUM_002Repository repository.
        /// </summary>
        public static global::Z_SUM_002.Z_SUM_002Repository repo = global::Z_SUM_002.Z_SUM_002Repository.Instance;

        static Ueberpruefung_Ergebnis_Screenshot instance = new Ueberpruefung_Ergebnis_Screenshot();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Ueberpruefung_Ergebnis_Screenshot()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Ueberpruefung_Ergebnis_Screenshot Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{RWin down}{Up}{RWin up}' with focus on 'FrmMain'.", repo.FrmMain.SelfInfo, new RecordItemIndex(0));
            repo.FrmMain.Self.PressKeys("{RWin down}{Up}{RWin up}");
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating ContainsImage (Screenshot: 'Screenshot_ganze_Tabelle_inkl_Monatssumme' with region {X=19,Y=19,Width=1230,Height=638}) on item 'FrmMain.FlexGrid'.", repo.FrmMain.FlexGridInfo, new RecordItemIndex(1));
                Validate.ContainsImage(repo.FrmMain.FlexGridInfo, FlexGrid_Screenshot_ganze_Tabelle_inkl_Monatssumme, FlexGrid_Screenshot_ganze_Tabelle_inkl_Monatssumme_Options, null, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            // abhängig von Bildschrimgröße bzw. Auflösung ob Scrollbalken angezeigt wird oder nicht
            //Report.Log(ReportLevel.Info, "Mouse", "abhängig von Bildschrimgröße bzw. Auflösung ob Scrollbalken angezeigt wird oder nicht\r\nMouse Left Click item 'FrmMain.PageDown' at Center.", repo.FrmMain.PageDownInfo, new RecordItemIndex(2));
            //repo.FrmMain.PageDown.Click();
            
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating ContainsImage (Screenshot: 'Screenshot_Teil_2_mit_Monatssumme' with region {X=18,Y=20,Width=1235,Height=434}) on item 'FrmMain.FlexGrid'.", repo.FrmMain.FlexGridInfo, new RecordItemIndex(3));
                //Validate.ContainsImage(repo.FrmMain.FlexGridInfo, FlexGrid_Screenshot_Teil_2_mit_Monatssumme, FlexGrid_Screenshot_Teil_2_mit_Monatssumme_Options, null, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
        }

#region Image Feature Data
        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage FlexGrid_Screenshot_ganze_Tabelle_inkl_Monatssumme
        { get { return repo.FrmMain.FlexGridInfo.GetScreenshot_ganze_Tabelle_inkl_Monatssumme(new Rectangle(19, 19, 1230, 638)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions FlexGrid_Screenshot_ganze_Tabelle_inkl_Monatssumme_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage FlexGrid_Screenshot_Teil_2_mit_Monatssumme
        { get { return repo.FrmMain.FlexGridInfo.GetScreenshot_Teil_2_mit_Monatssumme(new Rectangle(18, 20, 1235, 434)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions FlexGrid_Screenshot_Teil_2_mit_Monatssumme_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
