///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Z_PROJ_003.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Projekt_K2001_bis_Datum_Status_extern_aendern recording.
    /// </summary>
    [TestModule("287d10af-c2ed-40e0-ad3e-cc8f9591e30a", ModuleType.Recording, 1)]
    public partial class Projekt_K2001_bis_Datum_Status_extern_aendern : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Z_PROJ_003.Z_PROJ_003Repository repository.
        /// </summary>
        public static global::Z_PROJ_003.Z_PROJ_003Repository repo = global::Z_PROJ_003.Z_PROJ_003Repository.Instance;

        static Projekt_K2001_bis_Datum_Status_extern_aendern instance = new Projekt_K2001_bis_Datum_Status_extern_aendern();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Projekt_K2001_bis_Datum_Status_extern_aendern()
        {
            bis_Datum2 = "31.12.2050";
            PROJ_NR_K2001_K = "K2001";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Projekt_K2001_bis_Datum_Status_extern_aendern Instance
        {
            get { return instance; }
        }

#region Variables

        string _bis_Datum2;

        /// <summary>
        /// Gets or sets the value of variable bis_Datum2.
        /// </summary>
        [TestVariable("fed2a13d-b1d2-4a3d-8924-d7af16974a18")]
        public string bis_Datum2
        {
            get { return _bis_Datum2; }
            set { _bis_Datum2 = value; }
        }

        string _PROJ_NR_K2001_K;

        /// <summary>
        /// Gets or sets the value of variable PROJ_NR_K2001_K.
        /// </summary>
        [TestVariable("be09798d-34a5-4814-91eb-a6f1bb942859")]
        public string PROJ_NR_K2001_K
        {
            get { return _PROJ_NR_K2001_K; }
            set { _PROJ_NR_K2001_K = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'FrmTabProjekt.TitleBar100ProjektVerwalten'.", repo.FrmTabProjekt.TitleBar100ProjektVerwaltenInfo, new RecordItemIndex(0));
            Validate.Exists(repo.FrmTabProjekt.TitleBar100ProjektVerwaltenInfo);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$PROJ_NR_K2001_K) on item 'FrmTabProjekt.Projektnr'.", repo.FrmTabProjekt.ProjektnrInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.FrmTabProjekt.ProjektnrInfo, "Text", PROJ_NR_K2001_K);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='K2001') on item 'FrmTabProjekt.Projektnr'.", repo.FrmTabProjekt.ProjektnrInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.FrmTabProjekt.ProjektnrInfo, "Text", "K2001");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left DoubleClick item 'FrmTabProjekt.Register_Projekt.TextBis' at Center.", repo.FrmTabProjekt.Register_Projekt.TextBisInfo, new RecordItemIndex(3));
            repo.FrmTabProjekt.Register_Projekt.TextBis.DoubleClick();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Back' Press with focus on 'FrmTabProjekt.Register_Projekt.TextBis'.", repo.FrmTabProjekt.Register_Projekt.TextBisInfo, new RecordItemIndex(4));
            Keyboard.PrepareFocus(repo.FrmTabProjekt.Register_Projekt.TextBis);
            Keyboard.Press(System.Windows.Forms.Keys.Back, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$bis_Datum2' with focus on 'FrmTabProjekt.Register_Projekt.TextBis'.", repo.FrmTabProjekt.Register_Projekt.TextBisInfo, new RecordItemIndex(5));
            repo.FrmTabProjekt.Register_Projekt.TextBis.EnsureVisible();
            Keyboard.Press(bis_Datum2);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press with focus on 'FrmTabProjekt.Register_Projekt.TextBis'.", repo.FrmTabProjekt.Register_Projekt.TextBisInfo, new RecordItemIndex(6));
            Keyboard.PrepareFocus(repo.FrmTabProjekt.Register_Projekt.TextBis);
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Endedatum aller Phasen außerhalb des Projektzeitraums auf das Endedatum') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(7));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Endedatum aller Phasen außerhalb des Projektzeitraums auf das Endedatum");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$bis_Datum2) on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(8));
            Validate.AttributeContains(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", bis_Datum2);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(9));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '1' with focus on 'FrmTabProjekt.Register_Projekt.Status_extern'.", repo.FrmTabProjekt.Register_Projekt.Status_externInfo, new RecordItemIndex(10));
            repo.FrmTabProjekt.Register_Projekt.Status_extern.PressKeys("1");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press with focus on 'FrmTabProjekt.Register_Projekt.Status_extern'.", repo.FrmTabProjekt.Register_Projekt.Status_externInfo, new RecordItemIndex(11));
            Keyboard.PrepareFocus(repo.FrmTabProjekt.Register_Projekt.Status_extern);
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Soll diese Änderung bei den Phasen auch durchgeführt werden?') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Soll diese Änderung bei den Phasen auch durchgeführt werden?");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(13));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmTabProjekt.PbDataAccessSave' at Center.", repo.FrmTabProjekt.PbDataAccessSaveInfo, new RecordItemIndex(14));
            repo.FrmTabProjekt.PbDataAccessSave.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$bis_Datum2) on item 'FrmTabProjekt.Register_Projekt.TextBis'.", repo.FrmTabProjekt.Register_Projekt.TextBisInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.FrmTabProjekt.Register_Projekt.TextBisInfo, "Text", bis_Datum2);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='1') on item 'FrmTabProjekt.Register_Projekt.Status_extern'.", repo.FrmTabProjekt.Register_Projekt.Status_externInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.FrmTabProjekt.Register_Projekt.Status_externInfo, "Text", "1");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
