///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Z_PROJ_004.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The I_AUSFLUG_Meilenstein_neu recording.
    /// </summary>
    [TestModule("3ff99ca8-d409-433e-936f-356bd6c88acc", ModuleType.Recording, 1)]
    public partial class I_AUSFLUG_Meilenstein_neu : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Z_PROJ_004.Z_PROJ_004Repository repository.
        /// </summary>
        public static global::Z_PROJ_004.Z_PROJ_004Repository repo = global::Z_PROJ_004.Z_PROJ_004Repository.Instance;

        static I_AUSFLUG_Meilenstein_neu instance = new I_AUSFLUG_Meilenstein_neu();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public I_AUSFLUG_Meilenstein_neu()
        {
            PROJ_NR_I_AUSFLUG_IP = "I-AUSFLUG";
            bis_Datum2 = "31.12.2050";
            von_Datum_I_AUSFLUG = "08.06.2021";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static I_AUSFLUG_Meilenstein_neu Instance
        {
            get { return instance; }
        }

#region Variables

        string _PROJ_NR_I_AUSFLUG_IP;

        /// <summary>
        /// Gets or sets the value of variable PROJ_NR_I_AUSFLUG_IP.
        /// </summary>
        [TestVariable("8cabb4d5-e3e2-4f1c-a733-ef8db21afdf2")]
        public string PROJ_NR_I_AUSFLUG_IP
        {
            get { return _PROJ_NR_I_AUSFLUG_IP; }
            set { _PROJ_NR_I_AUSFLUG_IP = value; }
        }

        string _bis_Datum2;

        /// <summary>
        /// Gets or sets the value of variable bis_Datum2.
        /// </summary>
        [TestVariable("8d411f3a-6500-4484-8efc-4beac460c6f3")]
        public string bis_Datum2
        {
            get { return _bis_Datum2; }
            set { _bis_Datum2 = value; }
        }

        string _von_Datum_I_AUSFLUG;

        /// <summary>
        /// Gets or sets the value of variable von_Datum_I_AUSFLUG.
        /// </summary>
        [TestVariable("e9f4dcab-a057-4d19-95e6-942d1441d8ee")]
        public string von_Datum_I_AUSFLUG
        {
            get { return _von_Datum_I_AUSFLUG; }
            set { _von_Datum_I_AUSFLUG = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'FrmTabProjekt.TitleBar100ProjektVerwalten'.", repo.FrmTabProjekt.TitleBar100ProjektVerwaltenInfo, new RecordItemIndex(0));
            Validate.Exists(repo.FrmTabProjekt.TitleBar100ProjektVerwaltenInfo);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$PROJ_NR_I_AUSFLUG_IP) on item 'FrmTabProjekt.Projektnr'.", repo.FrmTabProjekt.ProjektnrInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.FrmTabProjekt.ProjektnrInfo, "Text", PROJ_NR_I_AUSFLUG_IP);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmTabProjekt.Register_Phasen.Phasen_Zeilen.Row1Column0' at Center.", repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.Row1Column0Info, new RecordItemIndex(2));
            repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.Row1Column0.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Insert' Press with focus on 'FrmTabProjekt.Register_Phasen.Phasen_Zeilen.Row1Column0'.", repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.Row1Column0Info, new RecordItemIndex(3));
            Keyboard.PrepareFocus(repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.Row1Column0);
            Keyboard.Press(System.Windows.Forms.Keys.Insert, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '50' with focus on 'FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasCdRow10'.", repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasCdRow10Info, new RecordItemIndex(4));
            repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasCdRow10.PressKeys("50");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(5));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'MEILENSTEIN' with focus on 'FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasBezRow10'.", repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasBezRow10Info, new RecordItemIndex(6));
            repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasBezRow10.PressKeys("MEILENSTEIN");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(7));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '2' with focus on 'FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasArtRow10'.", repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasArtRow10Info, new RecordItemIndex(8));
            repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasArtRow10.PressKeys("2");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(9));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            // Warten auf Meldung
            Report.Log(ReportLevel.Info, "Wait", "Warten auf Meldung\r\nWaiting 1m to exist. Associated repository item: 'ProjekteVerwalten_Meldung.ProjekteVerwalten'", repo.ProjekteVerwalten_Meldung.ProjekteVerwaltenInfo, new ActionTimeout(60000), new RecordItemIndex(10));
            repo.ProjekteVerwalten_Meldung.ProjekteVerwaltenInfo.WaitForExists(60000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='PlanZeiten, Beginn, Ende, Plan-Beginn und Plan-Ende\r\nwerden bei Meilensteinen angepasst, trotzdem fortfahren?') on item 'ProjekteVerwalten_Meldung.LabelMeldungstext'.", repo.ProjekteVerwalten_Meldung.LabelMeldungstextInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.ProjekteVerwalten_Meldung.LabelMeldungstextInfo, "Text", "PlanZeiten, Beginn, Ende, Plan-Beginn und Plan-Ende\r\nwerden bei Meilensteinen angepasst, trotzdem fortfahren?");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProjekteVerwalten_Meldung.Button0' at Center.", repo.ProjekteVerwalten_Meldung.Button0Info, new RecordItemIndex(12));
            repo.ProjekteVerwalten_Meldung.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$von_Datum_I_AUSFLUG) on item 'FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColdtPhasVonRow10'.", repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColdtPhasVonRow10Info, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColdtPhasVonRow10Info, "Text", von_Datum_I_AUSFLUG);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$bis_Datum2' with focus on 'FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColdtPhasBisRow10'.", repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColdtPhasBisRow10Info, new RecordItemIndex(14));
            repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColdtPhasBisRow10.PressKeys(bis_Datum2);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(15));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='2') on item 'FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasPspCodeRow10'.", repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasPspCodeRow10Info, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasPspCodeRow10Info, "Text", "2");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='50') on item 'FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasCdRow10'.", repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasCdRow10Info, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasCdRow10Info, "Text", "50");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='MEILENSTEIN') on item 'FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasBezRow10'.", repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasBezRow10Info, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColPhasBezRow10Info, "Text", "MEILENSTEIN");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$bis_Datum2) on item 'FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColdtPhasVonRow10'.", repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColdtPhasVonRow10Info, new RecordItemIndex(19));
            Validate.AttributeContains(repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColdtPhasVonRow10Info, "Text", bis_Datum2);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$bis_Datum2) on item 'FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColdtPhasBisRow10'.", repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColdtPhasBisRow10Info, new RecordItemIndex(20));
            Validate.AttributeContains(repo.FrmTabProjekt.Register_Phasen.Phasen_Zeilen.ColdtPhasBisRow10Info, "Text", bis_Datum2);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
