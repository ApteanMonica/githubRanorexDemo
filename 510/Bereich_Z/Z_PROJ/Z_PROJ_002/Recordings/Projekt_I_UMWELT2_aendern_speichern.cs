///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Z_PROJ_002.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Projekt_I_UMWELT2_aendern_speichern recording.
    /// </summary>
    [TestModule("e54bce37-729c-4a88-8ec8-c07a6213ae21", ModuleType.Recording, 1)]
    public partial class Projekt_I_UMWELT2_aendern_speichern : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Z_PROJ_002.Z_PROJ_002Repository repository.
        /// </summary>
        public static global::Z_PROJ_002.Z_PROJ_002Repository repo = global::Z_PROJ_002.Z_PROJ_002Repository.Instance;

        static Projekt_I_UMWELT2_aendern_speichern instance = new Projekt_I_UMWELT2_aendern_speichern();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Projekt_I_UMWELT2_aendern_speichern()
        {
            PROJ_BEZ_I_UMWELT2_Ziel = "I-UMWELT2_Z_PROJ_002";
            von_Datum2 = "27.05.2021";
            PROJ_NR_I_UMWELT2_Ziel = "I-UMWELT2";
            bis_Datum2 = "31.12.2050";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Projekt_I_UMWELT2_aendern_speichern Instance
        {
            get { return instance; }
        }

#region Variables

        string _PROJ_BEZ_I_UMWELT2_Ziel;

        /// <summary>
        /// Gets or sets the value of variable PROJ_BEZ_I_UMWELT2_Ziel.
        /// </summary>
        [TestVariable("5f3632d2-bbc7-412a-95c1-55bb4f7c863a")]
        public string PROJ_BEZ_I_UMWELT2_Ziel
        {
            get { return _PROJ_BEZ_I_UMWELT2_Ziel; }
            set { _PROJ_BEZ_I_UMWELT2_Ziel = value; }
        }

        string _von_Datum2;

        /// <summary>
        /// Gets or sets the value of variable von_Datum2.
        /// </summary>
        [TestVariable("6f5aecd3-adb6-460b-84a5-e542c10e18cf")]
        public string von_Datum2
        {
            get { return _von_Datum2; }
            set { _von_Datum2 = value; }
        }

        string _PROJ_NR_I_UMWELT2_Ziel;

        /// <summary>
        /// Gets or sets the value of variable PROJ_NR_I_UMWELT2_Ziel.
        /// </summary>
        [TestVariable("8a2a3f4a-7164-4781-ae0b-7ba1d1f4b0b7")]
        public string PROJ_NR_I_UMWELT2_Ziel
        {
            get { return _PROJ_NR_I_UMWELT2_Ziel; }
            set { _PROJ_NR_I_UMWELT2_Ziel = value; }
        }

        string _bis_Datum2;

        /// <summary>
        /// Gets or sets the value of variable bis_Datum2.
        /// </summary>
        [TestVariable("e8b1374a-3055-490e-99a5-55e8a14ea033")]
        public string bis_Datum2
        {
            get { return _bis_Datum2; }
            set { _bis_Datum2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$PROJ_NR_I_UMWELT2_Ziel) on item 'FrmTabProjekt.Projektnr'.", repo.FrmTabProjekt.ProjektnrInfo, new RecordItemIndex(0));
            Validate.AttributeEqual(repo.FrmTabProjekt.ProjektnrInfo, "Text", PROJ_NR_I_UMWELT2_Ziel);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text=$PROJ_BEZ_I_UMWELT2_Ziel) on item 'FrmTabProjekt.Bezeichnung'.", repo.FrmTabProjekt.BezeichnungInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.FrmTabProjekt.BezeichnungInfo, "Text", PROJ_BEZ_I_UMWELT2_Ziel);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$von_Datum2' with focus on 'FrmTabProjekt.Register_Projekt.Zeitraum'.", repo.FrmTabProjekt.Register_Projekt.ZeitraumInfo, new RecordItemIndex(2));
            repo.FrmTabProjekt.Register_Projekt.Zeitraum.PressKeys(von_Datum2);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press with focus on 'FrmTabProjekt.Register_Projekt.Zeitraum'.", repo.FrmTabProjekt.Register_Projekt.ZeitraumInfo, new RecordItemIndex(3));
            Keyboard.PrepareFocus(repo.FrmTabProjekt.Register_Projekt.Zeitraum);
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Beginndatum auf den 27.05.2021 setzen bei allen Phasen mit dem Beginndatum 28.05.2021? \r\n') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Beginndatum auf den 27.05.2021 setzen bei allen Phasen mit dem Beginndatum 28.05.2021? \r\n");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button1' at Center.", repo.DlgMessageBox.Button1Info, new RecordItemIndex(5));
            repo.DlgMessageBox.Button1.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$bis_Datum2' with focus on 'FrmTabProjekt.Register_Projekt.TextBis'.", repo.FrmTabProjekt.Register_Projekt.TextBisInfo, new RecordItemIndex(6));
            repo.FrmTabProjekt.Register_Projekt.TextBis.PressKeys(bis_Datum2);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press with focus on 'FrmTabProjekt.Register_Projekt.TextBis'.", repo.FrmTabProjekt.Register_Projekt.TextBisInfo, new RecordItemIndex(7));
            Keyboard.PrepareFocus(repo.FrmTabProjekt.Register_Projekt.TextBis);
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Endedatum aller Phasen außerhalb des Projektzeitraums auf das Endedatum 31.12.2050 des Projekts setzen? \r\n') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Endedatum aller Phasen außerhalb des Projektzeitraums auf das Endedatum 31.12.2050 des Projekts setzen? \r\n");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(9));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '0' with focus on 'FrmTabProjekt.Register_Projekt.DfProjStatusExt'.", repo.FrmTabProjekt.Register_Projekt.DfProjStatusExtInfo, new RecordItemIndex(10));
            repo.FrmTabProjekt.Register_Projekt.DfProjStatusExt.PressKeys("0");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press with focus on 'FrmTabProjekt.Register_Projekt.DfProjStatusExt'.", repo.FrmTabProjekt.Register_Projekt.DfProjStatusExtInfo, new RecordItemIndex(11));
            Keyboard.PrepareFocus(repo.FrmTabProjekt.Register_Projekt.DfProjStatusExt);
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Soll diese Änderung bei den Phasen auch durchgeführt werden?') on item 'DlgMessageBox.LabelMeldungstext'.", repo.DlgMessageBox.LabelMeldungstextInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.DlgMessageBox.LabelMeldungstextInfo, "Text", "Soll diese Änderung bei den Phasen auch durchgeführt werden?");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DlgMessageBox.Button0' at Center.", repo.DlgMessageBox.Button0Info, new RecordItemIndex(13));
            repo.DlgMessageBox.Button0.Click();
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'FrmTabProjekt.PbDataAccessSave' at Center.", repo.FrmTabProjekt.PbDataAccessSaveInfo, new RecordItemIndex(14));
            repo.FrmTabProjekt.PbDataAccessSave.Click();
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
