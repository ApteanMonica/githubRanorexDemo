///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace AEKOOE_S_ADR_Kunden.Recordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Start_S_ADR_K_ohne_Startdaten recording.
    /// </summary>
    [TestModule("f5a9f66e-142a-4b89-9661-b400e17985df", ModuleType.Recording, 1)]
    public partial class Start_S_ADR_K_ohne_Startdaten : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::AEKOOE_S_ADR_Kunden.AEKOOE_S_ADR_KundenRepository repository.
        /// </summary>
        public static global::AEKOOE_S_ADR_Kunden.AEKOOE_S_ADR_KundenRepository repo = global::AEKOOE_S_ADR_Kunden.AEKOOE_S_ADR_KundenRepository.Instance;

        static Start_S_ADR_K_ohne_Startdaten instance = new Start_S_ADR_K_ohne_Startdaten();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Start_S_ADR_K_ohne_Startdaten()
        {
            Programmpfad = "C:\\Program Files\\rs2\\rs2\\521_SP13\\bin";
            Programm = "S_ADR";
            Mandant = " WFK";
            Benutzer = "RS_RANO_1";
            Kennwort = "rano";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Start_S_ADR_K_ohne_Startdaten Instance
        {
            get { return instance; }
        }

#region Variables

        string _Programmpfad;

        /// <summary>
        /// Gets or sets the value of variable Programmpfad.
        /// </summary>
        [TestVariable("edc3d7ab-49ba-4eac-b25e-11c6c7c67614")]
        public string Programmpfad
        {
            get { return _Programmpfad; }
            set { _Programmpfad = value; }
        }

        string _Programm;

        /// <summary>
        /// Gets or sets the value of variable Programm.
        /// </summary>
        [TestVariable("a5a18761-436a-4589-bfaa-e60859dfe0a9")]
        public string Programm
        {
            get { return _Programm; }
            set { _Programm = value; }
        }

        string _Mandant;

        /// <summary>
        /// Gets or sets the value of variable Mandant.
        /// </summary>
        [TestVariable("6bf1c50a-84ce-4cc5-8478-4aadf5b263fa")]
        public string Mandant
        {
            get { return _Mandant; }
            set { _Mandant = value; }
        }

        string _Benutzer;

        /// <summary>
        /// Gets or sets the value of variable Benutzer.
        /// </summary>
        [TestVariable("d29639e1-a6a2-4c80-bbff-78457291c8b2")]
        public string Benutzer
        {
            get { return _Benutzer; }
            set { _Benutzer = value; }
        }

        string _Kennwort;

        /// <summary>
        /// Gets or sets the value of variable Kennwort.
        /// </summary>
        [TestVariable("f4119202-6a65-488a-a2b7-7f3bb700efe6")]
        public string Kennwort
        {
            get { return _Kennwort; }
            set { _Kennwort = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Report.Log(ReportLevel.Info, "Application", "Run application with file name from variable $Programm with arguments '/KL=L Benutzer=RS_RANO_1 Kennwort=rano' in normal mode.", new RecordItemIndex(0));
            Host.Local.RunApplication(Programm, "/KL=L Benutzer=RS_RANO_1 Kennwort=rano", Programmpfad, false);
            
            // Header text
            Report.Log(ReportLevel.Info, "Section", "Header text", new RecordItemIndex(1));
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 1m to exist. Associated repository item: 'DlgLogin'", repo.DlgLogin.SelfInfo, new ActionTimeout(60000), new RecordItemIndex(2));
                repo.DlgLogin.SelfInfo.WaitForExists(60000);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left DoubleClick item 'DlgLogin.Frame1.Benutzer' at Center.", repo.DlgLogin.Frame1.BenutzerInfo, new RecordItemIndex(3));
                repo.DlgLogin.Frame1.Benutzer.DoubleClick();
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 1s.", new RecordItemIndex(4));
                Delay.Duration(1000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey sequence from variable '$Benutzer' with focus on 'DlgLogin.Frame1.Benutzer'.", repo.DlgLogin.Frame1.BenutzerInfo, new RecordItemIndex(5));
                repo.DlgLogin.Frame1.Benutzer.PressKeys(Benutzer);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey 'Tab' Press.", new RecordItemIndex(6));
                Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey sequence from variable '$Kennwort' with focus on 'DlgLogin.Frame1.Kennwort'.", repo.DlgLogin.Frame1.KennwortInfo, new RecordItemIndex(7));
                repo.DlgLogin.Frame1.Kennwort.PressKeys(Kennwort);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey 'Tab' Press.", new RecordItemIndex(8));
                Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey sequence from variable '$Mandant' with focus on 'DlgLogin.Frame1.Firma'.", repo.DlgLogin.Frame1.FirmaInfo, new RecordItemIndex(9));
                repo.DlgLogin.Frame1.Firma.PressKeys(Mandant);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(9)); }
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey 'Tab' Press.", new RecordItemIndex(10));
                Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'DlgLogin.Frame1.PbStandard' at Center.", repo.DlgLogin.Frame1.PbStandardInfo, new RecordItemIndex(11));
                repo.DlgLogin.Frame1.PbStandard.Click();
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 2m to exist. Associated repository item: 'FrmAdr.TitleBarWFKKundenstamm'", repo.FrmAdr.TitleBarWFKKundenstammInfo, new ActionTimeout(120000), new RecordItemIndex(12));
            repo.FrmAdr.TitleBarWFKKundenstammInfo.WaitForExists(120000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'Kundenstamm') on item 'FrmAdr.TitleBarWFKKundenstamm'.", repo.FrmAdr.TitleBarWFKKundenstammInfo, new RecordItemIndex(13));
            Validate.AttributeContains(repo.FrmAdr.TitleBarWFKKundenstammInfo, "Text", "Kundenstamm");
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$Mandant) on item 'FrmAdr.TitleBarWFKKundenstamm'.", repo.FrmAdr.TitleBarWFKKundenstammInfo, new RecordItemIndex(14));
            Validate.AttributeContains(repo.FrmAdr.TitleBarWFKKundenstammInfo, "Text", Mandant);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
